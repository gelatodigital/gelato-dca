{
  "address": "0x33078c81ae273e5F12D2c5991c371CB1f0BFb263",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGelatoCore",
          "name": "_gelatoCore",
          "type": "address"
        },
        {
          "internalType": "contract IOracleAggregator",
          "name": "_oracleAggregator",
          "type": "address"
        },
        {
          "internalType": "contract ISmartWalletSwapImplementation",
          "name": "_smartWalletSwap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_platformWallet",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PLATFORM_FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "allowanceDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLiquid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskReceiptId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountPerTrade",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minSlippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "checkTimeAndReturn",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountPerTrade",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_delay",
          "type": "uint256"
        }
      ],
      "name": "doSwapKyberAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "inst",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Condition[]",
              "name": "conditions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "enum Operation",
                  "name": "operation",
                  "type": "uint8"
                },
                {
                  "internalType": "enum DataFlow",
                  "name": "dataFlow",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "termsOkCheck",
                  "type": "bool"
                }
              ],
              "internalType": "struct Action[]",
              "name": "actions",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "selfProviderGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "selfProviderGasPriceCeil",
              "type": "uint256"
            }
          ],
          "internalType": "struct Task",
          "name": "_task",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "execPayload",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelatoCore",
      "outputs": [
        {
          "internalType": "contract IGelatoCore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountPerTrade",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minSlippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "getConditionData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taskReceiptId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_conditionData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ok",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAggregator",
      "outputs": [
        {
          "internalType": "contract IOracleAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformWallet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "provideFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "reAssignExecutor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_platformWallet",
          "type": "address"
        }
      ],
      "name": "reAssignPlatforWallet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "refTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartWalletSwap",
      "outputs": [
        {
          "internalType": "contract ISmartWalletSwapImplementation",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_nTrades",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_delay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_gasPriceCeil",
              "type": "uint256"
            }
          ],
          "internalType": "struct GelatoKrystal.OrderInputs",
          "name": "_orderInputs",
          "type": "tuple"
        }
      ],
      "name": "submitDCAKyber",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalToSpend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_dest",
          "type": "address"
        }
      ],
      "name": "unprovideFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4c1ba942891a8d9e93e7aaac9c95ce174d64858b917a54b1f83754e00ab690e4",
  "receipt": {
    "to": null,
    "from": "0xAabB54394E8dd61Dd70897E9c80be8de7C64A895",
    "contractAddress": "0x33078c81ae273e5F12D2c5991c371CB1f0BFb263",
    "transactionIndex": 3,
    "gasUsed": "2323787",
    "logsBloom": "0x0000000000000000000000000000000000000000040000040080400000008000000000000000000000800000000000000000000080020000020400000000000000000000000000000000000000004000000100000000000000080000000000000000000002000000000000000000080000000000000000000000000000000040100000000200000000000000000000800000000000000000000000002000000000000020020000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000020000000000000000020000000000000000000000000000000000000000200000000",
    "blockHash": "0x12309531ce76ad7d3ff52e2b8efcf5d78bdb8303caefcdbce12f11bb5465a5e4",
    "transactionHash": "0x4c1ba942891a8d9e93e7aaac9c95ce174d64858b917a54b1f83754e00ab690e4",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 9410457,
        "transactionHash": "0x4c1ba942891a8d9e93e7aaac9c95ce174d64858b917a54b1f83754e00ab690e4",
        "address": "0x33078c81ae273e5F12D2c5991c371CB1f0BFb263",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aabb54394e8dd61dd70897e9c80be8de7c64a895"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x12309531ce76ad7d3ff52e2b8efcf5d78bdb8303caefcdbce12f11bb5465a5e4"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9410457,
        "transactionHash": "0x4c1ba942891a8d9e93e7aaac9c95ce174d64858b917a54b1f83754e00ab690e4",
        "address": "0xb916929A3cD2862835Ca59118Cc584355928d341",
        "topics": [
          "0x1a8b0d27a5b7dcaa3d4823d6e62cb91475b6db3711f348acd68dfd2456470461",
          "0x00000000000000000000000033078c81ae273e5f12d2c5991c371cb1f0bfb263",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ba16b28675378bf62156aa9bb430177eb02c0e99"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x12309531ce76ad7d3ff52e2b8efcf5d78bdb8303caefcdbce12f11bb5465a5e4"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 9410457,
        "transactionHash": "0x4c1ba942891a8d9e93e7aaac9c95ce174d64858b917a54b1f83754e00ab690e4",
        "address": "0xb916929A3cD2862835Ca59118Cc584355928d341",
        "topics": [
          "0x0b25d15701a5ba475e30812c6fb077ee6ecaa9337afe94b54fa2d673a7e264b9",
          "0x00000000000000000000000033078c81ae273e5f12d2c5991c371cb1f0bfb263",
          "0x00000000000000000000000033078c81ae273e5f12d2c5991c371cb1f0bfb263"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x12309531ce76ad7d3ff52e2b8efcf5d78bdb8303caefcdbce12f11bb5465a5e4"
      }
    ],
    "blockNumber": 9410457,
    "cumulativeGasUsed": "2415936",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb916929A3cD2862835Ca59118Cc584355928d341",
    "0x8c5504a2733F1cbAa4741CF32316eD7CE3296B20",
    "0x4A0C59CcCae7B4F0732a4A1b9A7BDA49cc1d88F9",
    "0xBa16b28675378Bf62156aA9Bb430177Eb02c0E99",
    "0x3fFFF2F4f6C0831FAC59534694ACd14AC2Ea501b"
  ],
  "solcInputHash": "cfda6ca59c23382c977e5a2daf83f433",
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGelatoCore\",\"name\":\"_gelatoCore\",\"type\":\"address\"},{\"internalType\":\"contract IOracleAggregator\",\"name\":\"_oracleAggregator\",\"type\":\"address\"},{\"internalType\":\"contract ISmartWalletSwapImplementation\",\"name\":\"_smartWalletSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_platformWallet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PLATFORM_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowanceDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskReceiptId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"}],\"name\":\"checkTimeAndReturn\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"doSwapKyberAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inst\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Condition[]\",\"name\":\"conditions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"enum DataFlow\",\"name\":\"dataFlow\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"termsOkCheck\",\"type\":\"bool\"}],\"internalType\":\"struct Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selfProviderGasPriceCeil\",\"type\":\"uint256\"}],\"internalType\":\"struct Task\",\"name\":\"_task\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"execPayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoCore\",\"outputs\":[{\"internalType\":\"contract IGelatoCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"}],\"name\":\"getConditionData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taskReceiptId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_conditionData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ok\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"contract IOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provideFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"reAssignExecutor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_platformWallet\",\"type\":\"address\"}],\"name\":\"reAssignPlatforWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartWalletSwap\",\"outputs\":[{\"internalType\":\"contract ISmartWalletSwapImplementation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nTrades\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceCeil\",\"type\":\"uint256\"}],\"internalType\":\"struct GelatoKrystal.OrderInputs\",\"name\":\"_orderInputs\",\"type\":\"tuple\"}],\"name\":\"submitDCAKyber\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalToSpend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"unprovideFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkTimeAndReturn(uint256,address,address,address,uint256,uint256,uint256)\":{\"details\":\"Abi encode these parameter inputs. Use a placeholder for _taskReceiptId.\",\"params\":{\"_taskReceiptId\":\"Will be stripped from encoded data and replaced by  the value passed in from GelatoCore.\"}},\"execPayload(uint256,address,address,((address,bytes)[],(address,bytes,uint8,uint8,uint256,bool)[],uint256,uint256),uint256)\":{\"details\":\"Called by GelatoCore at execution time\"},\"getConditionData(address,address,address,uint256,uint256,uint256)\":{\"details\":\"use this function to encode the data off-chain for the condition data field\"},\"ok(uint256,bytes,uint256)\":{\"details\":\"Called by GelatoCore at execution time\",\"params\":{\"_conditionData\":\"The encoded data from getConditionData()\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gelato/GelatoKrystal.sol\":\"GelatoKrystal\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/gelato/GelatoConditionsStandard.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\nimport \\\"./interfaces/IGelatoCondition.sol\\\";\\n\\nabstract contract GelatoConditionsStandard is IGelatoCondition {\\n    string internal constant OK = \\\"OK\\\";\\n}\\n\",\"keccak256\":\"0xe8b8555756a3a8b0706ea4f6f16d05912c3bbb6c7ae368e142f2dc68134fa117\",\"license\":\"UNLICENSED\"},\"contracts/gelato/GelatoKrystal.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    GelatoStatefulConditionsStandard\\n} from \\\"./GelatoStatefulConditionsStandard.sol\\\";\\nimport {\\n    IGelatoCore,\\n    Provider,\\n    Condition,\\n    Operation,\\n    DataFlow,\\n    Action,\\n    Task,\\n    TaskSpec\\n} from \\\"./interfaces/IGelatoCore.sol\\\";\\nimport {IERC20, SafeERC20, SafeMath} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IOracleAggregator} from \\\"./interfaces/IOracleAggregator.sol\\\";\\nimport {ISmartWalletSwapImplementation} from \\\"./interfaces/ISmartWalletSwapImplementation.sol\\\";\\n\\ncontract GelatoKrystal is GelatoStatefulConditionsStandard, Ownable {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // user => taskReceiptId => refTime\\n    mapping(address => mapping(uint256 => uint256)) public refTime;\\n    // user => token => totalToSpend\\n    mapping(address => mapping(address => uint256)) public totalToSpend;\\n\\n    address internal constant _ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    bytes internal constant _HINT = \\\"\\\";\\n\\n    uint256 public constant PLATFORM_FEE_BPS = 8;\\n\\n    IOracleAggregator public immutable oracleAggregator;\\n    ISmartWalletSwapImplementation public immutable smartWalletSwap;\\n    address payable public platformWallet;\\n\\n    struct OrderInputs {\\n        address _inToken;\\n        address _outToken;\\n        uint256 _amountPerTrade;\\n        uint256 _nTrades;\\n        uint256 _minSlippage;\\n        uint256 _maxSlippage;\\n        uint256 _delay;\\n        uint256 _gasPriceCeil;\\n    }\\n\\n    constructor(\\n        IGelatoCore _gelatoCore,\\n        IOracleAggregator _oracleAggregator,\\n        ISmartWalletSwapImplementation _smartWalletSwap,\\n        address _executor,\\n        address payable _platformWallet\\n    )\\n        GelatoStatefulConditionsStandard(_gelatoCore)\\n        payable\\n    {\\n        oracleAggregator = _oracleAggregator;\\n        smartWalletSwap = _smartWalletSwap;\\n        platformWallet = _platformWallet;\\n\\n        // One time Gelato Setup\\n        IGelatoCore(_gelatoCore).providerAssignsExecutor(_executor);\\n        address[] memory providerModules = new address[](1);\\n        providerModules[0] = address(this);\\n        IGelatoCore(_gelatoCore).addProviderModules(providerModules);\\n        if (msg.value > 0) IGelatoCore(_gelatoCore).provideFunds{value: msg.value}(address(this));\\n    }\\n\\n    function submitDCAKyber(\\n        OrderInputs calldata _orderInputs\\n    )\\n        external\\n        payable\\n    {\\n\\n        // Update State Vars\\n        _setRefTime(_orderInputs._delay, msg.sender);\\n\\n        uint256 previousUpcoming = totalToSpend[msg.sender][_orderInputs._inToken];\\n\\n        totalToSpend[msg.sender][_orderInputs._inToken] =\\n            previousUpcoming.add(_orderInputs._amountPerTrade).mul(_orderInputs._nTrades);\\n\\n        // Submit Task Cycle to Gelato\\n        Provider memory provider =\\n            Provider({addr: address(this), module: address(this)});\\n\\n        Task[] memory tasks = _getGelatoTasks(\\n            _orderInputs._inToken,\\n            _orderInputs._outToken,\\n            _orderInputs._amountPerTrade,\\n            _orderInputs._minSlippage,\\n            _orderInputs._maxSlippage,\\n            _orderInputs._delay,\\n            _orderInputs._gasPriceCeil\\n        );\\n\\n        gelatoCore.submitTaskCycle(provider, tasks, 0, _orderInputs._nTrades);\\n\\n    }\\n\\n\\n    function allowanceDelta(address _user, IERC20 _token)\\n        public\\n        view\\n        returns(uint256 delta, bool isLiquid)\\n    {\\n        uint256 upcoming = totalToSpend[_user][address(_token)];\\n        uint256 allowance = _token.allowance(_user, address(this));\\n        if (allowance >= upcoming) {\\n            isLiquid = true;\\n            delta = allowance.sub(upcoming);\\n        } else {\\n            delta = upcoming.sub(allowance);\\n        }\\n    }\\n\\n    function doSwapKyberAction(\\n        address _inToken,\\n        address _outToken,\\n        uint256 _amountPerTrade,\\n        address payable _user,\\n        uint256 _delay\\n    ) external {\\n        // Update Condition\\n        _setRefTime(_delay, _user);\\n\\n        IERC20(_inToken).safeTransferFrom(_user, address(this), _amountPerTrade);\\n        IERC20(_inToken).safeApprove(address(smartWalletSwap), _amountPerTrade);\\n        smartWalletSwap.swapKyber(\\n            IERC20(_inToken),\\n            IERC20(_outToken),\\n            _amountPerTrade,\\n            0,\\n            _user,\\n            PLATFORM_FEE_BPS,\\n            platformWallet,\\n            _HINT,\\n            false\\n        );\\n        uint256 previousUpcoming = totalToSpend[_user][_inToken];\\n        totalToSpend[_user][_inToken] =  previousUpcoming.sub(_amountPerTrade);\\n    }\\n\\n    // ############# View Methods #############\\n\\n    // STANDARD interface\\n    /// @param _conditionData The encoded data from getConditionData()\\n    /// @dev Called by GelatoCore at execution time\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256)\\n        public\\n        view\\n        virtual\\n        override\\n        returns(string memory)\\n    {\\n        (\\n            address user,\\n            address inputToken,\\n            address outputToken,\\n            uint256 amountPerTrade,\\n            uint256 minSlippage,\\n            uint256 maxSlippage\\n        ) = abi.decode(_conditionData[36:], (address, address, address, uint256, uint256, uint256));\\n        return checkTimeAndReturn(\\n            _taskReceiptId,\\n            user,\\n            inputToken,\\n            outputToken,\\n            amountPerTrade,\\n            minSlippage,\\n            maxSlippage\\n        );\\n    }\\n\\n    /// @dev Called by GelatoCore at execution time\\n    function execPayload(uint256, address, address, Task calldata _task, uint256)\\n        external\\n        pure\\n        returns(bytes memory payload, bool)\\n    {\\n        return (_task.actions[0].data, false);\\n    }\\n\\n    /// @dev use this function to encode the data off-chain for the condition data field\\n    function getConditionData(\\n        address _user,\\n        address _inputToken,\\n        address _outputToken,\\n        uint256 _amountPerTrade,\\n        uint256 _minSlippage,\\n        uint256 _maxSlippage\\n    )\\n        public\\n        pure\\n        virtual\\n        returns(bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            this.checkTimeAndReturn.selector,\\n            uint256(0),\\n            _user,\\n            _inputToken,\\n            _outputToken,\\n            _amountPerTrade,\\n            _minSlippage,\\n            _maxSlippage\\n        );\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function _getGelatoTasks(\\n        address _inToken,\\n        address _outToken,\\n        uint256 _amountPerTrade,\\n        uint256 _minSlippage,\\n        uint256 _maxSlippage,\\n        uint256 _delay,\\n        uint256 _gasPriceCeil\\n    )\\n        private\\n        view\\n        returns(Task[] memory tasks)\\n    {\\n        Condition memory condition =\\n            Condition({\\n                inst: address(this),\\n                data: getConditionData(msg.sender, _inToken, _outToken, _amountPerTrade, _minSlippage, _maxSlippage)\\n            });\\n        Condition[] memory conditions = new Condition[](1);\\n        conditions[0] = condition;\\n\\n        Action memory swap =\\n            Action({\\n                addr: address(this),\\n                data: abi.encodeWithSelector(\\n                    this.doSwapKyberAction.selector,\\n                    _inToken,\\n                    _outToken,\\n                    _amountPerTrade,\\n                    msg.sender,\\n                    _delay\\n                ),\\n                operation: Operation.Call,\\n                dataFlow: DataFlow.None,\\n                value: 0,\\n                termsOkCheck: false\\n            });\\n        Action[] memory actions = new Action[](1);\\n        actions[0] = swap;\\n\\n        Task memory task =\\n            Task({\\n                conditions: conditions,\\n                actions: actions,\\n                selfProviderGasLimit: 3000000, // allowing all actions to consume 3M gas\\n                selfProviderGasPriceCeil: _gasPriceCeil\\n            });\\n        tasks = new Task[](1);\\n        tasks[0] = task;\\n    }\\n\\n    // Specific Implementation\\n    /// @dev Abi encode these parameter inputs. Use a placeholder for _taskReceiptId.\\n    /// @param _taskReceiptId Will be stripped from encoded data and replaced by\\n    ///  the value passed in from GelatoCore.\\n    function checkTimeAndReturn(\\n        uint256 _taskReceiptId,\\n        address _user,\\n        address _inputToken,\\n        address _outputToken,\\n        uint256 _amountPerTrade,\\n        uint256 _minSlippage,\\n        uint256 _maxSlippage\\n    )\\n        public\\n        view\\n        virtual\\n        returns(string memory)\\n    {\\n        // 1. Balance Check\\n        uint256 balance = IERC20(_inputToken).balanceOf(_user);\\n        if (balance < _amountPerTrade) return \\\"GelatoKrystsal: Insufficient balance\\\";\\n\\n        // 2. Approval Check\\n        uint256 allowance = IERC20(_inputToken).allowance(_user, address(this));\\n        if (allowance < _amountPerTrade) return \\\"GelatoKrystsal: Insufficient allowance\\\";\\n\\n        // 3. Time Check\\n        uint256 _refTime = refTime[_user][_taskReceiptId];\\n        // solhint-disable-next-line not-rely-on-time\\n        if (_refTime > block.timestamp) return \\\"GelatoKrystsal: Time not passed\\\";\\n\\n        // 4. Rate Check\\n        (uint256 idealReturn,) = oracleAggregator.getExpectedReturnAmount(\\n            _amountPerTrade,\\n            _inputToken,\\n            _outputToken\\n        );\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 slippage = _minSlippage - block.timestamp.sub(_refTime);\\n        if (_maxSlippage > slippage) {\\n            slippage = _maxSlippage;\\n        }\\n\\n        uint256 minReturn = idealReturn.sub(idealReturn.mul(slippage).div(10000));\\n        (uint256 actualReturn,) = smartWalletSwap.getExpectedReturnKyber(\\n            IERC20(_inputToken),\\n            IERC20(_outputToken),\\n            _amountPerTrade,\\n            PLATFORM_FEE_BPS,\\n            _HINT\\n        );\\n\\n        if (minReturn > actualReturn) return \\\"GelatoKrystsal: TimePassedButExpectedReturnTooLow\\\";\\n\\n        // If all checks passed\\n        return OK;\\n\\n    }\\n\\n    // ############# Private Methods #############\\n\\n    function _setRefTime(uint256 _timeDelta, address _user) private {\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 currentTime = block.timestamp;\\n        uint256 newRefTime = currentTime.add(_timeDelta);\\n        refTime[_user][_getIdOfNextTaskInCycle()] = newRefTime;\\n    }\\n\\n\\n    // ############# Mgt Methods #############\\n\\n    function reAssignExecutor(\\n        address _executor\\n    ) external payable onlyOwner {\\n        IGelatoCore(gelatoCore).providerAssignsExecutor(_executor);\\n    }\\n\\n    // Everyone can add funds\\n    function provideFunds() public payable {\\n        IGelatoCore(gelatoCore).provideFunds{value: msg.value}(address(this));\\n    }\\n\\n    function unprovideFunds(uint256 _amount, address _dest) public payable onlyOwner {\\n        uint256 amount = IGelatoCore(gelatoCore).unprovideFunds(_amount);\\n        (bool success, ) = _dest.call{value: amount}(\\\"\\\");\\n        require(success, \\\"unprovideFunds:: Reverted\\\");\\n    }\\n\\n    function reAssignPlatforWallet (\\n        address payable _platformWallet\\n    ) external payable onlyOwner {\\n        platformWallet = _platformWallet;\\n    }\\n\\n    // ############# Fallback #############\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x412569db63488a7372c0a7daedaf06349f79bf95ce8410538302204fa59f7b8a\",\"license\":\"UNLICENSED\"},\"contracts/gelato/GelatoStatefulConditionsStandard.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\nimport \\\"./GelatoConditionsStandard.sol\\\";\\nimport {IGelatoCore} from \\\"./interfaces/IGelatoCore.sol\\\";\\n\\nabstract contract GelatoStatefulConditionsStandard is GelatoConditionsStandard {\\n    IGelatoCore public immutable gelatoCore;\\n\\n    constructor(IGelatoCore _gelatoCore) { gelatoCore = _gelatoCore; }\\n\\n    function _getIdOfNextTaskInCycle() internal view returns(uint256 nextTaskReceiptId) {\\n        try gelatoCore.currentTaskReceiptId() returns(uint256 currentId) {\\n            nextTaskReceiptId = currentId + 1;\\n        } catch Error(string memory _err) {\\n            revert(\\n                string(abi.encodePacked(\\n                    \\\"GelatoStatefulConditionsStandard._getIdOfNextTaskInCycle\\\", _err\\n                ))\\n            );\\n        } catch {\\n            revert(\\\"GelatoStatefulConditionsStandard._getIdOfNextTaskInCycle:undefined\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xfbc30139bfea61b307cb241251e441e72e1ef11c840bbe8b6f85ec46a4316620\",\"license\":\"UNLICENSED\"},\"contracts/gelato/interfaces/IGelatoCondition.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0x69193cf35faf357972b51fc1ef75ec12f31d43dcc52c3dfb648baaa57e94016a\",\"license\":\"UNLICENSED\"},\"contracts/gelato/interfaces/IGelatoCore.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    address module;  //  address of provider module\\n}\\n\\nstruct Condition {\\n    address inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\n// TaskSpec - Will be whitelised by providers and selected by users\\nstruct TaskSpec {\\n    address[] conditions;   // Address: optional AddressZero for self-conditional actions\\n    Action[] actions;\\n    uint256 gasPriceCeil;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n\\n    // GelatoProviders.sol\\n\\n    // Provider Funding\\n    event LogFundsProvided(\\n        address indexed provider,\\n        uint256 amount,\\n        uint256 newProviderFunds\\n    );\\n    event LogFundsUnprovided(\\n        address indexed provider,\\n        uint256 realWithdrawAmount,\\n        uint256 newProviderFunds\\n    );\\n\\n    // Executor By Provider\\n    event LogProviderAssignedExecutor(\\n        address indexed provider,\\n        address indexed oldExecutor,\\n        address indexed newExecutor\\n    );\\n    event LogExecutorAssignedExecutor(\\n        address indexed provider,\\n        address indexed oldExecutor,\\n        address indexed newExecutor\\n    );\\n\\n    // Actions\\n    event LogTaskSpecProvided(address indexed provider, bytes32 indexed taskSpecHash);\\n    event LogTaskSpecUnprovided(address indexed provider, bytes32 indexed taskSpecHash);\\n    event LogTaskSpecGasPriceCeilSet(\\n        address indexed provider,\\n        bytes32 taskSpecHash,\\n        uint256 oldTaskSpecGasPriceCeil,\\n        uint256 newTaskSpecGasPriceCeil\\n    );\\n\\n    // Provider Module\\n    event LogProviderModuleAdded(\\n        address indexed provider,\\n        address indexed module\\n    );\\n    event LogProviderModuleRemoved(\\n        address indexed provider,\\n        address indexed module\\n    );\\n\\n    // =========== GELATO PROVIDER APIs ==============\\n\\n    /// @notice Validation that checks whether Task Spec is being offered by the selected provider\\n    /// @dev Checked in submitTask(), unless provider == userProxy\\n    /// @param _provider Address of selected provider\\n    /// @param _taskSpec Task Spec\\n    /// @return Expected to return \\\"OK\\\"\\n    function isTaskSpecProvided(address _provider, TaskSpec calldata _taskSpec)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Validates that provider has provider module whitelisted + conducts isProvided check in ProviderModule\\n    /// @dev Checked in submitTask() if provider == userProxy\\n    /// @param _userProxy userProxy passed by GelatoCore during submission and exec\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task Task defined in IGelatoCore\\n    /// @return Expected to return \\\"OK\\\"\\n    function providerModuleChecks(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n\\n    /// @notice Validate if provider module and seleced TaskSpec is whitelisted by provider\\n    /// @dev Combines \\\"isTaskSpecProvided\\\" and providerModuleChecks\\n    /// @param _userProxy userProxy passed by GelatoCore during submission and exec\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task Task defined in IGelatoCore\\n    /// @return res Expected to return \\\"OK\\\"\\n    function isTaskProvided(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task\\n    )\\n        external\\n        view\\n        returns(string memory res);\\n\\n\\n    /// @notice Validate if selected TaskSpec is whitelisted by provider and that current gelatoGasPrice is below GasPriceCeil\\n    /// @dev If gasPriceCeil is != 0, Task Spec is whitelisted\\n    /// @param _userProxy userProxy passed by GelatoCore during submission and exec\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task Task defined in IGelatoCore\\n    /// @param _gelatoGasPrice Task Receipt defined in IGelatoCore\\n    /// @return res Expected to return \\\"OK\\\"\\n    function providerCanExec(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _gelatoGasPrice\\n    )\\n        external\\n        view\\n        returns(string memory res);\\n\\n    // =========== PROVIDER STATE WRITE APIs ==============\\n    // Provider Funding\\n    /// @notice Deposit ETH as provider on Gelato\\n    /// @param _provider Address of provider who receives ETH deposit\\n    function provideFunds(address _provider) external payable;\\n\\n    /// @notice Withdraw provider funds from gelato\\n    /// @param _withdrawAmount Amount\\n    /// @return amount that will be withdrawn\\n    function unprovideFunds(uint256 _withdrawAmount) external returns(uint256);\\n\\n    /// @notice Assign executor as provider\\n    /// @param _executor Address of new executor\\n    function providerAssignsExecutor(address _executor) external;\\n\\n    /// @notice Assign executor as previous selected executor\\n    /// @param _provider Address of provider whose executor to change\\n    /// @param _newExecutor Address of new executor\\n    function executorAssignsExecutor(address _provider, address _newExecutor) external;\\n\\n    // (Un-)provide Task Spec\\n\\n    /// @notice Whitelist TaskSpecs (A combination of a Condition, Action(s) and a gasPriceCeil) that users can select from\\n    /// @dev If gasPriceCeil is == 0, Task Spec will be executed at any gas price (no ceil)\\n    /// @param _taskSpecs Task Receipt List defined in IGelatoCore\\n    function provideTaskSpecs(TaskSpec[] calldata _taskSpecs) external;\\n\\n    /// @notice De-whitelist TaskSpecs (A combination of a Condition, Action(s) and a gasPriceCeil) that users can select from\\n    /// @dev If gasPriceCeil was set to NO_CEIL, Input NO_CEIL constant as GasPriceCeil\\n    /// @param _taskSpecs Task Receipt List defined in IGelatoCore\\n    function unprovideTaskSpecs(TaskSpec[] calldata _taskSpecs) external;\\n\\n    /// @notice Update gasPriceCeil of selected Task Spec\\n    /// @param _taskSpecHash Result of hashTaskSpec()\\n    /// @param _gasPriceCeil New gas price ceil for Task Spec\\n    function setTaskSpecGasPriceCeil(bytes32 _taskSpecHash, uint256 _gasPriceCeil) external;\\n\\n    // Provider Module\\n    /// @notice Whitelist new provider Module(s)\\n    /// @param _modules Addresses of the modules which will be called during providerModuleChecks()\\n    function addProviderModules(address[] calldata _modules) external;\\n\\n    /// @notice De-Whitelist new provider Module(s)\\n    /// @param _modules Addresses of the modules which will be removed\\n    function removeProviderModules(address[] calldata _modules) external;\\n\\n    // Batch (un-)provide\\n\\n    /// @notice Whitelist new executor, TaskSpec(s) and Module(s) in one tx\\n    /// @param _executor Address of new executor of provider\\n    /// @param _taskSpecs List of Task Spec which will be whitelisted by provider\\n    /// @param _modules List of module addresses which will be whitelisted by provider\\n    function multiProvide(\\n        address _executor,\\n        TaskSpec[] calldata _taskSpecs,\\n        address[] calldata _modules\\n    )\\n        external\\n        payable;\\n\\n\\n    /// @notice De-Whitelist TaskSpec(s), Module(s) and withdraw funds from gelato in one tx\\n    /// @param _withdrawAmount Amount to withdraw from ProviderFunds\\n    /// @param _taskSpecs List of Task Spec which will be de-whitelisted by provider\\n    /// @param _modules List of module addresses which will be de-whitelisted by provider\\n    function multiUnprovide(\\n        uint256 _withdrawAmount,\\n        TaskSpec[] calldata _taskSpecs,\\n        address[] calldata _modules\\n    )\\n        external;\\n\\n    // =========== PROVIDER STATE READ APIs ==============\\n    // Provider Funding\\n\\n    /// @notice Get balance of provider\\n    /// @param _provider Address of provider\\n    /// @return Provider Balance\\n    function providerFunds(address _provider) external view returns(uint256);\\n\\n    /// @notice Get min stake required by all providers for executors to call exec\\n    /// @param _gelatoMaxGas Current gelatoMaxGas\\n    /// @param _gelatoGasPrice Current gelatoGasPrice\\n    /// @return How much provider balance is required for executor to submit exec tx\\n    function minExecProviderFunds(uint256 _gelatoMaxGas, uint256 _gelatoGasPrice)\\n        external\\n        view\\n        returns(uint256);\\n\\n    /// @notice Check if provider has sufficient funds for executor to call exec\\n    /// @param _provider Address of provider\\n    /// @param _gelatoMaxGas Currentt gelatoMaxGas\\n    /// @param _gelatoGasPrice Current gelatoGasPrice\\n    /// @return Whether provider is liquid (true) or not (false)\\n    function isProviderLiquid(\\n        address _provider,\\n        uint256 _gelatoMaxGas,\\n        uint256 _gelatoGasPrice\\n    )\\n        external\\n        view\\n        returns(bool);\\n\\n    // Executor Stake\\n\\n    /// @notice Get balance of executor\\n    /// @param _executor Address of executor\\n    /// @return Executor Balance\\n    function executorStake(address _executor) external view returns(uint256);\\n\\n    /// @notice Check if executor has sufficient stake on gelato\\n    /// @param _executor Address of provider\\n    /// @return Whether executor has sufficient stake (true) or not (false)\\n    function isExecutorMinStaked(address _executor) external view returns(bool);\\n\\n    /// @notice Get executor of provider\\n    /// @param _provider Address of provider\\n    /// @return Provider's executor\\n    function executorByProvider(address _provider)\\n        external\\n        view\\n        returns(address);\\n\\n    /// @notice Get num. of providers which haved assigned an executor\\n    /// @param _executor Address of executor\\n    /// @return Count of how many providers assigned the executor\\n    function executorProvidersCount(address _executor) external view returns(uint256);\\n\\n    /// @notice Check if executor has one or more providers assigned\\n    /// @param _executor Address of provider\\n    /// @return Where 1 or more providers have assigned the executor\\n    function isExecutorAssigned(address _executor) external view returns(bool);\\n\\n    // Task Spec and Gas Price Ceil\\n    /// @notice The maximum gas price the transaction will be executed with\\n    /// @param _provider Address of provider\\n    /// @param _taskSpecHash Hash of provider TaskSpec\\n    /// @return Max gas price an executor will execute the transaction with in wei\\n    function taskSpecGasPriceCeil(address _provider, bytes32 _taskSpecHash)\\n        external\\n        view\\n        returns(uint256);\\n\\n    /// @notice Returns the hash of the formatted TaskSpec.\\n    /// @dev The action.data field of each Action is stripped before hashing.\\n    /// @param _taskSpec TaskSpec\\n    /// @return keccak256 hash of encoded condition address and Action List\\n    function hashTaskSpec(TaskSpec calldata _taskSpec) external view returns(bytes32);\\n\\n    /// @notice Constant used to specify the highest gas price available in the gelato system\\n    /// @dev Input 0 as gasPriceCeil and it will be assigned to NO_CEIL\\n    /// @return MAX_UINT\\n    function NO_CEIL() external pure returns(uint256);\\n\\n    // Providers' Module Getters\\n\\n    /// @notice Check if inputted module is whitelisted by provider\\n    /// @param _provider Address of provider\\n    /// @param _module Address of module\\n    /// @return true if it is whitelisted\\n    function isModuleProvided(address _provider, address _module)\\n        external\\n        view\\n        returns(bool);\\n\\n    /// @notice Get all whitelisted provider modules from a given provider\\n    /// @param _provider Address of provider\\n    /// @return List of whitelisted provider modules\\n    function providerModules(address _provider)\\n        external\\n        view\\n        returns(address[] memory);\\n\\n\\n}\\n\",\"keccak256\":\"0xed2a70307604aab6ffb5d0dc7224e0bc3cebd8bea2fa8d911f8a3d8b65fdc797\",\"license\":\"UNLICENSED\"},\"contracts/gelato/interfaces/IOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.0;\\n\\n/**\\n * @dev Interface of the Oracle Aggregator Contract\\n */\\ninterface IOracleAggregator {\\n    function getExpectedReturnAmount(\\n        uint256 amount,\\n        address tokenAddressA,\\n        address tokenAddressB\\n    ) external view returns (uint256 returnAmount, uint256 decimals);\\n}\",\"keccak256\":\"0x18e940e68b43c84ca02b992ea9fdd28fc6dd34980fcf018ab1b731258364abbf\",\"license\":\"MIT\"},\"contracts/gelato/interfaces/ISmartWalletSwapImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n// Importing here due to compiler issues\\ninterface ISmartWalletSwapImplementation {\\n\\n    function getExpectedReturnKyber(\\n    IERC20 src,\\n    IERC20 dest,\\n    uint256 srcAmount,\\n    uint256 platformFeeBps,\\n    bytes calldata hint\\n  ) external view returns (uint256 destAmount, uint256 expectedRate);\\n\\n  function swapKyber(\\n    IERC20 src,\\n    IERC20 dest,\\n    uint256 srcAmount,\\n    uint256 minConversionRate,\\n    address payable recipient,\\n    uint256 platformFeeBps,\\n    address payable platformWallet,\\n    bytes calldata hint,\\n    bool useGasToken\\n  ) external payable returns (uint256 destAmount);\\n\\n}\",\"keccak256\":\"0x4be389fb94a0b5396e7aa1f75d6b7099d3b90aee990300f5bfdd73d1836516f6\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c80638787ea36116100ab578063a99891c51161006f578063a99891c5146102d7578063b948104e146102f7578063bd71c39c14610325578063f2fde38b14610345578063fa2af9da14610365578063fe861b991461037a57610135565b80638787ea361461025a5780638c8500bf1461026d5780638da5cb5b1461028d5780638dffe3f4146102a257806390a488ac146102b757610135565b806332786692116100f257806332786692146101c357806347486af0146101d65780634cc342d614610203578063539aa77f14610223578063715018a61461024557610135565b806304a52e291461013a57806306fca7281461014f57806317b333081461018657806326d3562d1461018e5780633238c4f1146101b057610135565b3661013557005b600080fd5b61014d610148366004611928565b61038f565b005b34801561015b57600080fd5b5061016f61016a366004611b46565b6103ef565b60405161017d929190611f49565b60405180910390f35b61014d610474565b34801561019a57600080fd5b506101a36104f6565b60405161017d9190611e98565b61014d6101be366004611928565b61051a565b61014d6101d1366004611a85565b6105b5565b3480156101e257600080fd5b506101f66101f1366004611ad9565b610757565b60405161017d9190611f36565b34801561020f57600080fd5b5061014d61021e3660046119e0565b610b16565b34801561022f57600080fd5b50610238610c8f565b60405161017d919061234e565b34801561025157600080fd5b5061014d610c94565b61014d610268366004611ab5565b610d13565b34801561027957600080fd5b506101f6610288366004611944565b610e6d565b34801561029957600080fd5b506101a3610ed3565b3480156102ae57600080fd5b506101a3610ee3565b3480156102c357600080fd5b506102386102d2366004611a3a565b610f07565b3480156102e357600080fd5b506101f66102f2366004611bab565b610f24565b34801561030357600080fd5b506103176103123660046119a8565b610f71565b60405161017d9291906123b5565b34801561033157600080fd5b506102386103403660046119a8565b611048565b34801561035157600080fd5b5061014d610360366004611928565b611065565b34801561037157600080fd5b506101a361111b565b34801561038657600080fd5b506101a361112a565b61039761114e565b6000546001600160a01b039081169116146103cd5760405162461bcd60e51b81526004016103c4906121b6565b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6060600061040060208501856123c5565b600081811061040b57fe5b905060200281019061041d9190612458565b61042b906020810190612413565b600082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929d939c50929a5050505050505050505050565b6040516328d0cad760e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906328d0cad79034906104c2903090600401611e98565b6000604051808303818588803b1580156104db57600080fd5b505af11580156104ef573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61052261114e565b6000546001600160a01b0390811691161461054f5760405162461bcd60e51b81526004016103c4906121b6565b60405163088a5e3360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906388a5e3309061059b908490600401611e98565b600060405180830381600087803b1580156104db57600080fd5b6105c38160c0013533611152565b33600090815260026020908152604082209082906105e390850185611928565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905061062b826060013561062584604001358461119c90919063ffffffff16565b906111ca565b3360009081526002602090815260408220919061064a90860186611928565b6001600160a01b0316815260208101919091526040016000205561066c61189b565b5060408051808201909152308082526020808301919091526060906106c59061069790860186611928565b6106a76040870160208801611928565b866040013587608001358860a001358960c001358a60e00135611204565b6040516316691c4d60e31b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b348e2689061071f908590859060009060608b0135906004016122c2565b600060405180830381600087803b15801561073957600080fd5b505af115801561074d573d6000803e3d6000fd5b5050505050505050565b60606000866001600160a01b03166370a08231896040518263ffffffff1660e01b81526004016107879190611e98565b60206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190611a9d565b905084811015610802576040518060600160405280602481526020016125dc60249139915050610b0b565b604051636eb1769f60e11b81526000906001600160a01b0389169063dd62ed3e90610833908c903090600401611eac565b60206040518083038186803b15801561084b57600080fd5b505afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190611a9d565b9050858110156108af576040518060600160405280602681526020016125856026913992505050610b0b565b6001600160a01b03891660009081526001602090815260408083208d84529091529020544281111561091b576040518060400160405280601f81526020017f47656c61746f4b7279737473616c3a2054696d65206e6f7420706173736564008152509350505050610b0b565b604051630f1dcadb60e21b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633c772b6c9061096e908b908e908e90600401612357565b604080518083038186803b15801561098557600080fd5b505afa158015610999573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bd9190611c28565b50905060006109cc42846113fb565b88039050808711156109db5750855b60006109fd6109f66127106109f086866111ca565b9061143d565b84906113fb565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2459d638e8e8e6008604051806020016040528060008152506040518663ffffffff1660e01b8152600401610a65959493929190611fd9565b604080518083038186803b158015610a7c57600080fd5b505afa158015610a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab49190611c28565b50905080821115610ae6576040518060600160405280603181526020016125ab60319139975050505050505050610b0b565b604051806040016040528060028152602001614f4b60f01b8152509750505050505050505b979650505050505050565b610b208183611152565b610b356001600160a01b03861683308661147f565b610b696001600160a01b0386167f0000000000000000000000000000000000000000000000000000000000000000856114d7565b600354604080516020810182526000808252915163cf512b5360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169463cf512b5394610bd8948c948c948c948c936008939190921691908590600401611f6d565b602060405180830381600087803b158015610bf257600080fd5b505af1158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190611a9d565b506001600160a01b03808316600090815260026020908152604080832093891683529290522054610c5b81856113fb565b6001600160a01b03938416600090815260026020908152604080832099909616825297909752929095209190915550505050565b600881565b610c9c61114e565b6000546001600160a01b03908116911614610cc95760405162461bcd60e51b81526004016103c4906121b6565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610d1b61114e565b6000546001600160a01b03908116911614610d485760405162461bcd60e51b81526004016103c4906121b6565b60405163c6638a8b60e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c6638a8b90610d9790869060040161234e565b602060405180830381600087803b158015610db157600080fd5b505af1158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de99190611a9d565b90506000826001600160a01b031682604051610e0490610ee0565b60006040518083038185875af1925050503d8060008114610e41576040519150601f19603f3d011682016040523d82523d6000602084013e610e46565b606091505b5050905080610e675760405162461bcd60e51b81526004016103c49061213e565b50505050565b60606347486af060e01b6000888888888888604051602401610e959796959493929190612376565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509695505050505050565b6000546001600160a01b03165b90565b7f000000000000000000000000000000000000000000000000000000000000000081565b600160209081526000928352604080842090915290825290205481565b606060008080808080610f3a896024818d61246d565b810190610f479190611944565b955095509550955095509550610f628b878787878787610757565b9b9a5050505050505050505050565b6001600160a01b03808316600090815260026020908152604080832093851680845293909152808220549051636eb1769f60e11b81529192839283919063dd62ed3e90610fc49089903090600401611eac565b60206040518083038186803b158015610fdc57600080fd5b505afa158015610ff0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110149190611a9d565b9050818110611032576001925061102b81836113fb565b935061103f565b61103c82826113fb565b93505b50509250929050565b600260209081526000928352604080842090915290825290205481565b61106d61114e565b6000546001600160a01b0390811691161461109a5760405162461bcd60e51b81526004016103c4906121b6565b6001600160a01b0381166110c05760405162461bcd60e51b81526004016103c49061207b565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b3390565b42600061115f828561119c565b6001600160a01b038416600090815260016020526040812091925082919061118561159f565b815260208101919091526040016000205550505050565b6000828201838110156111c15760405162461bcd60e51b81526004016103c4906120c1565b90505b92915050565b6000826111d9575060006111c4565b828202828482816111e657fe5b04146111c15760405162461bcd60e51b81526004016103c490612175565b606061120e6118b2565b6040518060400160405280306001600160a01b03168152602001611236338c8c8c8c8c610e6d565b905260408051600180825281830190925291925060609190816020015b61125b6118b2565b815260200190600190039081611253579050509050818160008151811061127e57fe5b60200260200101819052506112916118ca565b6040805160c08101825230815290516020820190632661a16b60e11b906112c4908f908f908f9033908e90602401611eea565b60408051601f19818403018152919052602080820180516001600160e01b03166001600160e01b031990941693909317909252825201600081526020016000815260006020820181905260409091018190529091506060906001905060405190808252806020026020018201604052801561135957816020015b6113466118ca565b81526020019060019003908161133e5790505b509050818160008151811061136a57fe5b602002602001018190525061137d611900565b506040805160808101825284815260208101839052622dc6c08183015260608101889052815160018082528184019093529091816020015b6113bd611900565b8152602001906001900390816113b557905050955080866000815181106113e057fe5b60200260200101819052505050505050979650505050505050565b60006111c183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611698565b60006111c183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506116c9565b610e67846323b872dd60e01b8585856040516024016114a093929190611ec6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611700565b80158061155f5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061150d9030908690600401611eac565b60206040518083038186803b15801561152557600080fd5b505afa158015611539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155d9190611a9d565b155b61157b5760405162461bcd60e51b81526004016103c49061226c565b61159a8363095ea7b360e01b84846040516024016114a0929190611f1d565b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb07c5036040518163ffffffff1660e01b815260040160206040518083038186803b1580156115fa57600080fd5b505afa92505050801561162a575060408051601f3d908101601f1916820190925261162791810190611a9d565b60015b611690576116366124c7565b806116415750611678565b806040516020016116529190611e2d565b60408051601f198184030181529082905262461bcd60e51b82526103c491600401611f36565b60405162461bcd60e51b81526004016103c490612013565b600101905090565b600081848411156116bc5760405162461bcd60e51b81526004016103c49190611f36565b50508183035b9392505050565b600081836116ea5760405162461bcd60e51b81526004016103c49190611f36565b5060008385816116f657fe5b0495945050505050565b6060611755826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661178f9092919063ffffffff16565b80519091501561159a57808060200190518101906117739190611a65565b61159a5760405162461bcd60e51b81526004016103c490612222565b606061179e84846000856117a6565b949350505050565b6060824710156117c85760405162461bcd60e51b81526004016103c4906120f8565b6117d18561185c565b6117ed5760405162461bcd60e51b81526004016103c4906121eb565b60006060866001600160a01b0316858760405161180a9190611e11565b60006040518083038185875af1925050503d8060008114611847576040519150601f19603f3d011682016040523d82523d6000602084013e61184c565b606091505b5091509150610b0b828286611862565b3b151590565b606083156118715750816116c2565b8251156118815782518084602001fd5b8160405162461bcd60e51b81526004016103c49190611f36565b604080518082019091526000808252602082015290565b60408051808201909152600081526060602082015290565b6040805160c081018252600080825260606020830152909182019081526020016000815260006020820181905260409091015290565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b600060208284031215611939578081fd5b81356111c18161256c565b60008060008060008060c0878903121561195c578182fd5b86356119678161256c565b955060208701356119778161256c565b945060408701356119878161256c565b959894975094956060810135955060808101359460a0909101359350915050565b600080604083850312156119ba578182fd5b82356119c58161256c565b915060208301356119d58161256c565b809150509250929050565b600080600080600060a086880312156119f7578081fd5b8535611a028161256c565b94506020860135611a128161256c565b9350604086013592506060860135611a298161256c565b949793965091946080013592915050565b60008060408385031215611a4c578182fd5b8235611a578161256c565b946020939093013593505050565b600060208284031215611a76578081fd5b815180151581146111c1578182fd5b60006101008284031215611a97578081fd5b50919050565b600060208284031215611aae578081fd5b5051919050565b60008060408385031215611ac7578182fd5b8235915060208301356119d58161256c565b600080600080600080600060e0888a031215611af3578485fd5b873596506020880135611b058161256c565b95506040880135611b158161256c565b94506060880135611b258161256c565b9699959850939660808101359560a0820135955060c0909101359350915050565b600080600080600060a08688031215611b5d578283fd5b853594506020860135611b6f8161256c565b93506040860135611b7f8161256c565b9250606086013567ffffffffffffffff811115611b9a578182fd5b860160808189031215611a29578182fd5b60008060008060608587031215611bc0578182fd5b84359350602085013567ffffffffffffffff80821115611bde578384fd5b818701915087601f830112611bf1578384fd5b813581811115611bff578485fd5b886020828501011115611c10578485fd5b95986020929092019750949560400135945092505050565b60008060408385031215611c3a578182fd5b505080516020909101519092909150565b600060018060a01b03825116835260208201516040602085015261179e6040850182611d3b565b6001600160a01b03169052565b6000815180845260208085018081965082840281019150828601855b85811015611d28578284038952815160c0611cb7868351611c72565b868201518188880152611ccc82880182611d3b565b915050604080830151611ce182890182611d75565b5050606080830151611cf582890182611d67565b50506080828101519087015260a09182015191611d1481880184611d35565b509986019994505090840190600101611c9b565b5091979650505050505050565b15159052565b60008151808452611d53816020860160208601612495565b601f01601f19169290920160200192915050565b60048110611d7157fe5b9052565b60028110611d7157fe5b8051608080845281519084018190526000916020919082019060a08087019190848202880101855b82811015611dd557609f19898303018452611dc3828651611c4b565b94860194938601939150600101611da7565b5084870151935087810385890152611ded8185611c7f565b94505050505060408301516040850152606083015160608501528091505092915050565b60008251611e23818460208701612495565b9190910192915050565b60007f47656c61746f537461746566756c436f6e646974696f6e735374616e6461726482527f2e5f67657449644f664e6578745461736b496e4379636c65000000000000000060208301528251611e8b816038850160208701612495565b9190910160380192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039586168152938516602085015260408401929092529092166060820152608081019190915260a00190565b6001600160a01b03929092168252602082015260400190565b6000602082526111c16020830184611d3b565b600060408252611f5c6040830185611d3b565b905082151560208301529392505050565b6001600160a01b038a8116825289811660208301526040820189905260608201889052868116608083015260a08201869052841660c082015261012060e08201819052600090611fbf83820186611d3b565b9150508215156101008301529a9950505050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090610b0b90830184611d3b565b60208082526042908201527f47656c61746f537461746566756c436f6e646974696f6e735374616e6461726460408201527f2e5f67657449644f664e6578745461736b496e4379636c653a756e646566696e606082015261195960f21b608082015260a00190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526019908201527f756e70726f7669646546756e64733a3a20526576657274656400000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b600060a082016122d3838851611c72565b6020808801516122e582860182611c72565b5060a0604085015281875180845260c08601915060c08382028701019350828901855b828110156123365760bf19888703018452612324868351611d7f565b95509284019290840190600101612308565b50505050506060830194909452506080015292915050565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b9687526001600160a01b0395861660208801529385166040870152919093166060850152608084019290925260a083019190915260c082015260e00190565b9182521515602082015260400190565b6000808335601e198436030181126123db578283fd5b83018035915067ffffffffffffffff8211156123f5578283fd5b602090810192508102360382131561240c57600080fd5b9250929050565b6000808335601e19843603018112612429578283fd5b83018035915067ffffffffffffffff821115612443578283fd5b60200191503681900382131561240c57600080fd5b6000823560be19833603018112611e23578182fd5b6000808585111561247c578182fd5b83861115612488578182fd5b5050820193919092039150565b60005b838110156124b0578181015183820152602001612498565b83811115610e675750506000910152565b60e01c90565b600060443d10156124d757610ee0565b600481823e6308c379a06124eb82516124c1565b146124f557610ee0565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156125255750505050610ee0565b8284019250825191508082111561253f5750505050610ee0565b503d8301602082840101111561255757505050610ee0565b601f01601f1916810160200160405291505090565b6001600160a01b038116811461258157600080fd5b5056fe47656c61746f4b7279737473616c3a20496e73756666696369656e7420616c6c6f77616e636547656c61746f4b7279737473616c3a2054696d65506173736564427574457870656374656452657475726e546f6f4c6f7747656c61746f4b7279737473616c3a20496e73756666696369656e742062616c616e6365a264697066735822122045dad6da66748d1ec7570cdc3889645f66c9ad6486d6a7b6cde53b4b444c951b64736f6c63430007000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkTimeAndReturn(uint256,address,address,address,uint256,uint256,uint256)": {
        "details": "Abi encode these parameter inputs. Use a placeholder for _taskReceiptId.",
        "params": {
          "_taskReceiptId": "Will be stripped from encoded data and replaced by  the value passed in from GelatoCore."
        }
      },
      "execPayload(uint256,address,address,((address,bytes)[],(address,bytes,uint8,uint8,uint256,bool)[],uint256,uint256),uint256)": {
        "details": "Called by GelatoCore at execution time"
      },
      "getConditionData(address,address,address,uint256,uint256,uint256)": {
        "details": "use this function to encode the data off-chain for the condition data field"
      },
      "ok(uint256,bytes,uint256)": {
        "details": "Called by GelatoCore at execution time",
        "params": {
          "_conditionData": "The encoded data from getConditionData()"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 312,
        "contract": "contracts/gelato/GelatoKrystal.sol:GelatoKrystal",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2132,
        "contract": "contracts/gelato/GelatoKrystal.sol:GelatoKrystal",
        "label": "refTime",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2138,
        "contract": "contracts/gelato/GelatoKrystal.sol:GelatoKrystal",
        "label": "totalToSpend",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2153,
        "contract": "contracts/gelato/GelatoKrystal.sol:GelatoKrystal",
        "label": "platformWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
