{
  "address": "0x301E130DAA16B2F8FAeB21E1a328EAB0d606AC12",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IKyberProxy",
          "name": "_kyberProxy",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_uniRouterV2",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_sushiRouterV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "ClaimedPlatformFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nTradesLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecutionTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct GelatoDCA.ExecOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "name": "LogDCATrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "taskId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "postExecFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creditToken",
          "type": "address"
        }
      ],
      "name": "LogExecSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nTradesLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecutionTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct GelatoDCA.ExecOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "LogTaskCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "remover",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        }
      ],
      "name": "LogTaskRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "LogTaskStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nTradesLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecutionTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct GelatoDCA.ExecOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "LogTaskSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nTradesLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecutionTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct GelatoDCA.ExecOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "LogTaskUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HINT",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nTradesLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecutionTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct GelatoDCA.ExecOrder",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_platformWallets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "claimPlatformFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nTradesLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecutionTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct GelatoDCA.ExecOrder",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "enum GelatoDCA.Dex",
          "name": "_protocol",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isOutToken",
              "type": "bool"
            }
          ],
          "internalType": "struct Fee",
          "name": "_fee",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "_tradePath",
          "type": "address[]"
        }
      ],
      "name": "exec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_src",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_hint",
          "type": "bytes"
        }
      ],
      "name": "getExpectedReturnKyber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tradePath",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        }
      ],
      "name": "getExpectedReturnUniswap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nTradesLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecutionTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct GelatoDCA.ExecOrder",
          "name": "_order",
          "type": "tuple"
        }
      ],
      "name": "getMinReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum GelatoDCA.Dex",
          "name": "_dex",
          "type": "uint8"
        }
      ],
      "name": "getProtocolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_blob",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_taskId",
          "type": "uint256"
        }
      ],
      "name": "hashTask",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outToken",
          "type": "address"
        }
      ],
      "name": "isSwapPossible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPossible",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nTradesLeft",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastExecutionTime",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct GelatoDCA.ExecOrder",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isTaskSubmitted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kyberProxy",
      "outputs": [
        {
          "internalType": "contract IKyberProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "platformWalletFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numTrades",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct GelatoDCA.SubmitOrder",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_isSubmitAndExec",
          "type": "bool"
        }
      ],
      "name": "submit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerTrade",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numTrades",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "platformWallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "platformFeeBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct GelatoDCA.SubmitOrder",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "enum GelatoDCA.Dex",
          "name": "_protocol",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnOrRate",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tradePath",
          "type": "address[]"
        }
      ],
      "name": "submitAndExec",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiRouterV2",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "taskOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouterV2",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "verifyTask",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1a23e81b0dd1d1301ef8681bfa1acc83c4553e1507591eb142cae7a227bca42e",
  "receipt": {
    "to": null,
    "from": "0xAabB54394E8dd61Dd70897E9c80be8de7C64A895",
    "contractAddress": "0x301E130DAA16B2F8FAeB21E1a328EAB0d606AC12",
    "transactionIndex": 0,
    "gasUsed": "3764778",
    "logsBloom": "0x
    "blockHash": "0x8183e1e8a70b6506c2fc7dacb115aeca8f34fc6e6bd2e30fc5aef2965c100cd8",
    "transactionHash": "0x1a23e81b0dd1d1301ef8681bfa1acc83c4553e1507591eb142cae7a227bca42e",
    "logs": [],
    "blockNumber": 10177840,
    "cumulativeGasUsed": "3764778",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x818E6FECD516Ecc3849DAf6845e3EC868087B755",
    "0x7a250d5630b4cf539739df2c5dacb4c659f2488d",
    "0x7a250d5630b4cf539739df2c5dacb4c659f2488d",
    "0xCc4CcD69D31F9FfDBD3BFfDe49c6aA886DaB98d9"
  ],
  "solcInputHash": "1a094e12deadcf0588ee671c05181a22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKyberProxy\",\"name\":\"_kyberProxy\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_uniRouterV2\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_sushiRouterV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ClaimedPlatformFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nTradesLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GelatoDCA.ExecOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"LogDCATrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"taskId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postExecFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creditToken\",\"type\":\"address\"}],\"name\":\"LogExecSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nTradesLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GelatoDCA.ExecOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"LogTaskCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"LogTaskRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"LogTaskStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nTradesLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GelatoDCA.ExecOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"LogTaskSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nTradesLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct GelatoDCA.ExecOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"LogTaskUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HINT\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nTradesLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"internalType\":\"struct GelatoDCA.ExecOrder\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_platformWallets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimPlatformFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nTradesLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"internalType\":\"struct GelatoDCA.ExecOrder\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enum GelatoDCA.Dex\",\"name\":\"_protocol\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOutToken\",\"type\":\"bool\"}],\"internalType\":\"struct Fee\",\"name\":\"_fee\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"_tradePath\",\"type\":\"address[]\"}],\"name\":\"exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_src\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_hint\",\"type\":\"bytes\"}],\"name\":\"getExpectedReturnKyber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tradePath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"getExpectedReturnUniswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nTradesLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"internalType\":\"struct GelatoDCA.ExecOrder\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"getMinReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum GelatoDCA.Dex\",\"name\":\"_dex\",\"type\":\"uint8\"}],\"name\":\"getProtocolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_blob\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_taskId\",\"type\":\"uint256\"}],\"name\":\"hashTask\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"}],\"name\":\"isSwapPossible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPossible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nTradesLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastExecutionTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"internalType\":\"struct GelatoDCA.ExecOrder\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isTaskSubmitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberProxy\",\"outputs\":[{\"internalType\":\"contract IKyberProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"platformWalletFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTrades\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"internalType\":\"struct GelatoDCA.SubmitOrder\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_isSubmitAndExec\",\"type\":\"bool\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerTrade\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTrades\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"internalType\":\"struct GelatoDCA.SubmitOrder\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"enum GelatoDCA.Dex\",\"name\":\"_protocol\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnOrRate\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tradePath\",\"type\":\"address[]\"}],\"name\":\"submitAndExec\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouterV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"taskOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouterV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"verifyTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoDCA.sol\":\"GelatoDCA\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/gelato_conditions/IGelatoCondition.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(uint256 _taskReceiptId, bytes calldata _conditionData, uint256 _cycleId)\\n        external\\n        view\\n        returns(string memory);\\n}\",\"keccak256\":\"0xd07607af93227ec5f8c2f5401289937b98c298f0d2398c1ba7410f82a6253964\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {IGelatoProviderModule} from \\\"../../gelato_provider_modules/IGelatoProviderModule.sol\\\";\\nimport {IGelatoCondition} from \\\"../../gelato_conditions/IGelatoCondition.sol\\\";\\n\\nstruct Provider {\\n    address addr;  //  if msg.sender == provider => self-Provider\\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\\n}\\n\\nstruct Condition {\\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\\n    bytes data;  // can be bytes32(0) for self-conditional Actions\\n}\\n\\nenum Operation { Call, Delegatecall }\\n\\nenum DataFlow { None, In, Out, InAndOut }\\n\\nstruct Action {\\n    address addr;\\n    bytes data;\\n    Operation operation;\\n    DataFlow dataFlow;\\n    uint256 value;\\n    bool termsOkCheck;\\n}\\n\\nstruct Task {\\n    Condition[] conditions;  // optional\\n    Action[] actions;\\n    uint256 selfProviderGasLimit;  // optional: 0 defaults to gelatoMaxGas\\n    uint256 selfProviderGasPriceCeil;  // optional: 0 defaults to NO_CEIL\\n}\\n\\nstruct TaskReceipt {\\n    uint256 id;\\n    address userProxy;\\n    Provider provider;\\n    uint256 index;\\n    Task[] tasks;\\n    uint256 expiryDate;\\n    uint256 cycleId;  // auto-filled by GelatoCore. 0 for non-cyclic/chained tasks\\n    uint256 submissionsLeft;\\n}\\n\\ninterface IGelatoCore {\\n    event LogTaskSubmitted(\\n        uint256 indexed taskReceiptId,\\n        bytes32 indexed taskReceiptHash,\\n        TaskReceipt taskReceipt\\n    );\\n\\n    event LogExecSuccess(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorSuccessFee,\\n        uint256 sysAdminSuccessFee\\n    );\\n    event LogCanExecFailed(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        string reason\\n    );\\n    event LogExecReverted(\\n        address indexed executor,\\n        uint256 indexed taskReceiptId,\\n        uint256 executorRefund,\\n        string reason\\n    );\\n\\n    event LogTaskCancelled(uint256 indexed taskReceiptId, address indexed cancellor);\\n\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    )\\n        external;\\n\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    )\\n        external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(TaskReceipt calldata _TR, uint256 _gasLimit, uint256 _execTxGasPrice)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR) external pure returns(bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns(uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId) external view returns(bytes32);\\n}\\n\",\"keccak256\":\"0x890ea139bf550691f2b9e65bca4f7c0bcf2eb9b8a4564db8c5b42d2912f8adec\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/gelato_provider_modules/IGelatoProviderModule.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {Action, Task} from \\\"../gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\ninterface IGelatoProviderModule {\\n\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(address _userProxy, address _provider, Task calldata _task)\\n        external\\n        view\\n        returns(string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    )\\n        external\\n        view\\n        returns(bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\",\"keccak256\":\"0x8d08ceddbc4e686d070e916d2bcffc69c5a640b56866bc2cef0256b564eb14dc\",\"license\":\"UNLICENSED\"},\"contracts/GelatoDCA.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {wdiv} from \\\"./vendor/DSMath.sol\\\";\\nimport {\\n    IERC20,\\n    SafeERC20\\n} from \\\"./vendor/openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuard\\n} from \\\"./vendor/openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Utils} from \\\"./vendor/kyber/utils/Utils.sol\\\";\\nimport {IKyberProxy} from \\\"./vendor/kyber/utils/IKyberProxy.sol\\\";\\nimport {\\n    IChainlinkOracle\\n} from \\\"./interfaces/chainlink/IChainlinkOracle.sol\\\";\\nimport {IOracleAggregator} from \\\"./interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {ITaskStorage} from \\\"./interfaces/gelato/ITaskStorage.sol\\\";\\nimport {\\n    IUniswapV2Router02\\n} from \\\"./interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport {_to18Decimals} from \\\"./gelato/functions/FToken.sol\\\";\\nimport {SimpleServiceStandard} from \\\"./gelato/standards/SimpleServiceStandard.sol\\\";\\nimport {_transferEthOrToken} from \\\"./gelato/functions/FPayment.sol\\\";\\nimport {ETH} from \\\"./gelato/constants/CTokens.sol\\\";\\nimport {Fee} from \\\"./gelato/structs/SGelato.sol\\\";\\nimport {IGelato} from \\\"./interfaces/gelato/IGelato.sol\\\";\\n\\ncontract GelatoDCA is SimpleServiceStandard, ReentrancyGuard, Utils {\\n    using SafeERC20 for IERC20;\\n\\n    struct SubmitOrder {\\n        address inToken;\\n        address outToken;\\n        uint256 amountPerTrade;\\n        uint256 numTrades;\\n        uint256 minSlippage;\\n        uint256 maxSlippage;\\n        uint256 delay;\\n        address platformWallet;\\n        uint256 platformFeeBps;\\n    }\\n\\n    struct ExecOrder {\\n        address user;\\n        address inToken;\\n        address outToken;\\n        uint256 amountPerTrade;\\n        uint256 nTradesLeft;\\n        uint256 minSlippage;\\n        uint256 maxSlippage;\\n        uint256 delay;\\n        uint256 lastExecutionTime;\\n        address platformWallet;\\n        uint256 platformFeeBps;\\n    }\\n\\n    enum Dex {KYBER, UNISWAP, SUSHISWAP}\\n\\n    bytes public constant HINT = \\\"\\\";\\n    uint256 internal constant _MAX_AMOUNT = type(uint256).max;\\n\\n    IUniswapV2Router02 public immutable uniRouterV2;\\n    IUniswapV2Router02 public immutable sushiRouterV2;\\n    IKyberProxy public immutable kyberProxy;\\n\\n    mapping(address => mapping(address => uint256)) public platformWalletFees;\\n\\n    event LogTaskSubmitted(uint256 indexed id, ExecOrder order);\\n    event LogTaskCancelled(uint256 indexed id, ExecOrder order);\\n    event LogTaskUpdated(uint256 indexed id, ExecOrder order);\\n    event LogDCATrade(uint256 indexed id, ExecOrder order, uint256 outAmount);\\n    event ClaimedPlatformFees(\\n        address[] wallets,\\n        address[] tokens,\\n        address claimer\\n    );\\n\\n    constructor(\\n        IKyberProxy _kyberProxy,\\n        IUniswapV2Router02 _uniRouterV2,\\n        IUniswapV2Router02 _sushiRouterV2,\\n        address _gelato\\n    ) SimpleServiceStandard(_gelato) {\\n        kyberProxy = _kyberProxy;\\n        uniRouterV2 = _uniRouterV2;\\n        sushiRouterV2 = _sushiRouterV2;\\n    }\\n\\n    function submit(SubmitOrder memory _order, bool _isSubmitAndExec)\\n        public\\n        payable\\n    {\\n        if (_order.inToken == ETH) {\\n            uint256 value =\\n                _isSubmitAndExec\\n                    ? _order.amountPerTrade * (_order.numTrades + 1)\\n                    : _order.amountPerTrade * _order.numTrades;\\n            require(\\n                msg.value == value,\\n                \\\"GelatoDCA.submit: mismatching amount of ETH deposited\\\"\\n            );\\n        }\\n        ExecOrder memory order =\\n            ExecOrder({\\n                user: msg.sender,\\n                inToken: _order.inToken,\\n                outToken: _order.outToken,\\n                amountPerTrade: _order.amountPerTrade,\\n                nTradesLeft: _order.numTrades,\\n                minSlippage: _order.minSlippage,\\n                maxSlippage: _order.maxSlippage,\\n                delay: _order.delay, // solhint-disable-next-line not-rely-on-time\\n                lastExecutionTime: block.timestamp,\\n                platformWallet: _order.platformWallet,\\n                platformFeeBps: _order.platformFeeBps\\n            });\\n\\n        // store order\\n        _storeOrder(order);\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function submitAndExec(\\n        SubmitOrder memory _order,\\n        Dex _protocol,\\n        uint256 _minReturnOrRate,\\n        address[] calldata _tradePath\\n    ) external payable {\\n        require(\\n            _order.numTrades > 1,\\n            \\\"GelatoDCA.submitAndExec: cycle must have 2 or more trades\\\"\\n        );\\n\\n        // 1. Submit future orders\\n        _order.numTrades = _order.numTrades - 1;\\n        submit(_order, true);\\n\\n        // 2. Exec 1st Trade now\\n        if (_order.inToken != ETH) {\\n            IERC20(_order.inToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _order.amountPerTrade\\n            );\\n            IERC20(_order.inToken).safeIncreaseAllowance(\\n                getProtocolAddress(_protocol),\\n                _order.amountPerTrade\\n            );\\n        }\\n\\n        if (_protocol == Dex.KYBER) {\\n            _doKyberTrade(\\n                _order.inToken,\\n                _order.outToken,\\n                _order.amountPerTrade,\\n                _minReturnOrRate,\\n                payable(msg.sender),\\n                payable(_order.platformWallet),\\n                _order.platformFeeBps\\n            );\\n        } else {\\n            _doUniswapTrade(\\n                _protocol == Dex.UNISWAP ? uniRouterV2 : sushiRouterV2,\\n                _tradePath,\\n                _order.amountPerTrade,\\n                _minReturnOrRate,\\n                payable(msg.sender),\\n                payable(_order.platformWallet),\\n                _order.platformFeeBps\\n            );\\n        }\\n    }\\n\\n    function cancel(ExecOrder calldata _order, uint256 _id)\\n        external\\n        nonReentrant\\n    {\\n        _removeTask(abi.encode(_order), _id, msg.sender);\\n        if (_order.inToken == ETH) {\\n            uint256 refundAmount = _order.amountPerTrade * _order.nTradesLeft;\\n            (bool success, ) = _order.user.call{value: refundAmount}(\\\"\\\");\\n            require(success, \\\"GelatoDCA.cancel: Could not refund ETH\\\");\\n        }\\n\\n        emit LogTaskCancelled(_id, _order);\\n    }\\n\\n    function claimPlatformFees(\\n        address[] calldata _platformWallets,\\n        address[] calldata _tokens\\n    ) external nonReentrant {\\n        for (uint256 i = 0; i < _platformWallets.length; i++) {\\n            for (uint256 j = 0; j < _tokens.length; j++) {\\n                uint256 fee =\\n                    platformWalletFees[_platformWallets[i]][_tokens[j]];\\n                if (fee > 1) {\\n                    platformWalletFees[_platformWallets[i]][_tokens[j]] = 1;\\n                    _transferEthOrToken(\\n                        payable(_platformWallets[i]),\\n                        _tokens[j],\\n                        fee - 1\\n                    );\\n                }\\n            }\\n        }\\n        emit ClaimedPlatformFees(_platformWallets, _tokens, msg.sender);\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function exec(\\n        ExecOrder calldata _order,\\n        uint256 _id,\\n        Dex _protocol,\\n        Fee memory _fee,\\n        address[] calldata _tradePath\\n    )\\n        external\\n        gelatofy(\\n            _fee.isOutToken ? _order.outToken : _order.inToken,\\n            _order.user,\\n            abi.encode(_order),\\n            _id,\\n            _fee.amount,\\n            _fee.swapRate\\n        )\\n    {\\n        // task cycle logic\\n        if (_order.nTradesLeft > 1) {\\n            _updateAndSubmitNextTask(_order, _id);\\n        } else {\\n            _removeTask(abi.encode(_order), _id, _order.user);\\n        }\\n\\n        // action exec\\n        uint256 outAmount;\\n        if (_protocol == Dex.KYBER) {\\n            outAmount = _actionKyber(_order, _fee.amount, _fee.isOutToken);\\n        } else {\\n            outAmount = _actionUniOrSushi(\\n                _order,\\n                _protocol,\\n                _tradePath,\\n                _fee.amount,\\n                _fee.isOutToken\\n            );\\n        }\\n\\n        if (_fee.isOutToken) {\\n            _transferEthOrToken(\\n                payable(_order.user),\\n                _order.outToken,\\n                outAmount\\n            );\\n        }\\n\\n        emit LogDCATrade(_id, _order, outAmount);\\n    }\\n\\n    function isTaskSubmitted(ExecOrder calldata _order, uint256 _id)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return verifyTask(abi.encode(_order), _id, _order.user);\\n    }\\n\\n    function getMinReturn(ExecOrder memory _order)\\n        public\\n        view\\n        returns (uint256 minReturn)\\n    {\\n        // 4. Rate Check\\n        (uint256 idealReturn, ) =\\n            IOracleAggregator(IGelato(gelato).getOracleAggregator())\\n                .getExpectedReturnAmount(\\n                _order.amountPerTrade,\\n                _order.inToken,\\n                _order.outToken\\n            );\\n\\n        require(\\n            idealReturn > 0,\\n            \\\"GelatoKrystal.getMinReturn: idealReturn cannot be 0\\\"\\n        );\\n\\n        // check time (reverts if block.timestamp is below execTime)\\n        uint256 timeSinceCanExec =\\n            // solhint-disable-next-line not-rely-on-time\\n            block.timestamp - (_order.lastExecutionTime + _order.delay);\\n\\n        uint256 minSlippageFactor = BPS - _order.minSlippage;\\n        uint256 maxSlippageFactor = BPS - _order.maxSlippage;\\n        uint256 slippage;\\n        if (minSlippageFactor > timeSinceCanExec) {\\n            slippage = minSlippageFactor - timeSinceCanExec;\\n        }\\n\\n        if (maxSlippageFactor > slippage) {\\n            slippage = maxSlippageFactor;\\n        }\\n\\n        minReturn = (idealReturn * slippage) / BPS;\\n    }\\n\\n    function isSwapPossible(address _inToken, address _outToken)\\n        external\\n        view\\n        returns (bool isPossible)\\n    {\\n        (uint256 idealReturn, ) =\\n            IOracleAggregator(IGelato(gelato).getOracleAggregator())\\n                .getExpectedReturnAmount(1e18, _inToken, _outToken);\\n        isPossible = idealReturn == 0 ? false : true;\\n    }\\n\\n    // ############# PRIVATE #############\\n    function _actionKyber(\\n        ExecOrder memory _order,\\n        uint256 _fee,\\n        bool _outTokenFee\\n    ) private returns (uint256 received) {\\n        (uint256 inAmount, uint256 minReturn, address payable receiver) =\\n            _preExec(_order, _fee, _outTokenFee, Dex.KYBER);\\n\\n        received = _doKyberTrade(\\n            _order.inToken,\\n            _order.outToken,\\n            inAmount,\\n            _getKyberRate(inAmount, minReturn, _order.inToken, _order.outToken),\\n            receiver,\\n            payable(_order.platformWallet),\\n            _order.platformFeeBps\\n        );\\n\\n        if (_outTokenFee) {\\n            received = received - _fee;\\n        }\\n    }\\n\\n    function _doKyberTrade(\\n        address _inToken,\\n        address _outToken,\\n        uint256 _inAmount,\\n        uint256 _minRate,\\n        address payable _receiver,\\n        address payable _platformWallet,\\n        uint256 _platformFeeBps\\n    ) private returns (uint256 received) {\\n        uint256 ethToSend = _inToken == ETH ? _inAmount : uint256(0);\\n\\n        received = kyberProxy.tradeWithHintAndFee{value: ethToSend}(\\n            IERC20(_inToken),\\n            _inAmount,\\n            IERC20(_outToken),\\n            _receiver,\\n            _MAX_AMOUNT,\\n            _minRate,\\n            _platformWallet,\\n            _platformFeeBps,\\n            HINT\\n        );\\n    }\\n\\n    function _actionUniOrSushi(\\n        ExecOrder memory _order,\\n        Dex _protocol,\\n        address[] memory _tradePath,\\n        uint256 _fee,\\n        bool _outTokenFee\\n    ) private returns (uint256 received) {\\n        (uint256 inAmount, uint256 minReturn, address payable receiver) =\\n            _preExec(_order, _fee, _outTokenFee, _protocol);\\n\\n        require(\\n            _order.inToken == _tradePath[0] &&\\n                _order.outToken == _tradePath[_tradePath.length - 1],\\n            \\\"GelatoDCA.action: trade path does not match order.\\\"\\n        );\\n\\n        received = _doUniswapTrade(\\n            _protocol == Dex.UNISWAP ? uniRouterV2 : sushiRouterV2,\\n            _tradePath,\\n            inAmount,\\n            minReturn,\\n            receiver,\\n            payable(_order.platformWallet),\\n            _order.platformFeeBps\\n        );\\n\\n        if (_outTokenFee) {\\n            received = received - _fee;\\n        }\\n    }\\n\\n    // @dev fee will always be paid be srcToken\\n    // solhint-disable-next-line function-max-lines\\n    function _doUniswapTrade(\\n        IUniswapV2Router02 _router,\\n        address[] memory _tradePath,\\n        uint256 _inAmount,\\n        uint256 _minReturn,\\n        address payable _receiver,\\n        address payable _platformWallet,\\n        uint256 _platformFeeBps\\n    ) private returns (uint256 received) {\\n        uint256 feeAmount = (_inAmount * _platformFeeBps) / BPS;\\n        uint256 actualSellAmount = _inAmount - feeAmount;\\n        address actualInToken;\\n        address actualOutToken;\\n        {\\n            uint256 tradeLen = _tradePath.length;\\n            actualInToken = _tradePath[0];\\n            actualOutToken = _tradePath[tradeLen - 1];\\n            if (_tradePath[0] == address(ETH)) {\\n                _tradePath[0] = _router.WETH();\\n            }\\n            if (_tradePath[tradeLen - 1] == address(ETH)) {\\n                _tradePath[tradeLen - 1] = _router.WETH();\\n            }\\n\\n            // add platform fee to platform wallet account\\n            _addFeeToPlatform(_platformWallet, actualInToken, feeAmount);\\n        }\\n\\n        uint256[] memory amounts;\\n        if (actualInToken == ETH) {\\n            amounts = _router.swapExactETHForTokens{value: actualSellAmount}(\\n                _minReturn,\\n                _tradePath,\\n                _receiver,\\n                _MAX_AMOUNT\\n            );\\n        } else {\\n            if (actualOutToken == address(ETH)) {\\n                amounts = _router.swapExactTokensForETH(\\n                    actualSellAmount,\\n                    _minReturn,\\n                    _tradePath,\\n                    _receiver,\\n                    _MAX_AMOUNT\\n                );\\n            } else {\\n                amounts = _router.swapExactTokensForTokens(\\n                    actualSellAmount,\\n                    _minReturn,\\n                    _tradePath,\\n                    _receiver,\\n                    _MAX_AMOUNT\\n                );\\n            }\\n        }\\n\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    // solhint-disable function-max-lines\\n    function _preExec(\\n        ExecOrder memory _order,\\n        uint256 _fee,\\n        bool _outTokenFee,\\n        Dex _protocol\\n    )\\n        private\\n        returns (\\n            uint256 inAmount,\\n            uint256 minReturn,\\n            address payable receiver\\n        )\\n    {\\n        if (_outTokenFee) {\\n            receiver = payable(this);\\n            minReturn = getMinReturn(_order) + _fee;\\n            inAmount = _order.amountPerTrade;\\n        } else {\\n            receiver = payable(_order.user);\\n            minReturn = getMinReturn(_order);\\n            inAmount = _order.amountPerTrade - _fee;\\n        }\\n\\n        if (_order.inToken != ETH) {\\n            IERC20(_order.inToken).safeTransferFrom(\\n                _order.user,\\n                address(this),\\n                _order.amountPerTrade\\n            );\\n            IERC20(_order.inToken).safeIncreaseAllowance(\\n                getProtocolAddress(_protocol),\\n                inAmount\\n            );\\n        }\\n    }\\n\\n    function _updateAndSubmitNextTask(ExecOrder memory _order, uint256 _id)\\n        private\\n    {\\n        bytes memory lastOrder = abi.encode(_order);\\n        // update next order\\n        _order.nTradesLeft = _order.nTradesLeft - 1;\\n        // solhint-disable-next-line not-rely-on-time\\n        _order.lastExecutionTime = block.timestamp;\\n\\n        _updateTask(lastOrder, abi.encode(_order), _id, _order.user);\\n        emit LogTaskSubmitted(_id, _order);\\n    }\\n\\n    function _storeOrder(ExecOrder memory _order) private {\\n        uint256 id = _storeTask(abi.encode(_order), _order.user);\\n        emit LogTaskSubmitted(id, _order);\\n    }\\n\\n    function _getKyberRate(\\n        uint256 _amountIn,\\n        uint256 _minReturn,\\n        address _inToken,\\n        address _outToken\\n    ) private view returns (uint256) {\\n        uint256 newAmountIn =\\n            _to18Decimals(\\n                _inToken,\\n                _amountIn,\\n                \\\"GelatoDCA:_getKyberRate: newAmountIn revert\\\"\\n            );\\n        uint256 newMinReturn =\\n            _to18Decimals(\\n                _outToken,\\n                _minReturn,\\n                \\\"GelatoDCA:_getKyberRate: newMinReturn revert\\\"\\n            );\\n        return wdiv(newMinReturn, newAmountIn);\\n    }\\n\\n    function _addFeeToPlatform(\\n        address _wallet,\\n        address _token,\\n        uint256 _amount\\n    ) private {\\n        if (_amount > 0) {\\n            platformWalletFees[_wallet][_token] =\\n                platformWalletFees[_wallet][_token] +\\n                _amount;\\n        }\\n    }\\n\\n    function getProtocolAddress(Dex _dex) public view returns (address) {\\n        if (_dex == Dex.KYBER) return address(kyberProxy);\\n        if (_dex == Dex.UNISWAP) return address(uniRouterV2);\\n        if (_dex == Dex.SUSHISWAP) return address(sushiRouterV2);\\n        revert(\\\"GelatoDCA: getProtocolAddress: Dex not found\\\");\\n    }\\n\\n    function getExpectedReturnKyber(\\n        IERC20 _src,\\n        IERC20 _dest,\\n        uint256 _inAmount,\\n        uint256 _platformFee,\\n        bytes calldata _hint\\n    ) external view returns (uint256 outAmount, uint256 expectedRate) {\\n        try\\n            kyberProxy.getExpectedRateAfterFee(\\n                _src,\\n                _dest,\\n                _inAmount,\\n                _platformFee,\\n                _hint\\n            )\\n        returns (uint256 rate) {\\n            expectedRate = rate;\\n        } catch {\\n            expectedRate = 0;\\n        }\\n        outAmount = calcDestAmount(_src, _dest, _inAmount, expectedRate);\\n    }\\n\\n    function getExpectedReturnUniswap(\\n        IUniswapV2Router02 _router,\\n        uint256 _inAmount,\\n        address[] calldata _tradePath,\\n        uint256 _platformFee\\n    ) external view returns (uint256 outAmount, uint256 expectedRate) {\\n        if (_platformFee >= BPS) return (0, 0);\\n        uint256 srcAmountAfterFee = (_inAmount * (BPS - _platformFee)) / BPS;\\n        if (srcAmountAfterFee == 0) return (0, 0);\\n\\n        try _router.getAmountsOut(srcAmountAfterFee, _tradePath) returns (\\n            uint256[] memory amounts\\n        ) {\\n            outAmount = amounts[_tradePath.length - 1];\\n        } catch {\\n            outAmount = 0;\\n        }\\n        expectedRate = calcRateFromQty(\\n            srcAmountAfterFee,\\n            outAmount,\\n            getDecimals(IERC20(_tradePath[0])),\\n            getDecimals(IERC20(_tradePath[_tradePath.length - 1]))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x04c065d225d97adb231e2e748fe38aa4aa8f58a08708d1cc806c90f43f781ac3\",\"license\":\"UNLICENSED\"},\"contracts/gelato/constants/CGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {IChainlinkOracle} from \\\"../../interfaces/chainlink/IChainlinkOracle.sol\\\";\\n\\nIChainlinkOracle constant GELATO_GAS_PRICE_ORACLE = IChainlinkOracle(\\n    0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C\\n);\\n\\nstring constant OK = \\\"OK\\\";\",\"keccak256\":\"0xd5d18f2b5259a86345d44f5b6d12187a870acd7c5ff3e1f9d57f7c34f40aef6b\",\"license\":\"UNLICENSED\"},\"contracts/gelato/constants/COracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant ORACLE_AGGREGATOR = 0x64f31D46C52bBDe223D863B11dAb9327aB1414E9;\",\"keccak256\":\"0x88a729e9dd2f8943b1a8013e3535aecc41e82febc03d26e61c4a388b283177d9\",\"license\":\"UNLICENSED\"},\"contracts/gelato/constants/CTokens.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nuint256 constant DECIMALS_USD = 8;\\n\\nuint256 constant DECIMALS_USDT = 6;\\n\\nuint256 constant DECIMALS_USDC = 6;\\n\\nuint256 constant DECIMALS_DAI = 18;\\n\\nuint256 constant DECIMALS_BUSD = 18;\\n\\nuint256 constant DECIMALS_SUSD = 18;\\n\\nuint256 constant DECIMALS_TUSD = 18;\\n\\naddress constant USD = 0x7354C81fbCb229187480c4f497F945C6A312d5C3; // Random address\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\naddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\naddress constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\naddress constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\naddress constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\naddress constant BUSD = 0x4Fabb145d64652a948d72533023f6E7A623C7C53;\\n\\naddress constant SUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n\\naddress constant TUSD = 0x0000000000085d4780B73119b644AE5ecd22b376;\\n\\naddress constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n\\naddress constant ADX = 0xADE00C28244d5CE17D72E40330B1c318cD12B7c3;\\n\\naddress constant BAT = 0x0D8775F648430679A709E98d2b0Cb6250d2887EF;\\n\\naddress constant BNB = 0xB8c77482e45F1F44dE1745F52C74426C631bDD52;\\n\\naddress constant BNT = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C;\\n\\naddress constant BZRX = 0x56d811088235F11C8920698a204A5010a788f4b3;\\n\\naddress constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n\\naddress constant CRO = 0xA0b73E1Ff0B80914AB6fe0444E65848C4C34450b;\\n\\naddress constant DMG = 0xEd91879919B71bB6905f23af0A68d231EcF87b14;\\n\\naddress constant ENJ = 0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c;\\n\\naddress constant KNC = 0xdd974D5C2e2928deA5F71b9825b8b646686BD200;\\n\\naddress constant LINK = 0x514910771AF9Ca656af840dff83E8264EcF986CA;\\n\\naddress constant LRC = 0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD;\\n\\naddress constant MANA = 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942;\\n\\naddress constant MKR = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\\n\\naddress constant NMR = 0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671;\\n\\naddress constant REN = 0x408e41876cCCDC0F92210600ef50372656052a38;\\n\\naddress constant REP = 0x221657776846890989a759BA2973e427DfF5C9bB;\\n\\naddress constant SNX = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n\\naddress constant SXP = 0x8CE9137d39326AD0cD6491fb5CC0CbA0e089b6A9;\\n\\naddress constant UNI = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;\\n\\naddress constant WOM = 0xa982B2e19e90b2D9F7948e9C1b65D119F1CE88D6;\\n\\naddress constant YFI = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e;\\n\\naddress constant ZRX = 0xE41d2489571d322189246DaFA5ebDe1F4699F498;\\n\",\"keccak256\":\"0x8d643550ce2ebda528717fcc4fd4085c91116e4ac3ce7c5b59d4854e9aaa8f88\",\"license\":\"UNLICENSED\"},\"contracts/gelato/constants/CUniswap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\naddress constant UNISWAPV2_ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\",\"keccak256\":\"0x1aeb27702933a89c5892427ba081a6125c06c5c80eb2a83ddad14eb30c9620b1\",\"license\":\"UNLICENSED\"},\"contracts/gelato/functions/FGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {GELATO_GAS_PRICE_ORACLE} from \\\"../constants/CGelato.sol\\\";\\nimport {\\n    IChainlinkOracle\\n} from \\\"../../interfaces/chainlink/IChainlinkOracle.sol\\\";\\nimport {ETH} from \\\"../constants/CTokens.sol\\\";\\nimport {mul, wmul} from \\\"../../vendor/DSMath.sol\\\";\\nimport {IOracleAggregator} from \\\"../../interfaces/gelato/IOracleAggregator.sol\\\";\\nimport {ORACLE_AGGREGATOR} from \\\"../constants/COracle.sol\\\";\\nimport {IGelato} from \\\"../../interfaces/gelato/IGelato.sol\\\";\\n\\nfunction _getGelatoGasPrice(address _gasPriceOracle) view returns (uint256) {\\n    return uint256(IChainlinkOracle(_gasPriceOracle).latestAnswer());\\n}\\n\\n// Gelato Oracle price aggregator\\nfunction _getExpectedBuyAmountFromChainlink(\\n    address _buyAddr,\\n    address _sellAddr,\\n    uint256 _sellAmt\\n) view returns (uint256 buyAmt) {\\n    (buyAmt, ) = IOracleAggregator(ORACLE_AGGREGATOR).getExpectedReturnAmount(\\n        _sellAmt,\\n        _sellAddr,\\n        _buyAddr\\n    );\\n}\\n\\n// Gelato Oracle price aggregator\\nfunction _getExpectedReturnAmount(\\n    address _inToken,\\n    address _outToken,\\n    uint256 _amt,\\n    address _gelato\\n) view returns (uint256 buyAmt) {\\n    (buyAmt, ) = IOracleAggregator(IGelato(_gelato).getOracleAggregator())\\n        .getExpectedReturnAmount(_amt, _inToken, _outToken);\\n}\\n\\nfunction _getGelatoFee(\\n    uint256 _gasOverhead,\\n    uint256 _gasStart,\\n    address _payToken,\\n    address _gelato\\n) view returns (uint256 gelatoFee) {\\n    gelatoFee =\\n        (_gasStart - gasleft() + _gasOverhead) *\\n        _getCappedGasPrice(IGelato(_gelato).getGasPriceOracle());\\n\\n    if (_payToken == ETH) return gelatoFee;\\n\\n    // returns purely the ethereum tx fee\\n    (gelatoFee, ) = IOracleAggregator(IGelato(_gelato).getOracleAggregator())\\n        .getExpectedReturnAmount(gelatoFee, ETH, _payToken);\\n}\\n\\nfunction _getCappedGasPrice(address _gasPriceOracle) view returns (uint256) {\\n    uint256 oracleGasPrice = _getGelatoGasPrice(_gasPriceOracle);\\n\\n    // Use tx.gasprice capped by 1.3x Chainlink Oracle\\n    return\\n        tx.gasprice <= ((oracleGasPrice * 130) / 100)\\n            ? tx.gasprice\\n            : ((oracleGasPrice * 130) / 100);\\n}\",\"keccak256\":\"0x151aacebe744dc6d2b309ad630a324fac61317f28c653c1ba65ae369868676bc\",\"license\":\"UNLICENSED\"},\"contracts/gelato/functions/FPayment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {ETH, WETH} from \\\"../constants/CTokens.sol\\\";\\nimport {UNISWAPV2_ROUTER02} from \\\"../constants/CUniswap.sol\\\";\\nimport {\\n    IUniswapV2Router02\\n} from \\\"../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"../../vendor/openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {\\n    IERC20\\n} from \\\"../../vendor/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nfunction _transferEthOrToken(\\n    address payable _to,\\n    address _paymentToken,\\n    uint256 _amt\\n) {\\n    if (_paymentToken == ETH) {\\n        (bool success, ) = _to.call{value: _amt}(\\\"\\\");\\n        require(success, \\\"_transfer: fail\\\");\\n    } else {\\n        SafeERC20.safeTransfer(IERC20(_paymentToken), _to, _amt);\\n    }\\n}\\n\\nfunction _swapTokenToEthTransfer(\\n    address _gelato,\\n    address _creditToken,\\n    uint256 _feeAmount,\\n    uint256 _swapRate\\n) {\\n    address[] memory path = new address[](2);\\n    path[0] = _creditToken;\\n    path[1] = WETH;\\n    SafeERC20.safeIncreaseAllowance(\\n        IERC20(_creditToken),\\n        UNISWAPV2_ROUTER02,\\n        _feeAmount\\n    );\\n    IUniswapV2Router02(UNISWAPV2_ROUTER02).swapExactTokensForETH(\\n        _feeAmount, // amountIn\\n        _swapRate, // amountOutMin\\n        path, // path\\n        _gelato, // receiver\\n        // solhint-disable-next-line not-rely-on-time\\n        block.timestamp // deadline\\n    );\\n}\\n\\nfunction _getBalance(address _token, address _account)\\n    view\\n    returns (uint256 balance)\\n{\\n    return\\n        _token == ETH ? _account.balance : IERC20(_token).balanceOf(_account);\\n}\",\"keccak256\":\"0x64c2d7eb9d18fa25379438fa0c122bc34f569748e29e23bc660098fc03915e57\",\"license\":\"UNLICENSED\"},\"contracts/gelato/functions/FToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    SafeERC20\\n} from \\\"../../vendor/openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {\\n    IERC20\\n} from \\\"../../vendor/openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ETH} from \\\"../constants/CTokens.sol\\\";\\n\\nfunction _to18Decimals(\\n    address _token,\\n    uint256 _amount,\\n    string memory _revertMsg\\n) view returns (uint256) {\\n    if (_token == ETH) return _amount;\\n\\n    try IERC20(_token).decimals() returns (uint8 _decimals) {\\n        return (_amount * (10**18)) / (10**uint256(_decimals));\\n    } catch {\\n        revert(_revertMsg);\\n    }\\n}\",\"keccak256\":\"0xaf293039d32d5716a4176ba9595ae538bb7b798cb5ea3c279f76569c521b79b1\",\"license\":\"UNLICENSED\"},\"contracts/gelato/standards/SimpleServiceStandard.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {TaskStorage} from \\\"./TaskStorage.sol\\\";\\nimport {\\n    _transferEthOrToken,\\n    _swapTokenToEthTransfer\\n} from \\\"../functions/FPayment.sol\\\";\\nimport {_getExpectedReturnAmount} from \\\"../functions/FGelato.sol\\\";\\nimport {ETH} from \\\"../constants/CTokens.sol\\\";\\n\\nabstract contract SimpleServiceStandard is TaskStorage {\\n    address public immutable gelato;\\n\\n    event LogExecSuccess(\\n        uint256 indexed taskId,\\n        address indexed executor,\\n        uint256 postExecFee,\\n        uint256 rate,\\n        address creditToken\\n    );\\n\\n    modifier gelatofy(\\n        address _creditToken,\\n        address _user,\\n        bytes memory _bytes,\\n        uint256 _id,\\n        uint256 _fee,\\n        uint256 _swapRate\\n    ) {\\n        // Check only Gelato is calling\\n        require(\\n            address(gelato) == msg.sender,\\n            \\\"SimpleServiceStandard: Caller is not gelato\\\"\\n        );\\n\\n        // Verify tasks actually exists\\n        require(\\n            verifyTask(_bytes, _id, _user),\\n            \\\"SimpleServiceStandard: invalid task\\\"\\n        );\\n\\n        // _removeTask(_bytes, _id, _user);\\n\\n        // Execute Logic\\n        _;\\n\\n        // Pay Gelato\\n        if (_swapRate == 0)\\n            _transferEthOrToken(payable(gelato), _creditToken, _fee);\\n        else if (\\n            _getExpectedReturnAmount(_creditToken, ETH, _fee, gelato) == 0\\n        ) {\\n            _swapTokenToEthTransfer(gelato, _creditToken, _fee, _swapRate);\\n        }\\n\\n        emit LogExecSuccess(_id, tx.origin, _fee, _swapRate, _creditToken);\\n    }\\n\\n    constructor(address _gelato) {\\n        gelato = _gelato;\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n\\n    function verifyTask(\\n        bytes memory _bytes,\\n        uint256 _id,\\n        address _user\\n    ) public view returns (bool) {\\n        // Check whether owner is valid\\n        return taskOwner[hashTask(_bytes, _id)] == _user;\\n    }\\n}\\n\",\"keccak256\":\"0x32fd7807c63eb6c7afd4396cf9e7aaae9328d7c1beafdf1a377f0ef2e1295070\",\"license\":\"UNLICENSED\"},\"contracts/gelato/standards/TaskStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nabstract contract TaskStorage {\\n    uint256 public taskId;\\n    mapping(bytes32 => address) public taskOwner;\\n\\n    event LogTaskStored(\\n        uint256 indexed id,\\n        address indexed user,\\n        bytes32 indexed taskHash,\\n        bytes payload\\n    );\\n    event LogTaskRemoved(address indexed remover, bytes32 indexed taskHash);\\n\\n    function hashTask(bytes memory _blob, uint256 _taskId)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(_blob, _taskId));\\n    }\\n\\n    function _storeTask(bytes memory _blob, address _owner)\\n        internal\\n        returns (uint256 newTaskId)\\n    {\\n        newTaskId = ++taskId;\\n\\n        bytes32 taskHash = hashTask(_blob, taskId);\\n        taskOwner[taskHash] = _owner;\\n\\n        emit LogTaskStored(taskId, _owner, taskHash, _blob);\\n    }\\n\\n    function _removeTask(\\n        bytes memory _blob,\\n        uint256 _taskId,\\n        address _owner\\n    ) internal {\\n        // Only address which created task can delete it\\n        bytes32 taskHash = hashTask(_blob, _taskId);\\n        require(\\n            _owner == taskOwner[taskHash],\\n            \\\"Task Storage: Only Owner can remove tasks\\\"\\n        );\\n\\n        // delete task\\n        delete taskOwner[taskHash];\\n        emit LogTaskRemoved(msg.sender, taskHash);\\n    }\\n\\n    function _updateTask(\\n        bytes memory _bytesBlob,\\n        bytes memory _newBytesBlob,\\n        uint256 _taskId,\\n        address _owner\\n    ) internal {\\n        _removeTask(_bytesBlob, _taskId, _owner);\\n        bytes32 taskHash = hashTask(_newBytesBlob, _taskId);\\n        taskOwner[taskHash] = _owner;\\n\\n        emit LogTaskStored(_taskId, _owner, taskHash, _bytesBlob);\\n    }\\n}\\n\",\"keccak256\":\"0xcf9f2102ecb940a636e6428e4d596de487fdeba8670ab528d7a6a3098c7f6266\",\"license\":\"UNLICENSED\"},\"contracts/gelato/structs/SGelato.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nstruct Fee {\\n    uint256 amount;\\n    uint256 swapRate;\\n    bool isOutToken;\\n}\",\"keccak256\":\"0x487d6c429e180c92e81dda7722a0001c23143d27f5509130c2ed72a842df812c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/chainlink/IChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface IChainlinkOracle {\\n    function latestAnswer() external view returns (int256);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x2a5727ad926000c1bb2782008b5b37cbcc5ff472cd391c4844808e1cf3160131\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/diamond/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n}\",\"keccak256\":\"0xda02e6ca335a9993b6ccb76c031985a17224b41eca9260a0f5d2a78c36810f90\",\"license\":\"MIT\"},\"contracts/interfaces/diamond/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n}\",\"keccak256\":\"0x51d50364a7cd7bb42f35f27541c8c42a8f0b5c1c9559da178bba2dcf040ef28b\",\"license\":\"MIT\"},\"contracts/interfaces/gelato/IGelato.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\nimport {IDiamondCut} from \\\"../diamond/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../diamond/IDiamondLoupe.sol\\\";\\nimport {\\n    TaskReceipt\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\nimport {IGelatoV1} from \\\"./IGelatoV1.sol\\\";\\n\\n// solhint-disable ordering\\n\\n/// @dev includes the interfaces of all facets\\ninterface IGelato {\\n    // ########## Diamond Cut Facet #########\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    // ########## DiamondLoupeFacet #########\\n    function facets()\\n        external\\n        view\\n        returns (IDiamondLoupe.Facet[] memory facets_);\\n\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    function facetAddress(bytes4 _functionSelector)\\n        external\\n        view\\n        returns (address facetAddress_);\\n\\n    function supportsInterface(bytes4 _interfaceId)\\n        external\\n        view\\n        returns (bool);\\n\\n    // ########## Ownership Facet #########\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function transferOwnership(address _newOwner) external;\\n\\n    function owner() external view returns (address owner_);\\n\\n    // ########## AddressFacet #########\\n    event LogSetOracleAggregator(address indexed oracleAggregator);\\n    event LogSetGasPriceOracle(address indexed gasPriceOracle);\\n\\n    function setOracleAggregator(address _oracleAggregator)\\n        external\\n        returns (address);\\n\\n    function setGasPriceOracle(address _gasPriceOracle)\\n        external\\n        returns (address);\\n\\n    function getOracleAggregator() external view returns (address);\\n\\n    function getGasPriceOracle() external view returns (address);\\n\\n    // ########## ConcurrentCanExecFacet #########\\n    enum SlotStatus {Open, Closing, Closed}\\n\\n    function setSlotLength(uint256 _slotLength) external;\\n\\n    function slotLength() external view returns (uint256);\\n\\n    function concurrentCanExec(uint256 _buffer) external view returns (bool);\\n\\n    function getCurrentExecutorIndex()\\n        external\\n        view\\n        returns (uint256 executorIndex, uint256 remainingBlocksInSlot);\\n\\n    function currentExecutor()\\n        external\\n        view\\n        returns (\\n            address executor,\\n            uint256 executorIndex,\\n            uint256 remainingBlocksInSlot\\n        );\\n\\n    function mySlotStatus(uint256 _buffer) external view returns (SlotStatus);\\n\\n    function calcExecutorIndex(\\n        uint256 _currentBlock,\\n        uint256 _blocksPerSlot,\\n        uint256 _numberOfExecutors\\n    )\\n        external\\n        pure\\n        returns (uint256 executorIndex, uint256 remainingBlocksInSlot);\\n\\n    // ########## ExecFacet #########\\n    event LogExecSuccess(\\n        address indexed executor,\\n        address indexed service,\\n        bool indexed wasExecutorPaid\\n    );\\n\\n    event LogSetGasMargin(uint256 oldGasMargin, uint256 newGasMargin);\\n\\n    function addExecutors(address[] calldata _executors) external;\\n\\n    function removeExecutors(address[] calldata _executors) external;\\n\\n    function setGasMargin(uint256 _gasMargin) external;\\n\\n    function exec(\\n        address _service,\\n        bytes calldata _data,\\n        address _creditToken\\n    ) external;\\n\\n    function estimateExecGasDebit(\\n        address _service,\\n        bytes calldata _data,\\n        address _creditToken\\n    ) external returns (uint256 gasDebitInETH, uint256 gasDebitInCreditToken);\\n\\n    function canExec(address _executor) external view returns (bool);\\n\\n    function isExecutor(address _executor) external view returns (bool);\\n\\n    function executors() external view returns (address[] memory);\\n\\n    function numberOfExecutors() external view returns (uint256);\\n\\n    function gasMargin() external view returns (uint256);\\n\\n    // ########## GelatoV1Facet #########\\n    struct Response {\\n        uint256 taskReceiptId;\\n        uint256 taskGasLimit;\\n        string response;\\n    }\\n\\n    function stakeExecutor(IGelatoV1 _gelatoCore) external payable;\\n\\n    function unstakeExecutor(IGelatoV1 _gelatoCore, address payable _to)\\n        external;\\n\\n    function multiReassignProviders(\\n        IGelatoV1 _gelatoCore,\\n        address[] calldata _providers,\\n        address _newExecutor\\n    ) external;\\n\\n    function providerRefund(\\n        IGelatoV1 _gelatoCore,\\n        address _provider,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawExcessExecutorStake(\\n        IGelatoV1 _gelatoCore,\\n        uint256 _withdrawAmount,\\n        address payable _to\\n    ) external;\\n\\n    function v1ConcurrentMultiCanExec(\\n        address _gelatoCore,\\n        TaskReceipt[] calldata _taskReceipts,\\n        uint256 _gelatoGasPrice,\\n        uint256 _buffer\\n    )\\n        external\\n        view\\n        returns (\\n            bool canExecRes,\\n            uint256 blockNumber,\\n            Response[] memory responses\\n        );\\n\\n    function v1MultiCanExec(\\n        address _gelatoCore,\\n        TaskReceipt[] calldata _taskReceipts,\\n        uint256 _gelatoGasPrice\\n    ) external view returns (uint256 blockNumber, Response[] memory responses);\\n\\n    function getGasLimit(\\n        TaskReceipt calldata _taskReceipt,\\n        uint256 _gelatoMaxGas\\n    ) external pure returns (uint256);\\n}\",\"keccak256\":\"0x6c93a911bcf308b65dce9d3576e7b149d79120f12dc0a8265cd118f837bbfd53\",\"license\":\"MIT\"},\"contracts/interfaces/gelato/IGelatoV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable\\npragma solidity >=0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport {\\n    Action,\\n    Provider,\\n    Task,\\n    DataFlow,\\n    TaskReceipt\\n} from \\\"@gelatonetwork/core/contracts/gelato_core/interfaces/IGelatoCore.sol\\\";\\n\\n// TaskSpec - Will be whitelised by providers and selected by users\\nstruct TaskSpec {\\n    IGelatoCondition[] conditions; // Address: optional AddressZero for self-conditional actions\\n    Action[] actions;\\n    uint256 gasPriceCeil;\\n}\\n\\ninterface IGelatoV1 {\\n    /// @notice API to query whether Task can be submitted successfully.\\n    /// @dev In submitTask the msg.sender must be the same as _userProxy here.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _userProxy The userProxy from which the task will be submitted.\\n    /// @param _task Selected provider, conditions, actions, expiry date of the task\\n    function canSubmitTask(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    ) external view returns (string memory);\\n\\n    /// @notice API to submit a single Task.\\n    /// @dev You can let users submit multiple tasks at once by batching calls to this.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task A Gelato Task object: provider, conditions, actions.\\n    /// @param _expiryDate From then on the task cannot be executed. 0 for infinity.\\n    function submitTask(\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _expiryDate\\n    ) external;\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _cycles How many full cycles will be submitted\\n    function submitTaskCycle(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _cycles\\n    ) external;\\n\\n    /// @notice A Gelato Task Cycle consists of 1 or more Tasks that automatically submit\\n    ///  the next one, after they have been executed.\\n    /// @dev CAUTION: _sumOfRequestedTaskSubmits does not mean the number of cycles.\\n    /// @dev If _sumOfRequestedTaskSubmits = 1 && _tasks.length = 2, only the first task\\n    ///  would be submitted, but not the second\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _tasks This can be a single task or a sequence of tasks.\\n    /// @param _expiryDate  After this no task of the sequence can be executed any more.\\n    /// @param _sumOfRequestedTaskSubmits The TOTAL number of Task auto-submits\\n    ///  that should have occured once the cycle is complete:\\n    ///  _sumOfRequestedTaskSubmits = 0 => One Task will resubmit the next Task infinitly\\n    ///  _sumOfRequestedTaskSubmits = 1 => One Task will resubmit no other task\\n    ///  _sumOfRequestedTaskSubmits = 2 => One Task will resubmit 1 other task\\n    ///  ...\\n    function submitTaskChain(\\n        Provider calldata _provider,\\n        Task[] calldata _tasks,\\n        uint256 _expiryDate,\\n        uint256 _sumOfRequestedTaskSubmits\\n    ) external;\\n\\n    // ================  Exec Suite =========================\\n    /// @notice Off-chain API for executors to check, if a TaskReceipt is executable\\n    /// @dev GelatoCore checks this during execution, in order to safeguard the Conditions\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @param _gasLimit Task.selfProviderGasLimit is used for SelfProviders. All other\\n    ///  Providers must use gelatoMaxGas. If the _gasLimit is used by an Executor and the\\n    ///  tx reverts, a refund is paid by the Provider and the TaskReceipt is annulated.\\n    /// @param _execTxGasPrice Must be used by Executors. Gas Price fed by gelatoCore's\\n    ///  Gas Price Oracle. Executors can query the current gelatoGasPrice from events.\\n    function canExec(\\n        TaskReceipt calldata _TR,\\n        uint256 _gasLimit,\\n        uint256 _execTxGasPrice\\n    ) external view returns (string memory);\\n\\n    /// @notice Executors call this when Conditions allow it to execute submitted Tasks.\\n    /// @dev Executors get rewarded for successful Execution. The Task remains open until\\n    ///   successfully executed, or when the execution failed, despite of gelatoMaxGas usage.\\n    ///   In the latter case Executors are refunded by the Task Provider.\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function exec(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel task\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _TR TaskReceipt: id, userProxy, Task.\\n    function cancelTask(TaskReceipt calldata _TR) external;\\n\\n    /// @notice Cancel multiple tasks at once\\n    /// @dev Callable only by userProxy or selected provider\\n    /// @param _taskReceipts TaskReceipts: id, userProxy, Task.\\n    function multiCancelTasks(TaskReceipt[] calldata _taskReceipts) external;\\n\\n    /// @notice Compute hash of task receipt\\n    /// @param _TR TaskReceipt, consisting of user task, user proxy address and id\\n    /// @return hash of taskReceipt\\n    function hashTaskReceipt(TaskReceipt calldata _TR)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    // ================  Getters =========================\\n    /// @notice Returns the taskReceiptId of the last TaskReceipt submitted\\n    /// @return currentId currentId, last TaskReceiptId submitted\\n    function currentTaskReceiptId() external view returns (uint256);\\n\\n    /// @notice Returns computed taskReceipt hash, used to check for taskReceipt validity\\n    /// @param _taskReceiptId Id of taskReceipt emitted in submission event\\n    /// @return hash of taskReceipt\\n    function taskReceiptHash(uint256 _taskReceiptId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /// @notice Stake on Gelato to become a whitelisted executor\\n    /// @dev Msg.value has to be >= minExecutorStake\\n    function stakeExecutor() external payable;\\n\\n    /// @notice Unstake on Gelato to become de-whitelisted and withdraw minExecutorStake\\n    function unstakeExecutor() external;\\n\\n    /// @notice Re-assigns multiple providers to other executors\\n    /// @dev Executors must re-assign all providers before being able to unstake\\n    /// @param _providers List of providers to re-assign\\n    /// @param _newExecutor Address of new executor to assign providers to\\n    function multiReassignProviders(\\n        address[] calldata _providers,\\n        address _newExecutor\\n    ) external;\\n\\n    /// @notice Withdraw excess Execur Stake\\n    /// @dev Can only be called if executor is isExecutorMinStaked\\n    /// @param _withdrawAmount Amount to withdraw\\n    /// @return Amount that was actually withdrawn\\n    function withdrawExcessExecutorStake(uint256 _withdrawAmount)\\n        external\\n        returns (uint256);\\n\\n    // =========== GELATO PROVIDER APIs ==============\\n\\n    /// @notice Validation that checks whether Task Spec is being offered by the selected provider\\n    /// @dev Checked in submitTask(), unless provider == userProxy\\n    /// @param _provider Address of selected provider\\n    /// @param _taskSpec Task Spec\\n    /// @return Expected to return \\\"OK\\\"\\n    function isTaskSpecProvided(address _provider, TaskSpec calldata _taskSpec)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @notice Validates that provider has provider module whitelisted + conducts isProvided check in ProviderModule\\n    /// @dev Checked in submitTask() if provider == userProxy\\n    /// @param _userProxy userProxy passed by GelatoCore during submission and exec\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task Task defined in IGelatoCore\\n    /// @return Expected to return \\\"OK\\\"\\n    function providerModuleChecks(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task\\n    ) external view returns (string memory);\\n\\n    /// @notice Validate if provider module and seleced TaskSpec is whitelisted by provider\\n    /// @dev Combines \\\"isTaskSpecProvided\\\" and providerModuleChecks\\n    /// @param _userProxy userProxy passed by GelatoCore during submission and exec\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task Task defined in IGelatoCore\\n    /// @return res Expected to return \\\"OK\\\"\\n    function isTaskProvided(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task\\n    ) external view returns (string memory res);\\n\\n    /// @notice Validate if selected TaskSpec is whitelisted by provider and that current gelatoGasPrice is below GasPriceCeil\\n    /// @dev If gasPriceCeil is != 0, Task Spec is whitelisted\\n    /// @param _userProxy userProxy passed by GelatoCore during submission and exec\\n    /// @param _provider Gelato Provider object: provider address and module.\\n    /// @param _task Task defined in IGelatoCore\\n    /// @param _gelatoGasPrice Task Receipt defined in IGelatoCore\\n    /// @return res Expected to return \\\"OK\\\"\\n    function providerCanExec(\\n        address _userProxy,\\n        Provider calldata _provider,\\n        Task calldata _task,\\n        uint256 _gelatoGasPrice\\n    ) external view returns (string memory res);\\n\\n    // =========== PROVIDER STATE WRITE APIs ==============\\n    // Provider Funding\\n    /// @notice Deposit ETH as provider on Gelato\\n    /// @param _provider Address of provider who receives ETH deposit\\n    function provideFunds(address _provider) external payable;\\n\\n    /// @notice Withdraw provider funds from gelato\\n    /// @param _withdrawAmount Amount\\n    /// @return amount that will be withdrawn\\n    function unprovideFunds(uint256 _withdrawAmount) external returns (uint256);\\n\\n    /// @notice Assign executor as provider\\n    /// @param _executor Address of new executor\\n    function providerAssignsExecutor(address _executor) external;\\n\\n    /// @notice Assign executor as previous selected executor\\n    /// @param _provider Address of provider whose executor to change\\n    /// @param _newExecutor Address of new executor\\n    function executorAssignsExecutor(address _provider, address _newExecutor)\\n        external;\\n\\n    // (Un-)provide Task Spec\\n\\n    /// @notice Whitelist TaskSpecs (A combination of a Condition, Action(s) and a gasPriceCeil) that users can select from\\n    /// @dev If gasPriceCeil is == 0, Task Spec will be executed at any gas price (no ceil)\\n    /// @param _taskSpecs Task Receipt List defined in IGelatoCore\\n    function provideTaskSpecs(TaskSpec[] calldata _taskSpecs) external;\\n\\n    /// @notice De-whitelist TaskSpecs (A combination of a Condition, Action(s) and a gasPriceCeil) that users can select from\\n    /// @dev If gasPriceCeil was set to NO_CEIL, Input NO_CEIL constant as GasPriceCeil\\n    /// @param _taskSpecs Task Receipt List defined in IGelatoCore\\n    function unprovideTaskSpecs(TaskSpec[] calldata _taskSpecs) external;\\n\\n    /// @notice Update gasPriceCeil of selected Task Spec\\n    /// @param _taskSpecHash Result of hashTaskSpec()\\n    /// @param _gasPriceCeil New gas price ceil for Task Spec\\n    function setTaskSpecGasPriceCeil(\\n        bytes32 _taskSpecHash,\\n        uint256 _gasPriceCeil\\n    ) external;\\n\\n    // Provider Module\\n    /// @notice Whitelist new provider Module(s)\\n    /// @param _modules Addresses of the modules which will be called during providerModuleChecks()\\n    function addProviderModules(IGelatoProviderModule[] calldata _modules)\\n        external;\\n\\n    /// @notice De-Whitelist new provider Module(s)\\n    /// @param _modules Addresses of the modules which will be removed\\n    function removeProviderModules(IGelatoProviderModule[] calldata _modules)\\n        external;\\n\\n    // Batch (un-)provide\\n\\n    /// @notice Whitelist new executor, TaskSpec(s) and Module(s) in one tx\\n    /// @param _executor Address of new executor of provider\\n    /// @param _taskSpecs List of Task Spec which will be whitelisted by provider\\n    /// @param _modules List of module addresses which will be whitelisted by provider\\n    function multiProvide(\\n        address _executor,\\n        TaskSpec[] calldata _taskSpecs,\\n        IGelatoProviderModule[] calldata _modules\\n    ) external payable;\\n\\n    /// @notice De-Whitelist TaskSpec(s), Module(s) and withdraw funds from gelato in one tx\\n    /// @param _withdrawAmount Amount to withdraw from ProviderFunds\\n    /// @param _taskSpecs List of Task Spec which will be de-whitelisted by provider\\n    /// @param _modules List of module addresses which will be de-whitelisted by provider\\n    function multiUnprovide(\\n        uint256 _withdrawAmount,\\n        TaskSpec[] calldata _taskSpecs,\\n        IGelatoProviderModule[] calldata _modules\\n    ) external;\\n\\n    // =========== PROVIDER STATE READ APIs ==============\\n    // Provider Funding\\n\\n    /// @notice Get balance of provider\\n    /// @param _provider Address of provider\\n    /// @return Provider Balance\\n    function providerFunds(address _provider) external view returns (uint256);\\n\\n    /// @notice Get min stake required by all providers for executors to call exec\\n    /// @param _gelatoMaxGas Current gelatoMaxGas\\n    /// @param _gelatoGasPrice Current gelatoGasPrice\\n    /// @return How much provider balance is required for executor to submit exec tx\\n    function minExecProviderFunds(\\n        uint256 _gelatoMaxGas,\\n        uint256 _gelatoGasPrice\\n    ) external view returns (uint256);\\n\\n    /// @notice Check if provider has sufficient funds for executor to call exec\\n    /// @param _provider Address of provider\\n    /// @param _gelatoMaxGas Currentt gelatoMaxGas\\n    /// @param _gelatoGasPrice Current gelatoGasPrice\\n    /// @return Whether provider is liquid (true) or not (false)\\n    function isProviderLiquid(\\n        address _provider,\\n        uint256 _gelatoMaxGas,\\n        uint256 _gelatoGasPrice\\n    ) external view returns (bool);\\n\\n    // Executor Stake\\n\\n    /// @notice Get balance of executor\\n    /// @param _executor Address of executor\\n    /// @return Executor Balance\\n    function executorStake(address _executor) external view returns (uint256);\\n\\n    /// @notice Check if executor has sufficient stake on gelato\\n    /// @param _executor Address of provider\\n    /// @return Whether executor has sufficient stake (true) or not (false)\\n    function isExecutorMinStaked(address _executor)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Get executor of provider\\n    /// @param _provider Address of provider\\n    /// @return Provider's executor\\n    function executorByProvider(address _provider)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Get num. of providers which haved assigned an executor\\n    /// @param _executor Address of executor\\n    /// @return Count of how many providers assigned the executor\\n    function executorProvidersCount(address _executor)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Check if executor has one or more providers assigned\\n    /// @param _executor Address of provider\\n    /// @return Where 1 or more providers have assigned the executor\\n    function isExecutorAssigned(address _executor) external view returns (bool);\\n\\n    // Task Spec and Gas Price Ceil\\n    /// @notice The maximum gas price the transaction will be executed with\\n    /// @param _provider Address of provider\\n    /// @param _taskSpecHash Hash of provider TaskSpec\\n    /// @return Max gas price an executor will execute the transaction with in wei\\n    function taskSpecGasPriceCeil(address _provider, bytes32 _taskSpecHash)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns the hash of the formatted TaskSpec.\\n    /// @dev The action.data field of each Action is stripped before hashing.\\n    /// @param _taskSpec TaskSpec\\n    /// @return keccak256 hash of encoded condition address and Action List\\n    function hashTaskSpec(TaskSpec calldata _taskSpec)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    /// @notice Constant used to specify the highest gas price available in the gelato system\\n    /// @dev Input 0 as gasPriceCeil and it will be assigned to NO_CEIL\\n    /// @return MAX_UINT\\n    function NO_CEIL() external pure returns (uint256);\\n\\n    // Providers' Module Getters\\n\\n    /// @notice Check if inputted module is whitelisted by provider\\n    /// @param _provider Address of provider\\n    /// @param _module Address of module\\n    /// @return true if it is whitelisted\\n    function isModuleProvided(address _provider, IGelatoProviderModule _module)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Get all whitelisted provider modules from a given provider\\n    /// @param _provider Address of provider\\n    /// @return List of whitelisted provider modules\\n    function providerModules(address _provider)\\n        external\\n        view\\n        returns (IGelatoProviderModule[] memory);\\n\\n    // State Writing\\n\\n    /// @notice Assign new gas price oracle\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newOracle Address of new oracle\\n    function setGelatoGasPriceOracle(address _newOracle) external;\\n\\n    /// @notice Assign new gas price oracle\\n    /// @dev Only callable by sysAdmin\\n    /// @param _requestData The encoded payload for the staticcall to the oracle.\\n    function setOracleRequestData(bytes calldata _requestData) external;\\n\\n    /// @notice Assign new maximum gas limit providers can consume in executionWrapper()\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newMaxGas New maximum gas limit\\n    function setGelatoMaxGas(uint256 _newMaxGas) external;\\n\\n    /// @notice Assign new interal gas limit requirement for exec()\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newRequirement New internal gas requirement\\n    function setInternalGasRequirement(uint256 _newRequirement) external;\\n\\n    /// @notice Assign new minimum executor stake\\n    /// @dev Only callable by sysAdmin\\n    /// @param _newMin New minimum executor stake\\n    function setMinExecutorStake(uint256 _newMin) external;\\n\\n    /// @notice Assign new success share for executors to receive after successful execution\\n    /// @dev Only callable by sysAdmin\\n    /// @param _percentage New % success share of total gas consumed\\n    function setExecutorSuccessShare(uint256 _percentage) external;\\n\\n    /// @notice Assign new success share for sysAdmin to receive after successful execution\\n    /// @dev Only callable by sysAdmin\\n    /// @param _percentage New % success share of total gas consumed\\n    function setSysAdminSuccessShare(uint256 _percentage) external;\\n\\n    /// @notice Withdraw sysAdmin funds\\n    /// @dev Only callable by sysAdmin\\n    /// @param _amount Amount to withdraw\\n    /// @param _to Address to receive the funds\\n    function withdrawSysAdminFunds(uint256 _amount, address payable _to)\\n        external\\n        returns (uint256);\\n\\n    // State Reading\\n    /// @notice Unaccounted tx overhead that will be refunded to executors\\n    function EXEC_TX_OVERHEAD() external pure returns (uint256);\\n\\n    /// @notice Addess of current Gelato Gas Price Oracle\\n    function gelatoGasPriceOracle() external view returns (address);\\n\\n    /// @notice Getter for oracleRequestData state variable\\n    function oracleRequestData() external view returns (bytes memory);\\n\\n    /// @notice Gas limit an executor has to submit to get refunded even if actions revert\\n    function gelatoMaxGas() external view returns (uint256);\\n\\n    /// @notice Internal gas limit requirements ti ensure executor payout\\n    function internalGasRequirement() external view returns (uint256);\\n\\n    /// @notice Minimum stake required from executors\\n    function minExecutorStake() external view returns (uint256);\\n\\n    /// @notice % Fee executors get as a reward for a successful execution\\n    function executorSuccessShare() external view returns (uint256);\\n\\n    /// @notice Total % Fee executors and sysAdmin collectively get as a reward for a successful execution\\n    /// @dev Saves a state read\\n    function totalSuccessShare() external view returns (uint256);\\n\\n    /// @notice Get total fee providers pay executors for a successful execution\\n    /// @param _gas Gas consumed by transaction\\n    /// @param _gasPrice Current gelato gas price\\n    function executorSuccessFee(uint256 _gas, uint256 _gasPrice)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice % Fee sysAdmin gets as a reward for a successful execution\\n    function sysAdminSuccessShare() external view returns (uint256);\\n\\n    /// @notice Get total fee providers pay sysAdmin for a successful execution\\n    /// @param _gas Gas consumed by transaction\\n    /// @param _gasPrice Current gelato gas price\\n    function sysAdminSuccessFee(uint256 _gas, uint256 _gasPrice)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Get sysAdminds funds\\n    function sysAdminFunds() external view returns (uint256);\\n}\\n\\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\\n/// @notice all the APIs of GelatoConditionsStandard\\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\\ninterface IGelatoCondition {\\n    /// @notice GelatoCore calls this to verify securely the specified Condition securely\\n    /// @dev Be careful only to encode a Task's condition.data as is and not with the\\n    ///  \\\"ok\\\" selector or _taskReceiptId, since those two things are handled by GelatoCore.\\n    /// @param _taskReceiptId This is passed by GelatoCore so we can rely on it as a secure\\n    ///  source of Task identification.\\n    /// @param _conditionData This is the Condition.data field developers must encode their\\n    ///  Condition's specific parameters in.\\n    /// @param _cycleId For Tasks that are executed as part of a cycle.\\n    function ok(\\n        uint256 _taskReceiptId,\\n        bytes calldata _conditionData,\\n        uint256 _cycleId\\n    ) external view returns (string memory);\\n}\\n\\n/// @notice all the APIs and events of GelatoActionsStandard\\n/// @dev all the APIs are implemented inside GelatoActionsStandard\\ninterface IGelatoAction {\\n    /// @notice Providers can use this for pre-execution sanity checks, to prevent reverts.\\n    /// @dev GelatoCore checks this in canExec and passes the parameters.\\n    /// @param _taskReceiptId The id of the task from which all arguments are passed.\\n    /// @param _userProxy The userProxy of the task. Often address(this) for delegatecalls.\\n    /// @param _actionData The encoded payload to be used in the Action.\\n    /// @param _dataFlow The dataFlow of the Action.\\n    /// @param _value A special param for ETH sending Actions. If the Action sends ETH\\n    ///  in its Action function implementation, one should expect msg.value therein to be\\n    ///  equal to _value. So Providers can check in termsOk that a valid ETH value will\\n    ///  be used because they also have access to the same value when encoding the\\n    ///  execPayload on their ProviderModule.\\n    /// @param _cycleId For tasks that are part of a Cycle.\\n    /// @return Returns OK, if Task can be executed safely according to the Provider's\\n    ///  terms laid out in this function implementation.\\n    function termsOk(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        bytes calldata _actionData,\\n        DataFlow _dataFlow,\\n        uint256 _value,\\n        uint256 _cycleId\\n    ) external view returns (string memory);\\n}\\n\\ninterface IGelatoProviderModule {\\n    /// @notice Check if provider agrees to pay for inputted task receipt\\n    /// @dev Enables arbitrary checks by provider\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @return \\\"OK\\\" if provider agrees\\n    function isProvided(\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task\\n    ) external view returns (string memory);\\n\\n    /// @notice Convert action specific payload into proxy specific payload\\n    /// @dev Encoded multiple actions into a multisend\\n    /// @param _taskReceiptId Unique ID of Gelato Task to be executed.\\n    /// @param _userProxy The smart contract account of the user who submitted the Task.\\n    /// @param _provider The account of the Provider who uses the ProviderModule.\\n    /// @param _task Gelato Task to be executed.\\n    /// @param _cycleId For Tasks that form part of a cycle/chain.\\n    /// @return Encoded payload that will be used for low-level .call on user proxy\\n    /// @return checkReturndata if true, fwd returndata from userProxy.call to ProviderModule\\n    function execPayload(\\n        uint256 _taskReceiptId,\\n        address _userProxy,\\n        address _provider,\\n        Task calldata _task,\\n        uint256 _cycleId\\n    ) external view returns (bytes memory, bool checkReturndata);\\n\\n    /// @notice Called by GelatoCore.exec to verifiy that no revert happend on userProxy\\n    /// @dev If a caught revert is detected, this fn should revert with the detected error\\n    /// @param _proxyReturndata Data from GelatoCore._exec.userProxy.call(execPayload)\\n    function execRevertCheck(bytes calldata _proxyReturndata) external pure;\\n}\\n\",\"keccak256\":\"0x25e8028d21d24bc59ced23340e74aff728a0bc766adabc093fb784b70bd32c37\",\"license\":\"MIT\"},\"contracts/interfaces/gelato/IOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev Interface of the Oracle Aggregator Contract\\n */\\ninterface IOracleAggregator {\\n    function getExpectedReturnAmount(\\n        uint256 amount,\\n        address tokenAddressA,\\n        address tokenAddressB\\n    ) external view returns (uint256 returnAmount, uint256 decimals);\\n}\",\"keccak256\":\"0x171750d31607bf9e5963ad3100ba45a1ae996de62c4bbe38b8a7113bce759e2e\",\"license\":\"MIT\"},\"contracts/interfaces/gelato/ITaskStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\ninterface ITaskStorage {\\n    function storeTask(bytes calldata _bytesBlob) external returns (uint256);\\n\\n    function removeTask(bytes32 _taskHash) external;\\n\\n    function taskId() external view returns (uint256);\\n\\n    function taskOwner(bytes32 _taskHash) external view returns (address);\\n}\",\"keccak256\":\"0xe2dac0042ade2016f925e663d5bf29c5fad2ee1a852ff9083d35646ef147a19d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity 0.8.0;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function factory() external pure returns (address);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WETH() external pure returns (address);\\n}\\n\",\"keccak256\":\"0x36a62151194c239faf27fc8d05326f4f01e6d5d58b3e283109ccbfe487bd9f44\",\"license\":\"UNLICENSED\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: AGPL-3.0-or-later\\\"\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.8.0;\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n}\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n}\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n}\\n\\nfunction div(uint256 x, uint256 y) pure returns (uint256 z) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(y > 0, \\\"ds-math-division-by-zero\\\");\\n    z = x / y;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nfunction imin(int256 x, int256 y) pure returns (int256 z) {\\n    return x <= y ? x : y;\\n}\\n\\nfunction imax(int256 x, int256 y) pure returns (int256 z) {\\n    return x >= y ? x : y;\\n}\\n\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**27;\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), WAD / 2) / WAD;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction rmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, y), RAY / 2) / RAY;\\n}\\n\\n//rounds to zero if x*y < WAD / 2\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, WAD), y / 2) / y;\\n}\\n\\n//rounds to zero if x*y < RAY / 2\\nfunction rdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    z = add(mul(x, RAY), y / 2) / y;\\n}\\n\\n// This famous algorithm is called \\\"exponentiation by squaring\\\"\\n// and calculates x^n with x as fixed-point and n as regular unsigned.\\n//\\n// It's O(log n), instead of O(n) for naive repeated multiplication.\\n//\\n// These facts are why it works:\\n//\\n//  If n is even, then x^n = (x^2)^(n/2).\\n//  If n is odd,  then x^n = x * x^(n-1),\\n//   and applying the equation for even x gives\\n//    x^n = x * (x^2)^((n-1) / 2).\\n//\\n//  Also, EVM division is flooring and\\n//    floor[(n-1) / 2] = floor[n / 2].\\n//\\nfunction rpow(uint256 x, uint256 n) pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n        x = rmul(x, x);\\n\\n        if (n % 2 != 0) {\\n            z = rmul(z, x);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f12e2de77dffcce73cb263503c4518a8c61a9171142e5171953bd6af7e45f7\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/vendor/kyber/utils/IKyberProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport {\\n    IERC20\\n} from \\\"../../openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKyberProxy {\\n    function tradeWithHintAndFee(\\n        IERC20 src,\\n        uint256 srcAmount,\\n        IERC20 dest,\\n        address payable destAddress,\\n        uint256 maxDestAmount,\\n        uint256 minConversionRate,\\n        address payable platformWallet,\\n        uint256 platformFeeBps,\\n        bytes calldata hint\\n    ) external payable returns (uint256 destAmount);\\n\\n    function getExpectedRateAfterFee(\\n        IERC20 src,\\n        IERC20 dest,\\n        uint256 srcQty,\\n        uint256 platformFeeBps,\\n        bytes calldata hint\\n    ) external view returns (uint256 expectedRate);\\n}\",\"keccak256\":\"0x1fadab84b8c8c749ec0af2af4d41d78eb58072f7d63e259bf48c8806a08a15c4\",\"license\":\"UNLICENSED\"},\"contracts/vendor/kyber/utils/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.0;\\n\\nimport \\\"../../openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title Kyber utility file\\n * mostly shared constants and rate calculation helpers\\n * inherited by most of kyber contracts.\\n * previous utils implementations are for previous solidity versions.\\n */\\n// solhint-disable private-vars-leading-underscore\\ncontract Utils {\\n    // Declared constants below to be used in tandem with\\n    // getDecimalsConstant(), for gas optimization purposes\\n    // which return decimals from a constant list of popular\\n    // tokens.\\n    IERC20 internal constant ETH_TOKEN_ADDRESS = IERC20(\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\n    );\\n    IERC20 internal constant USDT_TOKEN_ADDRESS = IERC20(\\n        0xdAC17F958D2ee523a2206206994597C13D831ec7\\n    );\\n    IERC20 internal constant DAI_TOKEN_ADDRESS = IERC20(\\n        0x6B175474E89094C44Da98b954EedeAC495271d0F\\n    );\\n    IERC20 internal constant USDC_TOKEN_ADDRESS = IERC20(\\n        0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    );\\n    IERC20 internal constant WBTC_TOKEN_ADDRESS = IERC20(\\n        0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\\n    );\\n    IERC20 internal constant KNC_TOKEN_ADDRESS = IERC20(\\n        0xdd974D5C2e2928deA5F71b9825b8b646686BD200\\n    );\\n    uint256 public constant BPS = 10000; // Basic Price Steps. 1 step = 0.01%\\n    uint256 internal constant PRECISION = (10**18);\\n    uint256 internal constant MAX_QTY = (10**28); // 10B tokens\\n    uint256 internal constant MAX_RATE = (PRECISION * 10**7); // up to 10M tokens per eth\\n    uint256 internal constant MAX_DECIMALS = 18;\\n    uint256 internal constant ETH_DECIMALS = 18;\\n    uint256 internal constant MAX_ALLOWANCE = type(uint).max; // token.approve inifinite\\n\\n    mapping(IERC20 => uint256) internal decimals;\\n\\n    /// @dev Sets the decimals of a token to storage if not already set, and returns\\n    ///      the decimals value of the token. Prefer using this function over\\n    ///      getDecimals(), to avoid forgetting to set decimals in local storage.\\n    /// @param token The token type\\n    /// @return tokenDecimals The decimals of the token\\n    function getSetDecimals(IERC20 token) internal returns (uint256 tokenDecimals) {\\n        tokenDecimals = getDecimalsConstant(token);\\n        if (tokenDecimals > 0) return tokenDecimals;\\n\\n        tokenDecimals = decimals[token];\\n        if (tokenDecimals == 0) {\\n            tokenDecimals = token.decimals();\\n            decimals[token] = tokenDecimals;\\n        }\\n    }\\n\\n    /// @dev Get the balance of a user\\n    /// @param token The token type\\n    /// @param user The user's address\\n    /// @return The balance\\n    function getBalance(IERC20 token, address user) internal view returns (uint256) {\\n        if (token == ETH_TOKEN_ADDRESS) {\\n            return user.balance;\\n        } else {\\n            return token.balanceOf(user);\\n        }\\n    }\\n\\n    /// @dev Get the decimals of a token, read from the constant list, storage,\\n    ///      or from token.decimals(). Prefer using getSetDecimals when possible.\\n    /// @param token The token type\\n    /// @return tokenDecimals The decimals of the token\\n    function getDecimals(IERC20 token) internal view returns (uint256 tokenDecimals) {\\n        // return token decimals if has constant value\\n        tokenDecimals = getDecimalsConstant(token);\\n        if (tokenDecimals > 0) return tokenDecimals;\\n\\n        // handle case where token decimals is not a declared decimal constant\\n        tokenDecimals = decimals[token];\\n        // moreover, very possible that old tokens have decimals 0\\n        // these tokens will just have higher gas fees.\\n        return (tokenDecimals > 0) ? tokenDecimals : token.decimals();\\n    }\\n\\n    function calcDestAmount(\\n        IERC20 src,\\n        IERC20 dest,\\n        uint256 srcAmount,\\n        uint256 rate\\n    ) internal view returns (uint256) {\\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\\n    }\\n\\n    function calcSrcAmount(\\n        IERC20 src,\\n        IERC20 dest,\\n        uint256 destAmount,\\n        uint256 rate\\n    ) internal view returns (uint256) {\\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\\n    }\\n\\n    function calcDstQty(\\n        uint256 srcQty,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals,\\n        uint256 rate\\n    ) internal pure returns (uint256) {\\n        require(srcQty <= MAX_QTY, \\\"srcQty > MAX_QTY\\\");\\n        require(rate <= MAX_RATE, \\\"rate > MAX_RATE\\\");\\n\\n        if (dstDecimals >= srcDecimals) {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \\\"dst - src > MAX_DECIMALS\\\");\\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\\n        } else {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \\\"src - dst > MAX_DECIMALS\\\");\\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\\n        }\\n    }\\n\\n    function calcSrcQty(\\n        uint256 dstQty,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals,\\n        uint256 rate\\n    ) internal pure returns (uint256) {\\n        require(dstQty <= MAX_QTY, \\\"dstQty > MAX_QTY\\\");\\n        require(rate <= MAX_RATE, \\\"rate > MAX_RATE\\\");\\n\\n        //source quantity is rounded up. to avoid dest quantity being too low.\\n        uint256 numerator;\\n        uint256 denominator;\\n        if (srcDecimals >= dstDecimals) {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \\\"src - dst > MAX_DECIMALS\\\");\\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\\n            denominator = rate;\\n        } else {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \\\"dst - src > MAX_DECIMALS\\\");\\n            numerator = (PRECISION * dstQty);\\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\\n        }\\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\\n    }\\n\\n    function calcRateFromQty(\\n        uint256 srcAmount,\\n        uint256 destAmount,\\n        uint256 srcDecimals,\\n        uint256 dstDecimals\\n    ) internal pure returns (uint256) {\\n        require(srcAmount <= MAX_QTY, \\\"srcAmount > MAX_QTY\\\");\\n        require(destAmount <= MAX_QTY, \\\"destAmount > MAX_QTY\\\");\\n\\n        if (dstDecimals >= srcDecimals) {\\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS, \\\"dst - src > MAX_DECIMALS\\\");\\n            return ((destAmount * PRECISION) / ((10**(dstDecimals - srcDecimals)) * srcAmount));\\n        } else {\\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS, \\\"src - dst > MAX_DECIMALS\\\");\\n            return ((destAmount * PRECISION * (10**(srcDecimals - dstDecimals))) / srcAmount);\\n        }\\n    }\\n\\n    /// @dev save storage access by declaring token decimal constants\\n    /// @param token The token type\\n    /// @return token decimals\\n    function getDecimalsConstant(IERC20 token) internal pure returns (uint256) {\\n        if (token == ETH_TOKEN_ADDRESS) {\\n            return ETH_DECIMALS;\\n        } else if (token == USDT_TOKEN_ADDRESS) {\\n            return 6;\\n        } else if (token == DAI_TOKEN_ADDRESS) {\\n            return 18;\\n        } else if (token == USDC_TOKEN_ADDRESS) {\\n            return 6;\\n        } else if (token == WBTC_TOKEN_ADDRESS) {\\n            return 8;\\n        } else if (token == KNC_TOKEN_ADDRESS) {\\n            return 18;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function minOf(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x > y ? y : x;\\n    }\\n}\",\"keccak256\":\"0xfee9ab56b3469e687a49f8a6710bb43901169fbfc52cf15f7387fa508bfa348c\",\"license\":\"UNLICENSED\"},\"contracts/vendor/openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x18a0426b16a87725f53d4e35f50cf2831a1de11e0bf3473089be22424dc88f2d\",\"license\":\"MIT\"},\"contracts/vendor/openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\n    function decimals() external view returns (uint8 digits);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xd78d48e91764787f91a1848ced1e687df9ac7f1d36b48b4baae5064701687d43\",\"license\":\"MIT\"},\"contracts/vendor/openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance =\\n            token.allowance(address(this), spender).sub(\\n                value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n            address(token).functionCall(\\n                data,\\n                \\\"SafeERC20: low-level call failed\\\"\\n            );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd75906c2fd7144a9e2e02b3481edc65e1e8d99a42427c9ab002f95f150e36827\",\"license\":\"MIT\"},\"contracts/vendor/openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) =\\n            target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19b5abb1034b4f8d3457c69549b5c97d6215339c26353a89415c37898d08b68e\",\"license\":\"MIT\"},\"contracts/vendor/openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\",\"keccak256\":\"0x8bd157addad611b605d5b335323976a9330621fe4252e0f2c7221f525be24d64\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200445338038062004453833981016040819052620000359162000069565b6001600160601b0319606091821b8116608052600160025593811b841660e05291821b831660a052901b1660c052620000e9565b600080600080608085870312156200007f578384fd5b84516200008c81620000d0565b60208601519094506200009f81620000d0565b6040860151909350620000b281620000d0565b6060860151909250620000c581620000d0565b939692955090935050565b6001600160a01b0381168114620000e657600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6142bb62000198600039600081816114310152818161145801528181611548015261189e015260008181610a4f01528181610aec015281816115e6015261222d015260008181610a7501528181610b100152818161159701526122530152600081816103f601528181610cc501528181610d2901528181610f9f0152818161119f015281816111e0015261120d01526142bb6000f3fe6080604052600436106101395760003560e01c8063693362e1116100ab578063a7c477971161006f578063a7c4779714610334578063babdadd414610354578063d83db9f914610374578063f0eeed8114610396578063f2459d63146103ab578063f32e786f146103cb57610140565b8063693362e1146102a1578063729d6cb5146102c15780638eb77f38146102e1578063a1efea0f14610301578063a370931e1461032157610140565b8063360e6482116100fd578063360e6482146101f4578063368de62c1461020757806339f99a591461022957806342c956bc1461023e578063573ea5751461026c578063578c56481461028157610140565b8063249d39e91461014557806328bca620146101705780632ed956631461019d5780633322b23d146101bf57806335c7c3cf146101d457610140565b3661014057005b600080fd5b34801561015157600080fd5b5061015a6103eb565b6040516101679190613798565b60405180910390f35b34801561017c57600080fd5b5061019061018b366004612f73565b6103f1565b604051610167919061378d565b3480156101a957600080fd5b506101bd6101b83660046132ac565b610526565b005b3480156101cb57600080fd5b5061015a610690565b3480156101e057600080fd5b506101bd6101ef366004612fab565b610696565b6101bd61020236600461348e565b61092a565b34801561021357600080fd5b5061021c610aea565b60405161016791906136e0565b34801561023557600080fd5b5061021c610b0e565b34801561024a57600080fd5b5061025e610259366004613230565b610b32565b604051610167929190613f60565b34801561027857600080fd5b5061021c610cc3565b34801561028d57600080fd5b5061019061029c3660046132ac565b610ce7565b3480156102ad57600080fd5b5061015a6102bc3660046133b1565b610d24565b3480156102cd57600080fd5b506101906102dc366004613132565b610ef8565b3480156102ed57600080fd5b506101bd6102fc3660046132d8565b610f37565b34801561030d57600080fd5b5061015a61031c3660046130ef565b611288565b6101bd61032f366004613460565b6112bb565b34801561034057600080fd5b5061015a61034f366004612f73565b6113e4565b34801561036057600080fd5b5061021c61036f3660046130d7565b611401565b34801561038057600080fd5b5061038961141c565b60405161016791906137a1565b3480156103a257600080fd5b5061021c61142f565b3480156103b757600080fd5b5061025e6103c636600461318b565b611453565b3480156103d757600080fd5b5061021c6103e6366004613292565b61151c565b61271081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d34ac2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561044d57600080fd5b505afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104859190612f57565b6001600160a01b0316633c772b6c670de0b6b3a764000086866040518463ffffffff1660e01b81526004016104bc93929190613894565b604080518083038186803b1580156104d357600080fd5b505afa1580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050b9190613518565b509050801561051b57600161051e565b60005b949350505050565b6002805414156105515760405162461bcd60e51b815260040161054890613d9e565b60405180910390fd5b600280556040516105809061056a908490602001613e49565b6040516020818303038152906040528233611627565b60008051602061423b83398151915261059f6040840160208501612f3b565b6001600160a01b0316141561064f5760006105c26080840135606085013561413f565b905060006105d36020850185612f3b565b6001600160a01b0316826040516105e9906136dd565b60006040518083038185875af1925050503d8060008114610626576040519150601f19603f3d011682016040523d82523d6000602084013e61062b565b606091505b505090508061064c5760405162461bcd60e51b815260040161054890613dd5565b50505b807f204267667d805fde65d9f15319824508d2f46b26ad1ede2c9f5b27eea79349498360405161067f9190613e49565b60405180910390a250506001600255565b60005481565b6002805414156106b85760405162461bcd60e51b815260040161054890613d9e565b6002805560005b838110156108df5760005b828110156108cc576000600460008888868181106106f857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061070d9190612f3b565b6001600160a01b03166001600160a01b03168152602001908152602001600020600086868581811061074f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107649190612f3b565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905060018111156108b9576001600460008989878181106107b657634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107cb9190612f3b565b6001600160a01b03166001600160a01b03168152602001908152602001600020600087878681811061080d57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108229190612f3b565b6001600160a01b031681526020810191909152604001600020556108b987878581811061085f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108749190612f3b565b86868581811061089457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108a99190612f3b565b6108b460018561415e565b6116bb565b50806108c4816141a1565b9150506106ca565b50806108d7816141a1565b9150506106bf565b507fcbef5ab8ab58a3dba86704ce124241889d80c3a5fe3caaf4286b7e8c709a6c2d848484843360405161091795949392919061374b565b60405180910390a1505060016002555050565b600185606001511161094e5760405162461bcd60e51b815260040161054890613c21565b6001856060015161095f919061415e565b606086015261096f8560016112bb565b84516001600160a01b031660008051602061423b833981519152146109d157604085015185516109ae916001600160a01b039091169033903090611767565b6109d16109ba8561151c565b604087015187516001600160a01b031691906117c5565b60008460028111156109f357634e487b7160e01b600052602160045260246000fd5b1415610a2357610a1d85600001518660200151876040015186338a60e001518b6101000151611870565b50610ae3565b610ae16001856002811115610a4857634e487b7160e01b600052602160045260246000fd5b14610a73577f0000000000000000000000000000000000000000000000000000000000000000610a95565b7f00000000000000000000000000000000000000000000000000000000000000005b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505050604088015160e08901516101008a015188913391611969565b505b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806127108310610b4957506000905080610cb9565b6000612710610b58858261415e565b610b62908961413f565b610b6c919061400b565b905080610b80576000809250925050610cb9565b60405163d06ca61f60e01b81526001600160a01b0389169063d06ca61f90610bb09084908a908a90600401613f11565b60006040518083038186803b158015610bc857600080fd5b505afa925050508015610bfd57506040513d6000823e601f3d908101601f19168201604052610bfa9190810190613014565b60015b610c0a5760009250610c40565b80610c1660018861415e565b81518110610c3457634e487b7160e01b600052603260045260246000fd5b60200260200101519350505b610cb58184610c8389896000818110610c6957634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c7e9190612f3b565b611e47565b610cb08a8a610c9360018261415e565b818110610c6957634e487b7160e01b600052603260045260246000fd5b611ef7565b9150505b9550959350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610d1b83604051602001610cfd9190613e49565b60408051601f19818403018152919052836102dc6020870187612f3b565b90505b92915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d34ac2bc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8057600080fd5b505afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db89190612f57565b6001600160a01b0316633c772b6c8460600151856020015186604001516040518463ffffffff1660e01b8152600401610df393929190613894565b604080518083038186803b158015610e0a57600080fd5b505afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190613518565b50905060008111610e655760405162461bcd60e51b8152600401610548906138b3565b60008360e00151846101000151610e7c9190613ff3565b610e86904261415e565b905060008460a00151612710610e9c919061415e565b905060008560c00151612710610eb2919061415e565b9050600083831115610ecb57610ec8848461415e565b90505b80821115610ed65750805b612710610ee3828761413f565b610eed919061400b565b979650505050505050565b6000816001600160a01b031660016000610f128787611288565b81526020810191909152604001600020546001600160a01b03161490505b9392505050565b8260400151610f5557610f506040870160208801612f3b565b610f65565b610f656060870160408801612f3b565b610f726020880188612f3b565b87604051602001610f839190613e49565b60408051601f19818403018152919052855160208701518991907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610fe55760405162461bcd60e51b815260040161054890613b53565b610ff0848487610ef8565b61100c5760405162461bcd60e51b8152600401610548906139d0565b60018c6080013511156110365761103161102b368e90038e018e6133b1565b8c612021565b611072565b6110728c60405160200161104a9190613e49565b6040516020818303038152906040528c8e600001602081019061106d9190612f3b565b611627565b6000808b600281111561109557634e487b7160e01b600052602160045260246000fd5b14156110c0576110b96110ad368f90038f018f6133b1565b8b5160408d01516120d0565b9050611127565b6111246110d2368f90038f018f6133b1565b8c8b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d600001518e60400151612137565b90505b89604001511561115a5761115a61114160208f018f612f3b565b8e60400160208101906111549190612f3b565b836116bb565b8b7f98c4d21b786de2bd96414c0d1ee463fe5272bfcc8e25b20af58b4fbc7ca88fe28e8360405161118c929190613e58565b60405180910390a250806111ca576111c57f000000000000000000000000000000000000000000000000000000000000000087846116bb565b611234565b6112048660008051602061423b833981519152847f00000000000000000000000000000000000000000000000000000000000000006122a9565b611234576112347f00000000000000000000000000000000000000000000000000000000000000008784846123a4565b326001600160a01b0316837f1b27e91e321907ef1c086ee1c091eaf6f49fec1bf17ca060d04b74424ac3d29f84848a60405161127293929190613f6e565b60405180910390a3505050505050505050505050565b6000828260405160200161129d9291906137b4565b60405160208183030381529060405280519060200120905092915050565b81516001600160a01b031660008051602061423b833981519152141561133d576000816112fb57826060015183604001516112f6919061413f565b61131a565b606083015161130b906001613ff3565b836040015161131a919061413f565b905080341461133b5760405162461bcd60e51b815260040161054890613afe565b505b6000604051806101600160405280336001600160a01b0316815260200184600001516001600160a01b0316815260200184602001516001600160a01b031681526020018460400151815260200184606001518152602001846080015181526020018460a0015181526020018460c0015181526020014281526020018460e001516001600160a01b0316815260200184610100015181525090506113df81612511565b505050565b600460209081526000928352604080842090915290825290205481565b6001602052600090815260409020546001600160a01b031681565b6040518060200160405280600081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663418436bc8989898989896040518763ffffffff1660e01b81526004016114ac969594939291906137d6565b60206040518083038186803b1580156114c457600080fd5b505afa9250505080156114f4575060408051601f3d908101601f191682019092526114f191810190613500565b60015b61150057506000611503565b90505b61150f8888888461257c565b9150965096945050505050565b60008082600281111561153f57634e487b7160e01b600052602160045260246000fd5b141561156c57507f0000000000000000000000000000000000000000000000000000000000000000611622565b600182600281111561158e57634e487b7160e01b600052602160045260246000fd5b14156115bb57507f0000000000000000000000000000000000000000000000000000000000000000611622565b60028260028111156115dd57634e487b7160e01b600052602160045260246000fd5b141561160a57507f0000000000000000000000000000000000000000000000000000000000000000611622565b60405162461bcd60e51b815260040161054890613b9e565b919050565b60006116338484611288565b6000818152600160205260409020549091506001600160a01b0383811691161461166f5760405162461bcd60e51b815260040161054890613d55565b60008181526001602052604080822080546001600160a01b031916905551829133917ff1041a3bd72e4850c477c3f2566e6b04edf9ee16a8ef784e8b8b7727cad4e8ef9190a350505050565b6001600160a01b03821660008051602061423b833981519152141561175c576000836001600160a01b0316826040516116f3906136dd565b60006040518083038185875af1925050503d8060008114611730576040519150601f19603f3d011682016040523d82523d6000602084013e611735565b606091505b50509050806117565760405162461bcd60e51b815260040161054890613ad5565b506113df565b6113df8284836125a3565b6117bf846323b872dd60e01b8585856040516024016117889392919061370e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125c2565b50505050565b600061184f82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b81526004016117f99291906136f4565b60206040518083038186803b15801561181157600080fd5b505afa158015611825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118499190613500565b90612651565b90506117bf8463095ea7b360e01b8584604051602401611788929190613732565b6000806001600160a01b03891660008051602061423b8339815191521461189857600061189a565b865b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ae591d54828b8a8c8a6000198d8c8c604051806020016040528060008152506040518b63ffffffff1660e01b815260040161190a9998979695949392919061382f565b6020604051808303818588803b15801561192357600080fd5b505af1158015611937573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061195c9190613500565b9998505050505050505050565b600080612710611979848961413f565b611983919061400b565b90506000611991828961415e565b895190915060009081908b82826119b857634e487b7160e01b600052603260045260246000fd5b602002602001015192508b6001826119d0919061415e565b815181106119ee57634e487b7160e01b600052603260045260246000fd5b6020026020010151915060008051602061423b8339815191526001600160a01b03168c600081518110611a3157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611afb578c6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8157600080fd5b505afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab99190612f57565b8c600081518110611ada57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60008051602061423b8339815191528c611b1660018461415e565b81518110611b3457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611c07578c6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611b8457600080fd5b505afa158015611b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbc9190612f57565b8c611bc860018461415e565b81518110611be657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b611c12888487612680565b5060606001600160a01b03831660008051602061423b8339815191521415611cc6578c6001600160a01b0316637ff36ab5858c8f8d6000196040518663ffffffff1660e01b8152600401611c699493929190613f2b565b6000604051808303818588803b158015611c8257600080fd5b505af1158015611c96573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611cbf9190810190613014565b9050611e00565b6001600160a01b03821660008051602061423b8339815191521415611d71578c6001600160a01b03166318cbafe5858c8f8d6000196040518663ffffffff1660e01b8152600401611d1b959493929190613f8d565b600060405180830381600087803b158015611d3557600080fd5b505af1158015611d49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cbf9190810190613014565b8c6001600160a01b03166338ed1739858c8f8d6000196040518663ffffffff1660e01b8152600401611da7959493929190613f8d565b600060405180830381600087803b158015611dc157600080fd5b505af1158015611dd5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dfd9190810190613014565b90505b8060018251611e0f919061415e565b81518110611e2d57634e487b7160e01b600052603260045260246000fd5b602002602001015195505050505050979650505050505050565b6000611e52826126e2565b90508015611e5f57611622565b506001600160a01b0381166000908152600360205260409020548061162257816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb757600080fd5b505afa158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef919061353b565b60ff16610d1e565b60006b204fce5e3e25026110000000851115611f255760405162461bcd60e51b815260040161054890613d28565b6b204fce5e3e25026110000000841115611f515760405162461bcd60e51b815260040161054890613e1b565b828210611fc5576012611f64848461415e565b1115611f825760405162461bcd60e51b815260040161054890613934565b84611f8d848461415e565b611f9890600a614071565b611fa2919061413f565b611fb4670de0b6b3a76400008661413f565b611fbe919061400b565b905061051e565b6012611fd1838561415e565b1115611fef5760405162461bcd60e51b815260040161054890613bea565b84611ffa838561415e565b61200590600a614071565b612017670de0b6b3a76400008761413f565b611fb4919061413f565b6000826040516020016120349190613e75565b604051602081830303815290604052905060018360800151612056919061415e565b608084015242610100840152604051612093908290612079908690602001613e75565b6040516020818303038152906040528486600001516127f4565b817fc18ccd2a235858ab972767d33f870018e941cec2e8d615f4fc1e630f6d6ea03f846040516120c39190613e75565b60405180910390a2505050565b6000806000806120e3878787600061287c565b60208a015160408b0151939650919450925061211891856121068187858561293c565b858c61012001518d6101400151611870565b9350841561212d5761212a868561415e565b93505b5050509392505050565b6000806000806121498987878b61287c565b9250925092508660008151811061217057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031689602001516001600160a01b03161480156121e5575086600188516121a6919061415e565b815181106121c457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031689604001516001600160a01b0316145b6122015760405162461bcd60e51b815260040161054890613a59565b612288600189600281111561222657634e487b7160e01b600052602160045260246000fd5b14612251577f0000000000000000000000000000000000000000000000000000000000000000612273565b7f00000000000000000000000000000000000000000000000000000000000000005b888585858e61012001518f6101400151611969565b9350841561229d5761229a868561415e565b93505b50505095945050505050565b6000816001600160a01b031663d34ac2bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e457600080fd5b505afa1580156122f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231c9190612f57565b6001600160a01b0316633c772b6c8487876040518463ffffffff1660e01b815260040161234b93929190613894565b604080518083038186803b15801561236257600080fd5b505afa158015612376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239a9190613518565b5095945050505050565b60408051600280825260608201835260009260208301908036833701905050905083816000815181106123e757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061243d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061247c84737a250d5630b4cf539739df2c5dacb4c659f2488d856117c5565b6040516318cbafe560e01b8152737a250d5630b4cf539739df2c5dacb4c659f2488d906318cbafe5906124bb908690869086908b904290600401613f8d565b600060405180830381600087803b1580156124d557600080fd5b505af11580156124e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae19190810190613014565b600061253e826040516020016125279190613e75565b60408051601f198184030181529190528351612995565b9050807fc18ccd2a235858ab972767d33f870018e941cec2e8d615f4fc1e630f6d6ea03f836040516125709190613e75565b60405180910390a25050565b600061259a8361258b87611e47565b61259487611e47565b85612a2b565b95945050505050565b6113df8363a9059cbb60e01b8484604051602401611788929190613732565b6000612617826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b419092919063ffffffff16565b8051909150156113df578080602001905181019061263591906130bb565b6113df5760405162461bcd60e51b815260040161054890613cde565b60008061265e8385613ff3565b905083811015610d1b5760405162461bcd60e51b81526004016105489061396b565b80156113df576001600160a01b038084166000908152600460209081526040808320938616835292905220546126b7908290613ff3565b6001600160a01b03808516600090815260046020908152604080832093871683529290522055505050565b60006001600160a01b03821660008051602061423b833981519152141561270b57506012611622565b6001600160a01b03821673dac17f958d2ee523a2206206994597c13d831ec7141561273857506006611622565b6001600160a01b038216736b175474e89094c44da98b954eedeac495271d0f141561276557506012611622565b6001600160a01b03821673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48141561279257506006611622565b6001600160a01b038216732260fac5e5542a773aa44fbcfedf7c193bc2c59914156127bf57506008611622565b6001600160a01b03821673dd974d5c2e2928dea5f71b9825b8b646686bd20014156127ec57506012611622565b506000611622565b6127ff848383611627565b600061280b8484611288565b6000818152600160205260409081902080546001600160a01b0319166001600160a01b0386169081179091559051919250829185907ff5357d3629bc09cf03248336fcf9dcacb7c00b58073d98d36ecbdd2cdfc3f76f9061286d908a906137a1565b60405180910390a45050505050565b600080600084156128ab5750308561289388610d24565b61289d9190613ff3565b9150866060015192506128cc565b5085516128b787610d24565b91508587606001516128c9919061415e565b92505b60208701516001600160a01b031660008051602061423b8339815191521461293257865160608801516020890151612911926001600160a01b03909116913090611767565b61293261291d8561151c565b60208901516001600160a01b031690856117c5565b9450945094915050565b60008061296284876040518060600160405280602b815260200161425b602b9139612b50565b9050600061298984876040518060600160405280602c815260200161420f602c9139612b50565b9050610eed8183612c31565b600080600081546129a5906141a1565b919050819055905060006129bb84600054611288565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0388169081179091559154905192935083927ff5357d3629bc09cf03248336fcf9dcacb7c00b58073d98d36ecbdd2cdfc3f76f90612a1c9089906137a1565b60405180910390a45092915050565b60006b204fce5e3e25026110000000851115612a595760405162461bcd60e51b815260040161054890613aab565b612a6e670de0b6b3a76400006298968061413f565b821115612a8d5760405162461bcd60e51b815260040161054890613cb5565b838310612ae6576012612aa0858561415e565b1115612abe5760405162461bcd60e51b815260040161054890613934565b670de0b6b3a7640000612ad1858561415e565b612adc90600a614071565b612017848861413f565b6012612af2848661415e565b1115612b105760405162461bcd60e51b815260040161054890613bea565b612b1a838561415e565b612b2590600a614071565b612b3790670de0b6b3a764000061413f565b611fb4838761413f565b606061051e8484600085612c63565b60006001600160a01b03841660008051602061423b8339815191521415612b78575081610f30565b836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612bb157600080fd5b505afa925050508015612be1575060408051601f3d908101601f19168201909252612bde9181019061353b565b60015b612bff578160405162461bcd60e51b815260040161054891906137a1565b612c0d60ff8216600a614071565b612c1f85670de0b6b3a764000061413f565b612c29919061400b565b915050610f30565b600081612c59612c4985670de0b6b3a7640000612d18565b612c5460028661400b565b612d58565b610d1b919061400b565b606082471015612c855760405162461bcd60e51b815260040161054890613a13565b612c8e85612d86565b612caa5760405162461bcd60e51b815260040161054890613c7e565b600080866001600160a01b03168587604051612cc691906136c1565b60006040518083038185875af1925050503d8060008114612d03576040519150601f19603f3d011682016040523d82523d6000602084013e612d08565b606091505b5091509150610eed828286612d8c565b6000811580612d3c57508282612d2e818361413f565b9250612d3a908361400b565b145b610d1e5760405162461bcd60e51b815260040161054890613906565b600082612d658382613ff3565b9150811015610d1e5760405162461bcd60e51b8152600401610548906139a2565b3b151590565b60608315612d9b575081610f30565b825115612dab5782518084602001fd5b8160405162461bcd60e51b815260040161054891906137a1565b8035611622816141e8565b60008083601f840112612de1578182fd5b50813567ffffffffffffffff811115612df8578182fd5b6020830191508360208083028501011115612e1257600080fd5b9250929050565b600082601f830112612e29578081fd5b813567ffffffffffffffff811115612e4357612e436141d2565b612e56601f8201601f1916602001613fc9565b818152846020838601011115612e6a578283fd5b816020850160208301379081016020019190915292915050565b80356003811061162257600080fd5b60006101608284031215612ea5578081fd5b50919050565b6000610120808385031215612ebe578182fd5b612ec781613fc9565b915050612ed382612dc5565b8152612ee160208301612dc5565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c0820152612f2460e08301612dc5565b60e082015261010080830135818301525092915050565b600060208284031215612f4c578081fd5b8135610d1b816141e8565b600060208284031215612f68578081fd5b8151610d1b816141e8565b60008060408385031215612f85578081fd5b8235612f90816141e8565b91506020830135612fa0816141e8565b809150509250929050565b60008060008060408587031215612fc0578182fd5b843567ffffffffffffffff80821115612fd7578384fd5b612fe388838901612dd0565b90965094506020870135915080821115612ffb578384fd5b5061300887828801612dd0565b95989497509550505050565b60006020808385031215613026578182fd5b825167ffffffffffffffff8082111561303d578384fd5b818501915085601f830112613050578384fd5b815181811115613062576130626141d2565b8381029150613072848301613fc9565b8181528481019084860184860187018a101561308c578788fd5b8795505b838610156130ae578051835260019590950194918601918601613090565b5098975050505050505050565b6000602082840312156130cc578081fd5b8151610d1b81614200565b6000602082840312156130e8578081fd5b5035919050565b60008060408385031215613101578182fd5b823567ffffffffffffffff811115613117578283fd5b61312385828601612e19565b95602094909401359450505050565b600080600060608486031215613146578081fd5b833567ffffffffffffffff81111561315c578182fd5b61316886828701612e19565b935050602084013591506040840135613180816141e8565b809150509250925092565b60008060008060008060a087890312156131a3578384fd5b86356131ae816141e8565b955060208701356131be816141e8565b94506040870135935060608701359250608087013567ffffffffffffffff808211156131e8578384fd5b818901915089601f8301126131fb578384fd5b813581811115613209578485fd5b8a602082850101111561321a578485fd5b6020830194508093505050509295509295509295565b600080600080600060808688031215613247578283fd5b8535613252816141e8565b945060208601359350604086013567ffffffffffffffff811115613274578384fd5b61328088828901612dd0565b96999598509660600135949350505050565b6000602082840312156132a3578081fd5b610d1b82612e84565b60008061018083850312156132bf578182fd5b6132c98484612e93565b94610160939093013593505050565b6000806000806000808688036102208112156132f2578485fd5b6132fc8989612e93565b965061016088013595506133136101808901612e84565b9450606061019f1982011215613327578283fd5b506040516060810167ffffffffffffffff828210818311171561334c5761334c6141d2565b816040526101a08a013583526101c08a013560208401526101e08a0135915061337482614200565b8160408401528295506102008a0135925080831115613391578485fd5b505061339f89828a01612dd0565b979a9699509497509295939492505050565b60006101608083850312156133c4578182fd5b6133cd81613fc9565b90506133d883612dc5565b81526133e660208401612dc5565b60208201526133f760408401612dc5565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120613448818501612dc5565b90820152610140928301359281019290925250919050565b6000806101408385031215613473578182fd5b61347d8484612eab565b9150610120830135612fa081614200565b600080600080600061018086880312156134a6578283fd5b6134b08787612eab565b94506134bf6101208701612e84565b9350610140860135925061016086013567ffffffffffffffff8111156134e3578182fd5b6134ef88828901612dd0565b969995985093965092949392505050565b600060208284031215613511578081fd5b5051919050565b6000806040838503121561352a578182fd5b505080516020909101519092909150565b60006020828403121561354c578081fd5b815160ff81168114610d1b578182fd5b6001600160a01b03169052565b60008284526020808501945082825b858110156135a657813561358b816141e8565b6001600160a01b031687529582019590820190600101613578565b509495945050505050565b6000815180845260208085019450808401835b838110156135a65781516001600160a01b0316875295820195908201906001016135c4565b60008151808452613601816020860160208601614175565b601f01601f19169290920160200192915050565b6136278261362283612dc5565b61355c565b61363360208201612dc5565b613640602084018261355c565b5061364d60408201612dc5565b61365a604084018261355c565b50606081013560608301526080810135608083015260a081013560a083015260c081013560c083015260e081013560e08301526101008082013581840152506101206136a7818301612dc5565b6136b38285018261355c565b505061014090810135910152565b600082516136d3818460208701614175565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006060825261375f606083018789613569565b8281036020840152613772818688613569565b91505060018060a01b03831660408301529695505050505050565b901515815260200190565b90815260200190565b600060208252610d1b60208301846135e9565b6000604082526137c760408301856135e9565b90508260208301529392505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b600061012060018060a01b03808d1684528b6020850152808b166040850152808a1660608501528860808501528760a085015280871660c0850152508460e084015280610100840152613884818401856135e9565b9c9b505050505050505050505050565b9283526001600160a01b03918216602084015216604082015260600190565b60208082526033908201527f47656c61746f4b72797374616c2e6765744d696e52657475726e3a206964656160408201527206c52657475726e2063616e6e6f74206265203606c1b606082015260800190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526018908201527f647374202d20737263203e204d41585f444543494d414c530000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b60208082526023908201527f53696d706c65536572766963655374616e646172643a20696e76616c6964207460408201526261736b60e81b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526032908201527f47656c61746f4443412e616374696f6e3a207472616465207061746820646f6560408201527139903737ba1036b0ba31b41037b93232b91760711b606082015260800190565b60208082526010908201526f737263517479203e204d41585f51545960801b604082015260600190565b6020808252600f908201526e17dd1c985b9cd9995c8e8819985a5b608a1b604082015260600190565b60208082526035908201527f47656c61746f4443412e7375626d69743a206d69736d61746368696e6720616d6040820152741bdd5b9d081bd9881155120819195c1bdcda5d1959605a1b606082015260800190565b6020808252602b908201527f53696d706c65536572766963655374616e646172643a2043616c6c657220697360408201526a206e6f742067656c61746f60a81b606082015260800190565b6020808252602c908201527f47656c61746f4443413a2067657450726f746f636f6c416464726573733a204460408201526b195e081b9bdd08199bdd5b9960a21b606082015260800190565b60208082526018908201527f737263202d20647374203e204d41585f444543494d414c530000000000000000604082015260600190565b60208082526039908201527f47656c61746f4443412e7375626d6974416e64457865633a206379636c65206d60408201527f75737420686176652032206f72206d6f72652074726164657300000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252600f908201526e72617465203e204d41585f5241544560881b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b602080825260139082015272737263416d6f756e74203e204d41585f51545960681b604082015260600190565b60208082526029908201527f5461736b2053746f726167653a204f6e6c79204f776e65722063616e2072656d6040820152686f7665207461736b7360b81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f47656c61746f4443412e63616e63656c3a20436f756c64206e6f7420726566756040820152650dcc8408aa8960d31b606082015260800190565b60208082526014908201527364657374416d6f756e74203e204d41585f51545960601b604082015260600190565b6101608101610d1e8284613615565b6101808101613e678285613615565b826101608301529392505050565b600061016082019050613e8982845161355c565b6020830151613e9b602084018261355c565b506040830151613eae604084018261355c565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151613f008285018261355c565b505061014092830151919092015290565b60008482526040602083015261259a604083018486613569565b600085825260806020830152613f4460808301866135b1565b6001600160a01b03949094166040830152506060015292915050565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b600086825285602083015260a06040830152613fac60a08301866135b1565b6001600160a01b0394909416606083015250608001529392505050565b60405181810167ffffffffffffffff81118282101715613feb57613feb6141d2565b604052919050565b60008219821115614006576140066141bc565b500190565b60008261402657634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161403d5750614068565b81870482111561404f5761404f6141bc565b8086161561405c57918102915b9490941c93800261402e565b94509492505050565b6000610d1b600019848460008261408a57506001610f30565b8161409757506000610f30565b81600181146140ad57600281146140b7576140e4565b6001915050610f30565b60ff8411156140c8576140c86141bc565b6001841b9150848211156140de576140de6141bc565b50610f30565b5060208310610133831016604e8410600b8410161715614117575081810a83811115614112576141126141bc565b610f30565b614124848484600161402b565b808604821115614136576141366141bc565b02949350505050565b6000816000190483118215151615614159576141596141bc565b500290565b600082821015614170576141706141bc565b500390565b60005b83811015614190578181015183820152602001614178565b838111156117bf5750506000910152565b60006000198214156141b5576141b56141bc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146141fd57600080fd5b50565b80151581146141fd57600080fdfe47656c61746f4443413a5f6765744b79626572526174653a206e65774d696e52657475726e20726576657274000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee47656c61746f4443413a5f6765744b79626572526174653a206e6577416d6f756e74496e20726576657274a26469706673582212208f0fa83853c59756510b81712f8434e29e59c942a5c8505615d4d9bc858a0ee064736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106101395760003560e01c8063693362e1116100ab578063a7c477971161006f578063a7c4779714610334578063babdadd414610354578063d83db9f914610374578063f0eeed8114610396578063f2459d63146103ab578063f32e786f146103cb57610140565b8063693362e1146102a1578063729d6cb5146102c15780638eb77f38146102e1578063a1efea0f14610301578063a370931e1461032157610140565b8063360e6482116100fd578063360e6482146101f4578063368de62c1461020757806339f99a591461022957806342c956bc1461023e578063573ea5751461026c578063578c56481461028157610140565b8063249d39e91461014557806328bca620146101705780632ed956631461019d5780633322b23d146101bf57806335c7c3cf146101d457610140565b3661014057005b600080fd5b34801561015157600080fd5b5061015a6103eb565b6040516101679190613798565b60405180910390f35b34801561017c57600080fd5b5061019061018b366004612f73565b6103f1565b604051610167919061378d565b3480156101a957600080fd5b506101bd6101b83660046132ac565b610526565b005b3480156101cb57600080fd5b5061015a610690565b3480156101e057600080fd5b506101bd6101ef366004612fab565b610696565b6101bd61020236600461348e565b61092a565b34801561021357600080fd5b5061021c610aea565b60405161016791906136e0565b34801561023557600080fd5b5061021c610b0e565b34801561024a57600080fd5b5061025e610259366004613230565b610b32565b604051610167929190613f60565b34801561027857600080fd5b5061021c610cc3565b34801561028d57600080fd5b5061019061029c3660046132ac565b610ce7565b3480156102ad57600080fd5b5061015a6102bc3660046133b1565b610d24565b3480156102cd57600080fd5b506101906102dc366004613132565b610ef8565b3480156102ed57600080fd5b506101bd6102fc3660046132d8565b610f37565b34801561030d57600080fd5b5061015a61031c3660046130ef565b611288565b6101bd61032f366004613460565b6112bb565b34801561034057600080fd5b5061015a61034f366004612f73565b6113e4565b34801561036057600080fd5b5061021c61036f3660046130d7565b611401565b34801561038057600080fd5b5061038961141c565b60405161016791906137a1565b3480156103a257600080fd5b5061021c61142f565b3480156103b757600080fd5b5061025e6103c636600461318b565b611453565b3480156103d757600080fd5b5061021c6103e6366004613292565b61151c565b61271081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d34ac2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561044d57600080fd5b505afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104859190612f57565b6001600160a01b0316633c772b6c670de0b6b3a764000086866040518463ffffffff1660e01b81526004016104bc93929190613894565b604080518083038186803b1580156104d357600080fd5b505afa1580156104e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050b9190613518565b509050801561051b57600161051e565b60005b949350505050565b6002805414156105515760405162461bcd60e51b815260040161054890613d9e565b60405180910390fd5b600280556040516105809061056a908490602001613e49565b6040516020818303038152906040528233611627565b60008051602061423b83398151915261059f6040840160208501612f3b565b6001600160a01b0316141561064f5760006105c26080840135606085013561413f565b905060006105d36020850185612f3b565b6001600160a01b0316826040516105e9906136dd565b60006040518083038185875af1925050503d8060008114610626576040519150601f19603f3d011682016040523d82523d6000602084013e61062b565b606091505b505090508061064c5760405162461bcd60e51b815260040161054890613dd5565b50505b807f204267667d805fde65d9f15319824508d2f46b26ad1ede2c9f5b27eea79349498360405161067f9190613e49565b60405180910390a250506001600255565b60005481565b6002805414156106b85760405162461bcd60e51b815260040161054890613d9e565b6002805560005b838110156108df5760005b828110156108cc576000600460008888868181106106f857634e487b7160e01b600052603260045260246000fd5b905060200201602081019061070d9190612f3b565b6001600160a01b03166001600160a01b03168152602001908152602001600020600086868581811061074f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107649190612f3b565b6001600160a01b03166001600160a01b0316815260200190815260200160002054905060018111156108b9576001600460008989878181106107b657634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107cb9190612f3b565b6001600160a01b03166001600160a01b03168152602001908152602001600020600087878681811061080d57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108229190612f3b565b6001600160a01b031681526020810191909152604001600020556108b987878581811061085f57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108749190612f3b565b86868581811061089457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108a99190612f3b565b6108b460018561415e565b6116bb565b50806108c4816141a1565b9150506106ca565b50806108d7816141a1565b9150506106bf565b507fcbef5ab8ab58a3dba86704ce124241889d80c3a5fe3caaf4286b7e8c709a6c2d848484843360405161091795949392919061374b565b60405180910390a1505060016002555050565b600185606001511161094e5760405162461bcd60e51b815260040161054890613c21565b6001856060015161095f919061415e565b606086015261096f8560016112bb565b84516001600160a01b031660008051602061423b833981519152146109d157604085015185516109ae916001600160a01b039091169033903090611767565b6109d16109ba8561151c565b604087015187516001600160a01b031691906117c5565b60008460028111156109f357634e487b7160e01b600052602160045260246000fd5b1415610a2357610a1d85600001518660200151876040015186338a60e001518b6101000151611870565b50610ae3565b610ae16001856002811115610a4857634e487b7160e01b600052602160045260246000fd5b14610a73577f0000000000000000000000000000000000000000000000000000000000000000610a95565b7f00000000000000000000000000000000000000000000000000000000000000005b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505050604088015160e08901516101008a015188913391611969565b505b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806127108310610b4957506000905080610cb9565b6000612710610b58858261415e565b610b62908961413f565b610b6c919061400b565b905080610b80576000809250925050610cb9565b60405163d06ca61f60e01b81526001600160a01b0389169063d06ca61f90610bb09084908a908a90600401613f11565b60006040518083038186803b158015610bc857600080fd5b505afa925050508015610bfd57506040513d6000823e601f3d908101601f19168201604052610bfa9190810190613014565b60015b610c0a5760009250610c40565b80610c1660018861415e565b81518110610c3457634e487b7160e01b600052603260045260246000fd5b60200260200101519350505b610cb58184610c8389896000818110610c6957634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c7e9190612f3b565b611e47565b610cb08a8a610c9360018261415e565b818110610c6957634e487b7160e01b600052603260045260246000fd5b611ef7565b9150505b9550959350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610d1b83604051602001610cfd9190613e49565b60408051601f19818403018152919052836102dc6020870187612f3b565b90505b92915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d34ac2bc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8057600080fd5b505afa158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db89190612f57565b6001600160a01b0316633c772b6c8460600151856020015186604001516040518463ffffffff1660e01b8152600401610df393929190613894565b604080518083038186803b158015610e0a57600080fd5b505afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190613518565b50905060008111610e655760405162461bcd60e51b8152600401610548906138b3565b60008360e00151846101000151610e7c9190613ff3565b610e86904261415e565b905060008460a00151612710610e9c919061415e565b905060008560c00151612710610eb2919061415e565b9050600083831115610ecb57610ec8848461415e565b90505b80821115610ed65750805b612710610ee3828761413f565b610eed919061400b565b979650505050505050565b6000816001600160a01b031660016000610f128787611288565b81526020810191909152604001600020546001600160a01b03161490505b9392505050565b8260400151610f5557610f506040870160208801612f3b565b610f65565b610f656060870160408801612f3b565b610f726020880188612f3b565b87604051602001610f839190613e49565b60408051601f19818403018152919052855160208701518991907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610fe55760405162461bcd60e51b815260040161054890613b53565b610ff0848487610ef8565b61100c5760405162461bcd60e51b8152600401610548906139d0565b60018c6080013511156110365761103161102b368e90038e018e6133b1565b8c612021565b611072565b6110728c60405160200161104a9190613e49565b6040516020818303038152906040528c8e600001602081019061106d9190612f3b565b611627565b6000808b600281111561109557634e487b7160e01b600052602160045260246000fd5b14156110c0576110b96110ad368f90038f018f6133b1565b8b5160408d01516120d0565b9050611127565b6111246110d2368f90038f018f6133b1565b8c8b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d600001518e60400151612137565b90505b89604001511561115a5761115a61114160208f018f612f3b565b8e60400160208101906111549190612f3b565b836116bb565b8b7f98c4d21b786de2bd96414c0d1ee463fe5272bfcc8e25b20af58b4fbc7ca88fe28e8360405161118c929190613e58565b60405180910390a250806111ca576111c57f000000000000000000000000000000000000000000000000000000000000000087846116bb565b611234565b6112048660008051602061423b833981519152847f00000000000000000000000000000000000000000000000000000000000000006122a9565b611234576112347f00000000000000000000000000000000000000000000000000000000000000008784846123a4565b326001600160a01b0316837f1b27e91e321907ef1c086ee1c091eaf6f49fec1bf17ca060d04b74424ac3d29f84848a60405161127293929190613f6e565b60405180910390a3505050505050505050505050565b6000828260405160200161129d9291906137b4565b60405160208183030381529060405280519060200120905092915050565b81516001600160a01b031660008051602061423b833981519152141561133d576000816112fb57826060015183604001516112f6919061413f565b61131a565b606083015161130b906001613ff3565b836040015161131a919061413f565b905080341461133b5760405162461bcd60e51b815260040161054890613afe565b505b6000604051806101600160405280336001600160a01b0316815260200184600001516001600160a01b0316815260200184602001516001600160a01b031681526020018460400151815260200184606001518152602001846080015181526020018460a0015181526020018460c0015181526020014281526020018460e001516001600160a01b0316815260200184610100015181525090506113df81612511565b505050565b600460209081526000928352604080842090915290825290205481565b6001602052600090815260409020546001600160a01b031681565b6040518060200160405280600081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663418436bc8989898989896040518763ffffffff1660e01b81526004016114ac969594939291906137d6565b60206040518083038186803b1580156114c457600080fd5b505afa9250505080156114f4575060408051601f3d908101601f191682019092526114f191810190613500565b60015b61150057506000611503565b90505b61150f8888888461257c565b9150965096945050505050565b60008082600281111561153f57634e487b7160e01b600052602160045260246000fd5b141561156c57507f0000000000000000000000000000000000000000000000000000000000000000611622565b600182600281111561158e57634e487b7160e01b600052602160045260246000fd5b14156115bb57507f0000000000000000000000000000000000000000000000000000000000000000611622565b60028260028111156115dd57634e487b7160e01b600052602160045260246000fd5b141561160a57507f0000000000000000000000000000000000000000000000000000000000000000611622565b60405162461bcd60e51b815260040161054890613b9e565b919050565b60006116338484611288565b6000818152600160205260409020549091506001600160a01b0383811691161461166f5760405162461bcd60e51b815260040161054890613d55565b60008181526001602052604080822080546001600160a01b031916905551829133917ff1041a3bd72e4850c477c3f2566e6b04edf9ee16a8ef784e8b8b7727cad4e8ef9190a350505050565b6001600160a01b03821660008051602061423b833981519152141561175c576000836001600160a01b0316826040516116f3906136dd565b60006040518083038185875af1925050503d8060008114611730576040519150601f19603f3d011682016040523d82523d6000602084013e611735565b606091505b50509050806117565760405162461bcd60e51b815260040161054890613ad5565b506113df565b6113df8284836125a3565b6117bf846323b872dd60e01b8585856040516024016117889392919061370e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526125c2565b50505050565b600061184f82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b81526004016117f99291906136f4565b60206040518083038186803b15801561181157600080fd5b505afa158015611825573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118499190613500565b90612651565b90506117bf8463095ea7b360e01b8584604051602401611788929190613732565b6000806001600160a01b03891660008051602061423b8339815191521461189857600061189a565b865b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ae591d54828b8a8c8a6000198d8c8c604051806020016040528060008152506040518b63ffffffff1660e01b815260040161190a9998979695949392919061382f565b6020604051808303818588803b15801561192357600080fd5b505af1158015611937573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061195c9190613500565b9998505050505050505050565b600080612710611979848961413f565b611983919061400b565b90506000611991828961415e565b895190915060009081908b82826119b857634e487b7160e01b600052603260045260246000fd5b602002602001015192508b6001826119d0919061415e565b815181106119ee57634e487b7160e01b600052603260045260246000fd5b6020026020010151915060008051602061423b8339815191526001600160a01b03168c600081518110611a3157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611afb578c6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8157600080fd5b505afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab99190612f57565b8c600081518110611ada57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b60008051602061423b8339815191528c611b1660018461415e565b81518110611b3457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415611c07578c6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611b8457600080fd5b505afa158015611b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbc9190612f57565b8c611bc860018461415e565b81518110611be657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250505b611c12888487612680565b5060606001600160a01b03831660008051602061423b8339815191521415611cc6578c6001600160a01b0316637ff36ab5858c8f8d6000196040518663ffffffff1660e01b8152600401611c699493929190613f2b565b6000604051808303818588803b158015611c8257600080fd5b505af1158015611c96573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611cbf9190810190613014565b9050611e00565b6001600160a01b03821660008051602061423b8339815191521415611d71578c6001600160a01b03166318cbafe5858c8f8d6000196040518663ffffffff1660e01b8152600401611d1b959493929190613f8d565b600060405180830381600087803b158015611d3557600080fd5b505af1158015611d49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cbf9190810190613014565b8c6001600160a01b03166338ed1739858c8f8d6000196040518663ffffffff1660e01b8152600401611da7959493929190613f8d565b600060405180830381600087803b158015611dc157600080fd5b505af1158015611dd5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dfd9190810190613014565b90505b8060018251611e0f919061415e565b81518110611e2d57634e487b7160e01b600052603260045260246000fd5b602002602001015195505050505050979650505050505050565b6000611e52826126e2565b90508015611e5f57611622565b506001600160a01b0381166000908152600360205260409020548061162257816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb757600080fd5b505afa158015611ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eef919061353b565b60ff16610d1e565b60006b204fce5e3e25026110000000851115611f255760405162461bcd60e51b815260040161054890613d28565b6b204fce5e3e25026110000000841115611f515760405162461bcd60e51b815260040161054890613e1b565b828210611fc5576012611f64848461415e565b1115611f825760405162461bcd60e51b815260040161054890613934565b84611f8d848461415e565b611f9890600a614071565b611fa2919061413f565b611fb4670de0b6b3a76400008661413f565b611fbe919061400b565b905061051e565b6012611fd1838561415e565b1115611fef5760405162461bcd60e51b815260040161054890613bea565b84611ffa838561415e565b61200590600a614071565b612017670de0b6b3a76400008761413f565b611fb4919061413f565b6000826040516020016120349190613e75565b604051602081830303815290604052905060018360800151612056919061415e565b608084015242610100840152604051612093908290612079908690602001613e75565b6040516020818303038152906040528486600001516127f4565b817fc18ccd2a235858ab972767d33f870018e941cec2e8d615f4fc1e630f6d6ea03f846040516120c39190613e75565b60405180910390a2505050565b6000806000806120e3878787600061287c565b60208a015160408b0151939650919450925061211891856121068187858561293c565b858c61012001518d6101400151611870565b9350841561212d5761212a868561415e565b93505b5050509392505050565b6000806000806121498987878b61287c565b9250925092508660008151811061217057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031689602001516001600160a01b03161480156121e5575086600188516121a6919061415e565b815181106121c457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031689604001516001600160a01b0316145b6122015760405162461bcd60e51b815260040161054890613a59565b612288600189600281111561222657634e487b7160e01b600052602160045260246000fd5b14612251577f0000000000000000000000000000000000000000000000000000000000000000612273565b7f00000000000000000000000000000000000000000000000000000000000000005b888585858e61012001518f6101400151611969565b9350841561229d5761229a868561415e565b93505b50505095945050505050565b6000816001600160a01b031663d34ac2bc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e457600080fd5b505afa1580156122f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231c9190612f57565b6001600160a01b0316633c772b6c8487876040518463ffffffff1660e01b815260040161234b93929190613894565b604080518083038186803b15801561236257600080fd5b505afa158015612376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239a9190613518565b5095945050505050565b60408051600280825260608201835260009260208301908036833701905050905083816000815181106123e757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28160018151811061243d57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505061247c84737a250d5630b4cf539739df2c5dacb4c659f2488d856117c5565b6040516318cbafe560e01b8152737a250d5630b4cf539739df2c5dacb4c659f2488d906318cbafe5906124bb908690869086908b904290600401613f8d565b600060405180830381600087803b1580156124d557600080fd5b505af11580156124e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae19190810190613014565b600061253e826040516020016125279190613e75565b60408051601f198184030181529190528351612995565b9050807fc18ccd2a235858ab972767d33f870018e941cec2e8d615f4fc1e630f6d6ea03f836040516125709190613e75565b60405180910390a25050565b600061259a8361258b87611e47565b61259487611e47565b85612a2b565b95945050505050565b6113df8363a9059cbb60e01b8484604051602401611788929190613732565b6000612617826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b419092919063ffffffff16565b8051909150156113df578080602001905181019061263591906130bb565b6113df5760405162461bcd60e51b815260040161054890613cde565b60008061265e8385613ff3565b905083811015610d1b5760405162461bcd60e51b81526004016105489061396b565b80156113df576001600160a01b038084166000908152600460209081526040808320938616835292905220546126b7908290613ff3565b6001600160a01b03808516600090815260046020908152604080832093871683529290522055505050565b60006001600160a01b03821660008051602061423b833981519152141561270b57506012611622565b6001600160a01b03821673dac17f958d2ee523a2206206994597c13d831ec7141561273857506006611622565b6001600160a01b038216736b175474e89094c44da98b954eedeac495271d0f141561276557506012611622565b6001600160a01b03821673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48141561279257506006611622565b6001600160a01b038216732260fac5e5542a773aa44fbcfedf7c193bc2c59914156127bf57506008611622565b6001600160a01b03821673dd974d5c2e2928dea5f71b9825b8b646686bd20014156127ec57506012611622565b506000611622565b6127ff848383611627565b600061280b8484611288565b6000818152600160205260409081902080546001600160a01b0319166001600160a01b0386169081179091559051919250829185907ff5357d3629bc09cf03248336fcf9dcacb7c00b58073d98d36ecbdd2cdfc3f76f9061286d908a906137a1565b60405180910390a45050505050565b600080600084156128ab5750308561289388610d24565b61289d9190613ff3565b9150866060015192506128cc565b5085516128b787610d24565b91508587606001516128c9919061415e565b92505b60208701516001600160a01b031660008051602061423b8339815191521461293257865160608801516020890151612911926001600160a01b03909116913090611767565b61293261291d8561151c565b60208901516001600160a01b031690856117c5565b9450945094915050565b60008061296284876040518060600160405280602b815260200161425b602b9139612b50565b9050600061298984876040518060600160405280602c815260200161420f602c9139612b50565b9050610eed8183612c31565b600080600081546129a5906141a1565b919050819055905060006129bb84600054611288565b60008181526001602052604080822080546001600160a01b0319166001600160a01b0388169081179091559154905192935083927ff5357d3629bc09cf03248336fcf9dcacb7c00b58073d98d36ecbdd2cdfc3f76f90612a1c9089906137a1565b60405180910390a45092915050565b60006b204fce5e3e25026110000000851115612a595760405162461bcd60e51b815260040161054890613aab565b612a6e670de0b6b3a76400006298968061413f565b821115612a8d5760405162461bcd60e51b815260040161054890613cb5565b838310612ae6576012612aa0858561415e565b1115612abe5760405162461bcd60e51b815260040161054890613934565b670de0b6b3a7640000612ad1858561415e565b612adc90600a614071565b612017848861413f565b6012612af2848661415e565b1115612b105760405162461bcd60e51b815260040161054890613bea565b612b1a838561415e565b612b2590600a614071565b612b3790670de0b6b3a764000061413f565b611fb4838761413f565b606061051e8484600085612c63565b60006001600160a01b03841660008051602061423b8339815191521415612b78575081610f30565b836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612bb157600080fd5b505afa925050508015612be1575060408051601f3d908101601f19168201909252612bde9181019061353b565b60015b612bff578160405162461bcd60e51b815260040161054891906137a1565b612c0d60ff8216600a614071565b612c1f85670de0b6b3a764000061413f565b612c29919061400b565b915050610f30565b600081612c59612c4985670de0b6b3a7640000612d18565b612c5460028661400b565b612d58565b610d1b919061400b565b606082471015612c855760405162461bcd60e51b815260040161054890613a13565b612c8e85612d86565b612caa5760405162461bcd60e51b815260040161054890613c7e565b600080866001600160a01b03168587604051612cc691906136c1565b60006040518083038185875af1925050503d8060008114612d03576040519150601f19603f3d011682016040523d82523d6000602084013e612d08565b606091505b5091509150610eed828286612d8c565b6000811580612d3c57508282612d2e818361413f565b9250612d3a908361400b565b145b610d1e5760405162461bcd60e51b815260040161054890613906565b600082612d658382613ff3565b9150811015610d1e5760405162461bcd60e51b8152600401610548906139a2565b3b151590565b60608315612d9b575081610f30565b825115612dab5782518084602001fd5b8160405162461bcd60e51b815260040161054891906137a1565b8035611622816141e8565b60008083601f840112612de1578182fd5b50813567ffffffffffffffff811115612df8578182fd5b6020830191508360208083028501011115612e1257600080fd5b9250929050565b600082601f830112612e29578081fd5b813567ffffffffffffffff811115612e4357612e436141d2565b612e56601f8201601f1916602001613fc9565b818152846020838601011115612e6a578283fd5b816020850160208301379081016020019190915292915050565b80356003811061162257600080fd5b60006101608284031215612ea5578081fd5b50919050565b6000610120808385031215612ebe578182fd5b612ec781613fc9565b915050612ed382612dc5565b8152612ee160208301612dc5565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c0820152612f2460e08301612dc5565b60e082015261010080830135818301525092915050565b600060208284031215612f4c578081fd5b8135610d1b816141e8565b600060208284031215612f68578081fd5b8151610d1b816141e8565b60008060408385031215612f85578081fd5b8235612f90816141e8565b91506020830135612fa0816141e8565b809150509250929050565b60008060008060408587031215612fc0578182fd5b843567ffffffffffffffff80821115612fd7578384fd5b612fe388838901612dd0565b90965094506020870135915080821115612ffb578384fd5b5061300887828801612dd0565b95989497509550505050565b60006020808385031215613026578182fd5b825167ffffffffffffffff8082111561303d578384fd5b818501915085601f830112613050578384fd5b815181811115613062576130626141d2565b8381029150613072848301613fc9565b8181528481019084860184860187018a101561308c578788fd5b8795505b838610156130ae578051835260019590950194918601918601613090565b5098975050505050505050565b6000602082840312156130cc578081fd5b8151610d1b81614200565b6000602082840312156130e8578081fd5b5035919050565b60008060408385031215613101578182fd5b823567ffffffffffffffff811115613117578283fd5b61312385828601612e19565b95602094909401359450505050565b600080600060608486031215613146578081fd5b833567ffffffffffffffff81111561315c578182fd5b61316886828701612e19565b935050602084013591506040840135613180816141e8565b809150509250925092565b60008060008060008060a087890312156131a3578384fd5b86356131ae816141e8565b955060208701356131be816141e8565b94506040870135935060608701359250608087013567ffffffffffffffff808211156131e8578384fd5b818901915089601f8301126131fb578384fd5b813581811115613209578485fd5b8a602082850101111561321a578485fd5b6020830194508093505050509295509295509295565b600080600080600060808688031215613247578283fd5b8535613252816141e8565b945060208601359350604086013567ffffffffffffffff811115613274578384fd5b61328088828901612dd0565b96999598509660600135949350505050565b6000602082840312156132a3578081fd5b610d1b82612e84565b60008061018083850312156132bf578182fd5b6132c98484612e93565b94610160939093013593505050565b6000806000806000808688036102208112156132f2578485fd5b6132fc8989612e93565b965061016088013595506133136101808901612e84565b9450606061019f1982011215613327578283fd5b506040516060810167ffffffffffffffff828210818311171561334c5761334c6141d2565b816040526101a08a013583526101c08a013560208401526101e08a0135915061337482614200565b8160408401528295506102008a0135925080831115613391578485fd5b505061339f89828a01612dd0565b979a9699509497509295939492505050565b60006101608083850312156133c4578182fd5b6133cd81613fc9565b90506133d883612dc5565b81526133e660208401612dc5565b60208201526133f760408401612dc5565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120613448818501612dc5565b90820152610140928301359281019290925250919050565b6000806101408385031215613473578182fd5b61347d8484612eab565b9150610120830135612fa081614200565b600080600080600061018086880312156134a6578283fd5b6134b08787612eab565b94506134bf6101208701612e84565b9350610140860135925061016086013567ffffffffffffffff8111156134e3578182fd5b6134ef88828901612dd0565b969995985093965092949392505050565b600060208284031215613511578081fd5b5051919050565b6000806040838503121561352a578182fd5b505080516020909101519092909150565b60006020828403121561354c578081fd5b815160ff81168114610d1b578182fd5b6001600160a01b03169052565b60008284526020808501945082825b858110156135a657813561358b816141e8565b6001600160a01b031687529582019590820190600101613578565b509495945050505050565b6000815180845260208085019450808401835b838110156135a65781516001600160a01b0316875295820195908201906001016135c4565b60008151808452613601816020860160208601614175565b601f01601f19169290920160200192915050565b6136278261362283612dc5565b61355c565b61363360208201612dc5565b613640602084018261355c565b5061364d60408201612dc5565b61365a604084018261355c565b50606081013560608301526080810135608083015260a081013560a083015260c081013560c083015260e081013560e08301526101008082013581840152506101206136a7818301612dc5565b6136b38285018261355c565b505061014090810135910152565b600082516136d3818460208701614175565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60006060825261375f606083018789613569565b8281036020840152613772818688613569565b91505060018060a01b03831660408301529695505050505050565b901515815260200190565b90815260200190565b600060208252610d1b60208301846135e9565b6000604082526137c760408301856135e9565b90508260208301529392505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b600061012060018060a01b03808d1684528b6020850152808b166040850152808a1660608501528860808501528760a085015280871660c0850152508460e084015280610100840152613884818401856135e9565b9c9b505050505050505050505050565b9283526001600160a01b03918216602084015216604082015260600190565b60208082526033908201527f47656c61746f4b72797374616c2e6765744d696e52657475726e3a206964656160408201527206c52657475726e2063616e6e6f74206265203606c1b606082015260800190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526018908201527f647374202d20737263203e204d41585f444543494d414c530000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b60208082526023908201527f53696d706c65536572766963655374616e646172643a20696e76616c6964207460408201526261736b60e81b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526032908201527f47656c61746f4443412e616374696f6e3a207472616465207061746820646f6560408201527139903737ba1036b0ba31b41037b93232b91760711b606082015260800190565b60208082526010908201526f737263517479203e204d41585f51545960801b604082015260600190565b6020808252600f908201526e17dd1c985b9cd9995c8e8819985a5b608a1b604082015260600190565b60208082526035908201527f47656c61746f4443412e7375626d69743a206d69736d61746368696e6720616d6040820152741bdd5b9d081bd9881155120819195c1bdcda5d1959605a1b606082015260800190565b6020808252602b908201527f53696d706c65536572766963655374616e646172643a2043616c6c657220697360408201526a206e6f742067656c61746f60a81b606082015260800190565b6020808252602c908201527f47656c61746f4443413a2067657450726f746f636f6c416464726573733a204460408201526b195e081b9bdd08199bdd5b9960a21b606082015260800190565b60208082526018908201527f737263202d20647374203e204d41585f444543494d414c530000000000000000604082015260600190565b60208082526039908201527f47656c61746f4443412e7375626d6974416e64457865633a206379636c65206d60408201527f75737420686176652032206f72206d6f72652074726164657300000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252600f908201526e72617465203e204d41585f5241544560881b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b602080825260139082015272737263416d6f756e74203e204d41585f51545960681b604082015260600190565b60208082526029908201527f5461736b2053746f726167653a204f6e6c79204f776e65722063616e2072656d6040820152686f7665207461736b7360b81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526026908201527f47656c61746f4443412e63616e63656c3a20436f756c64206e6f7420726566756040820152650dcc8408aa8960d31b606082015260800190565b60208082526014908201527364657374416d6f756e74203e204d41585f51545960601b604082015260600190565b6101608101610d1e8284613615565b6101808101613e678285613615565b826101608301529392505050565b600061016082019050613e8982845161355c565b6020830151613e9b602084018261355c565b506040830151613eae604084018261355c565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151613f008285018261355c565b505061014092830151919092015290565b60008482526040602083015261259a604083018486613569565b600085825260806020830152613f4460808301866135b1565b6001600160a01b03949094166040830152506060015292915050565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b600086825285602083015260a06040830152613fac60a08301866135b1565b6001600160a01b0394909416606083015250608001529392505050565b60405181810167ffffffffffffffff81118282101715613feb57613feb6141d2565b604052919050565b60008219821115614006576140066141bc565b500190565b60008261402657634e487b7160e01b81526012600452602481fd5b500490565b80825b600180861161403d5750614068565b81870482111561404f5761404f6141bc565b8086161561405c57918102915b9490941c93800261402e565b94509492505050565b6000610d1b600019848460008261408a57506001610f30565b8161409757506000610f30565b81600181146140ad57600281146140b7576140e4565b6001915050610f30565b60ff8411156140c8576140c86141bc565b6001841b9150848211156140de576140de6141bc565b50610f30565b5060208310610133831016604e8410600b8410161715614117575081810a83811115614112576141126141bc565b610f30565b614124848484600161402b565b808604821115614136576141366141bc565b02949350505050565b6000816000190483118215151615614159576141596141bc565b500290565b600082821015614170576141706141bc565b500390565b60005b83811015614190578181015183820152602001614178565b838111156117bf5750506000910152565b60006000198214156141b5576141b56141bc565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146141fd57600080fd5b50565b80151581146141fd57600080fdfe47656c61746f4443413a5f6765744b79626572526174653a206e65774d696e52657475726e20726576657274000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee47656c61746f4443413a5f6765744b79626572526174653a206e6577416d6f756e74496e20726576657274a26469706673582212208f0fa83853c59756510b81712f8434e29e59c942a5c8505615d4d9bc858a0ee064736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6497,
        "contract": "contracts/GelatoDCA.sol:GelatoDCA",
        "label": "taskId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6501,
        "contract": "contracts/GelatoDCA.sol:GelatoDCA",
        "label": "taskOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 14023,
        "contract": "contracts/GelatoDCA.sol:GelatoDCA",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 12021,
        "contract": "contracts/GelatoDCA.sol:GelatoDCA",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20)13549,t_uint256)"
      },
      {
        "astId": 410,
        "contract": "contracts/GelatoDCA.sol:GelatoDCA",
        "label": "platformWalletFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)13549": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)13549,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)13549",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}