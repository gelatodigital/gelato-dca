{
  "address": "0x8c5504a2733F1cbAa4741CF32316eD7CE3296B20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokensA",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokensB",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_decimals",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_decimals",
          "type": "uint256[]"
        }
      ],
      "name": "addStablecoins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokensA",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_tokensB",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        }
      ],
      "name": "addTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddressA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddressB",
          "type": "address"
        }
      ],
      "name": "getExpectedReturnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x732611494f3198f11affb9a91ea945583273c6794b6350ca720a4f23e1f91ab5",
  "receipt": {
    "to": null,
    "from": "0xAabB54394E8dd61Dd70897E9c80be8de7C64A895",
    "contractAddress": "0x8c5504a2733F1cbAa4741CF32316eD7CE3296B20",
    "transactionIndex": 2,
    "gasUsed": "1510917",
    "logsBloom": "0x
    "blockHash": "0x5b2ade3fac5fc8e92dc5a96263b42abaa8b8ee294ae2c689b3fc7bd2714b74f8",
    "transactionHash": "0x732611494f3198f11affb9a91ea945583273c6794b6350ca720a4f23e1f91ab5",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9410455,
        "transactionHash": "0x732611494f3198f11affb9a91ea945583273c6794b6350ca720a4f23e1f91ab5",
        "address": "0x8c5504a2733F1cbAa4741CF32316eD7CE3296B20",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aabb54394e8dd61dd70897e9c80be8de7c64a895"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x5b2ade3fac5fc8e92dc5a96263b42abaa8b8ee294ae2c689b3fc7bd2714b74f8"
      }
    ],
    "blockNumber": 9410455,
    "cumulativeGasUsed": "1676564",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbCA556c912754Bc8E7D4Aad20Ad69a1B1444F42d",
    [
      "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
      "0xaD6D458402F60fD3Bd25163575031ACDce07538D"
    ],
    [
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3",
      "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
    ],
    [
      "0xCd8936C823c851Df31F64085E257A183029198E0",
      "0xa14D96dcCA45b1003291bE3D2814CBAc44d332D6"
    ],
    [
      "0x7354C81fbCb229187480c4f497F945C6A312d5C3",
      "0xaD6D458402F60fD3Bd25163575031ACDce07538D"
    ],
    [8, 18]
  ],
  "solcInputHash": "b964a3d97e5e08a369f71ecb7f232272",
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokensA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokensB\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decimals\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_decimals\",\"type\":\"uint256[]\"}],\"name\":\"addStablecoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokensA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokensB\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddressA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddressB\",\"type\":\"address\"}],\"name\":\"getExpectedReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"getExpectedReturnAmount(uint256,address,address)\":{\"details\":\"Get expected return amount for tokenA / tokenB\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/gelato/OracleAggregator.sol\":\"OracleAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/core/contracts/external/Ownable.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xbd17809400b98353ba6de08b9529d3213cd008eebc059728b0538bbd409f64a1\",\"license\":\"UNLICENSED\"},\"@gelatonetwork/core/contracts/external/SafeMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: UNLICENSED\\\"\\npragma solidity ^0.6.10;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x6c5c35e292963cbfd8d30c28a9f0d32ab062c89fc49056fc0b0d19de404f3601\",\"license\":\"UNLICENSED\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/gelato/OracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.10;\\n\\nimport {Ownable} from \\\"@gelatonetwork/core/contracts/external/Ownable.sol\\\";\\nimport {SafeMath} from \\\"@gelatonetwork/core/contracts/external/SafeMath.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IGasPriceOracle} from \\\"./interfaces/IGasPriceOracle.sol\\\";\\n\\n// solhint-disable max-states-count\\ncontract OracleAggregator is Ownable {\\n    using SafeMath for uint256;\\n    // solhint-disable var-name-mixedcase\\n    address private constant _ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    // solhint-disable var-name-mixedcase\\n    address private constant _USD_ADDRESS = 0x7354C81fbCb229187480c4f497F945C6A312d5C3;\\n\\n    address public immutable wethAddress;\\n\\n    mapping(address => mapping(address => address)) private _tokenPairAddress;\\n    mapping(address => uint256) private _nrOfDecimalsUSD;\\n\\n    // solhint-disable function-max-lines\\n    constructor(\\n        address _weth,\\n        address[] memory _tokensA, \\n        address[] memory _tokensB, \\n        address[] memory _oracles, \\n        address[] memory _stablecoins, \\n        uint256[] memory _decimals\\n    ) public {\\n        wethAddress = _weth;\\n        addTokens(_tokensA, _tokensB, _oracles);\\n        addStablecoins(_stablecoins, _decimals);\\n    }\\n\\n    function addTokens (\\n        address[] memory _tokensA,\\n        address[] memory _tokensB,\\n        address[] memory _oracles\\n    ) public onlyOwner {\\n        require(_tokensA.length == _tokensB.length && _tokensA.length == _oracles.length);\\n        for (uint256 i = 0; i < _tokensA.length; i++) {\\n            _tokenPairAddress[_tokensA[i]][_tokensB[i]] = _oracles[i];\\n        }\\n    }\\n\\n    function addStablecoins (\\n        address[] memory _stablecoins,\\n        uint256[] memory _decimals\\n    ) public onlyOwner {\\n        require(_stablecoins.length == _decimals.length);\\n        for (uint256 i = 0; i < _stablecoins.length; i++) {\\n            _nrOfDecimalsUSD[_stablecoins[i]] = _decimals[i];\\n        }\\n    }\\n\\n    // solhint-disable function-max-lines\\n    // solhint-disable code-complexity\\n    /// @dev Get expected return amount for tokenA / tokenB\\n    function getExpectedReturnAmount(\\n        uint256 amount,\\n        address tokenAddressA,\\n        address tokenAddressB\\n    ) public view returns (uint256 returnAmount, uint256 decimals) {\\n        require(amount > 0, \\\"OracleAggregator: Amount is Zero\\\");\\n        require(\\n            tokenAddressA != address(0),\\n            \\\"OracleAggregator: tokenAddressA is Zero\\\"\\n        );\\n        require(\\n            tokenAddressB != address(0),\\n            \\\"OracleAggregator: tokenAddressB is Zero\\\"\\n        );\\n        if (tokenAddressA == wethAddress) {\\n            tokenAddressA = _ETH_ADDRESS;\\n        }\\n        if (tokenAddressB == wethAddress) {\\n            tokenAddressB = _ETH_ADDRESS;\\n        }\\n\\n        uint256 nrOfDecimalsIn;\\n        if (tokenAddressA != _ETH_ADDRESS && tokenAddressA != _USD_ADDRESS) {\\n            try ERC20(tokenAddressA).decimals() returns (uint8 _inputDecimals) {\\n                nrOfDecimalsIn = uint256(_inputDecimals);\\n            } catch {\\n                revert(\\\"OracleAggregator: ERC20.decimals() revert\\\");\\n            }\\n        } else {\\n            if (tokenAddressA != _ETH_ADDRESS) {\\n                nrOfDecimalsIn = _nrOfDecimalsUSD[_USD_ADDRESS];\\n            } else {\\n                nrOfDecimalsIn = 18;\\n            }\\n        }\\n\\n        address stableCoinAddress =\\n            _nrOfDecimalsUSD[tokenAddressB] > 0 ? tokenAddressB : address(0);\\n\\n        (tokenAddressA, tokenAddressB) = _convertUSD(\\n            tokenAddressA,\\n            tokenAddressB\\n        );\\n\\n        // when token_b is ETH or USD\\n        if (tokenAddressB == _ETH_ADDRESS || tokenAddressB == _USD_ADDRESS) {\\n            // oracle of token_a / token_b exists\\n            // e.g. calculating KNC/ETH\\n            // KNC/ETH oracle available\\n            if (_tokenPairAddress[tokenAddressA][tokenAddressB] != address(0)) {\\n                (uint256 returnRateA, uint256 nrOfDecimals) =\\n                    _getRate(tokenAddressA, tokenAddressB);\\n\\n                returnAmount = stableCoinAddress != address(0)\\n                    ? _matchStableCoinDecimal(\\n                        stableCoinAddress,\\n                        amount,\\n                        nrOfDecimals,\\n                        0,\\n                        returnRateA,\\n                        1\\n                    )\\n                    : amount.mul(returnRateA);\\n\\n                return (returnAmount.div(10**nrOfDecimalsIn), nrOfDecimalsIn);\\n            } else {\\n                // oracle of token_a / token_b does not exist\\n                // e.g. calculating UNI/USD\\n                // UNI/ETH and USD/ETH oracles available\\n                (address pairA, address pairB) =\\n                    _checkAvailablePair(tokenAddressA, tokenAddressB);\\n                if (pairA == address(0) && pairB == address(0)) return (0, 0);\\n\\n                (uint256 returnRateA, ) = _getRate(tokenAddressA, pairA);\\n\\n                (uint256 returnRateB, uint256 nrOfDecimals) =\\n                    _getRate(tokenAddressB, pairB);\\n\\n                nrOfDecimals = stableCoinAddress != address(0)\\n                    ? _nrOfDecimalsUSD[stableCoinAddress]\\n                    : nrOfDecimals;\\n\\n                returnAmount = amount\\n                    .mul(returnRateA.mul(10**nrOfDecimals))\\n                    .div(returnRateB);\\n                if (tokenAddressB != _ETH_ADDRESS) {\\n                    return (\\n                        returnAmount.div(10**nrOfDecimalsIn),\\n                        nrOfDecimalsIn\\n                    );\\n                } else {\\n                    return (\\n                        returnAmount.div(10**_nrOfDecimalsUSD[_USD_ADDRESS]),\\n                        nrOfDecimalsIn\\n                    );\\n                }\\n            }\\n        } else {\\n            // when token_b is not ETH or USD\\n            (address pairA, address pairB) =\\n                _checkAvailablePair(tokenAddressA, tokenAddressB);\\n\\n            if (pairA == address(0) && pairB == address(0)) return (0, 0);\\n            // oracle of token_a/ETH, token_b/ETH || token_a/USD, token_b/USD exists\\n            // e.g. calculating KNC/UNI where\\n            // KNC/ETH and UNI/ETH oracles available\\n            if (pairA == pairB) {\\n                (uint256 returnRateA, uint256 nrOfDecimals) =\\n                    _getRate(tokenAddressA, pairA);\\n\\n                (uint256 returnRateB, ) = _getRate(tokenAddressB, pairB);\\n\\n                returnAmount = amount\\n                    .mul(returnRateA.mul(10**nrOfDecimals))\\n                    .div(returnRateB);\\n                if (pairA == _ETH_ADDRESS) {\\n                    return (\\n                        returnAmount.div(10**nrOfDecimalsIn),\\n                        nrOfDecimalsIn\\n                    );\\n                } else {\\n                    return (\\n                        returnAmount.div(10**_nrOfDecimalsUSD[_USD_ADDRESS]),\\n                        nrOfDecimalsIn\\n                    );\\n                }\\n            } else if (pairA == _ETH_ADDRESS && pairB == _USD_ADDRESS) {\\n                // oracle of token_a/ETH and token_b/USD exists\\n                // e.g. calculating UNI/SXP where\\n                // UNI/ETH and SXP/USD oracles available\\n                {\\n                    (uint256 returnRateA, ) = _getRate(tokenAddressA, pairA);\\n                    (uint256 returnRate_ETHUSD, ) =\\n                        _getRate(_ETH_ADDRESS, _USD_ADDRESS);\\n                    (uint256 returnRateB, ) = _getRate(tokenAddressB, pairB);\\n\\n                    returnAmount = amount\\n                        .mul(returnRateA.mul(returnRate_ETHUSD))\\n                        .div(returnRateB);\\n                }\\n                return (returnAmount.div(10**nrOfDecimalsIn), nrOfDecimalsIn);\\n            } else if (pairA == _USD_ADDRESS && pairB == _ETH_ADDRESS) {\\n                // oracle of token_a/USD and token_b/ETH exists\\n                // e.g. calculating SXP/UNI where\\n                // SXP/USD and UNI/ETH oracles available\\n                uint256 numerator;\\n                {\\n                    (uint256 returnRateA, uint256 nrOfDecimals) =\\n                        _getRate(tokenAddressA, pairA);\\n\\n                    (uint256 returnRate_USDETH, uint256 nrOfDecimals_USDETH) =\\n                        _getRate(_USD_ADDRESS, _ETH_ADDRESS);\\n\\n                    numerator = returnRate_USDETH\\n                        .mul(10**(nrOfDecimals_USDETH.sub(nrOfDecimals)))\\n                        .mul(returnRateA)\\n                        .div(10**nrOfDecimals_USDETH);\\n                }\\n                (uint256 returnRateB, ) = _getRate(tokenAddressB, pairB);\\n                returnAmount = amount.mul(numerator).div(returnRateB);\\n                return (returnAmount, nrOfDecimalsIn);\\n            }\\n        }\\n    }\\n\\n    /// @dev check the available oracles for token a & b\\n    /// and choose which oracles to use\\n    function _checkAvailablePair(address tokenAddressA, address tokenAddressB)\\n        private\\n        view\\n        returns (address, address)\\n    {\\n        if (\\n            _tokenPairAddress[tokenAddressA][_USD_ADDRESS] != address(0) &&\\n            _tokenPairAddress[tokenAddressB][_USD_ADDRESS] != address(0)\\n        ) {\\n            return (_USD_ADDRESS, _USD_ADDRESS);\\n        } else if (\\n            _tokenPairAddress[tokenAddressA][_ETH_ADDRESS] != address(0) &&\\n            _tokenPairAddress[tokenAddressB][_ETH_ADDRESS] != address(0)\\n        ) {\\n            return (_ETH_ADDRESS, _ETH_ADDRESS);\\n        } else if (\\n            _tokenPairAddress[tokenAddressA][_ETH_ADDRESS] != address(0) &&\\n            _tokenPairAddress[tokenAddressB][_USD_ADDRESS] != address(0)\\n        ) {\\n            return (_ETH_ADDRESS, _USD_ADDRESS);\\n        } else if (\\n            _tokenPairAddress[tokenAddressA][_USD_ADDRESS] != address(0) &&\\n            _tokenPairAddress[tokenAddressB][_ETH_ADDRESS] != address(0)\\n        ) {\\n            return (_USD_ADDRESS, _ETH_ADDRESS);\\n        } else {\\n            return (address(0), address(0));\\n        }\\n    }\\n\\n    function _getRate(address tokenAddressA, address tokenAddressB)\\n        private\\n        view\\n        returns (uint256 tokenPrice, uint256 nrOfDecimals)\\n    {\\n        if (tokenAddressA == tokenAddressB) {\\n            return (1, 0);\\n        } else {\\n            IGasPriceOracle priceFeed =\\n                IGasPriceOracle(\\n                    _tokenPairAddress[tokenAddressA][tokenAddressB]\\n                );\\n            tokenPrice = uint256(priceFeed.latestAnswer());\\n            nrOfDecimals = priceFeed.decimals();\\n        }\\n    }\\n\\n    /// @dev converting all usd pegged stablecoins to single USD address\\n    function _convertUSD(address tokenAddressA, address tokenAddressB)\\n        private\\n        view\\n        returns (address, address)\\n    {\\n        if (\\n            _nrOfDecimalsUSD[tokenAddressA] > 0 &&\\n            _nrOfDecimalsUSD[tokenAddressB] > 0\\n        ) {\\n            return (_USD_ADDRESS, _USD_ADDRESS);\\n        } else if (_nrOfDecimalsUSD[tokenAddressA] > 0) {\\n            return (_USD_ADDRESS, tokenAddressB);\\n        } else if (_nrOfDecimalsUSD[tokenAddressB] > 0) {\\n            return (tokenAddressA, _USD_ADDRESS);\\n        } else {\\n            return (tokenAddressA, tokenAddressB);\\n        }\\n    }\\n\\n    /// @dev modify nrOfDecimlas and amount to follow stableCoin's nrOfDecimals\\n    function _matchStableCoinDecimal(\\n        address stableCoinAddress,\\n        uint256 amount,\\n        uint256 nrOfDecimals,\\n        uint256 padding,\\n        uint256 returnRateA,\\n        uint256 returnRateB\\n    ) private view returns (uint256 returnAmount) {\\n        uint256 div =\\n            _nrOfDecimalsUSD[stableCoinAddress] > nrOfDecimals\\n                ? 10**(_nrOfDecimalsUSD[stableCoinAddress] - nrOfDecimals)\\n                : 10**(nrOfDecimals - _nrOfDecimalsUSD[stableCoinAddress]);\\n        returnAmount = _nrOfDecimalsUSD[stableCoinAddress] > nrOfDecimals\\n            ? amount.mul(returnRateA.mul(10**padding)).div(returnRateB).mul(div)\\n            : amount.mul(returnRateA.mul(10**padding)).div(returnRateB).div(\\n                div\\n            );\\n    }\\n}\",\"keccak256\":\"0x4d9ae8b4d76c2ba8a922b49ad0d1179ddcd3893afc7ad8bbc9040de07b08304d\",\"license\":\"UNLICENSED\"},\"contracts/gelato/interfaces/IGasPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface IGasPriceOracle {\\n    function latestAnswer() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n}\",\"keccak256\":\"0xb49fdafd76b562394fd82d5e619b9c4a973f72a2c084c959b2afe4d654fea1e9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001dc738038062001dc7833981810160405260c08110156200003757600080fd5b8151602083018051604051929492938301929190846401000000008211156200005f57600080fd5b9083019060208201858111156200007557600080fd5b82518660208202830111640100000000821117156200009357600080fd5b82525081516020918201928201910280838360005b83811015620000c2578181015183820152602001620000a8565b5050505090500160405260200180516040519392919084640100000000821115620000ec57600080fd5b9083019060208201858111156200010257600080fd5b82518660208202830111640100000000821117156200012057600080fd5b82525081516020918201928201910280838360005b838110156200014f57818101518382015260200162000135565b50505050905001604052602001805160405193929190846401000000008211156200017957600080fd5b9083019060208201858111156200018f57600080fd5b8251866020820283011164010000000082111715620001ad57600080fd5b82525081516020918201928201910280838360005b83811015620001dc578181015183820152602001620001c2565b50505050905001604052602001805160405193929190846401000000008211156200020657600080fd5b9083019060208201858111156200021c57600080fd5b82518660208202830111640100000000821117156200023a57600080fd5b82525081516020918201928201910280838360005b83811015620002695781810151838201526020016200024f565b50505050905001604052602001805160405193929190846401000000008211156200029357600080fd5b908301906020820185811115620002a957600080fd5b8251866020820283011164010000000082111715620002c757600080fd5b82525081516020918201928201910280838360005b83811015620002f6578181015183820152602001620002dc565b50505050919091016040819052600080546001600160a01b03191633178082556001600160a01b0316955093507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09250839150a36001600160601b0319606087901b16608052620003728585856001600160e01b036200039316565b6200038782826001600160e01b03620004b916565b50505050505062000592565b620003a66001600160e01b036200058116565b620003e7576040805162461bcd60e51b8152602060048201819052602482015260008051602062001da7833981519152604482015290519081900360640190fd5b81518351148015620003fa575080518351145b6200040457600080fd5b60005b8351811015620004b3578181815181106200041e57fe5b6020026020010151600160008684815181106200043757fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008584815181106200046e57fe5b6020908102919091018101516001600160a01b0390811683529082019290925260400160002080546001600160a01b0319169290911691909117905560010162000407565b50505050565b620004cc6001600160e01b036200058116565b6200050d576040805162461bcd60e51b8152602060048201819052602482015260008051602062001da7833981519152604482015290519081900360640190fd5b80518251146200051c57600080fd5b60005b82518110156200057c578181815181106200053657fe5b6020026020010151600260008584815181106200054f57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020556001016200051f565b505050565b6000546001600160a01b0316331490565b60805160601c6117ed620005ba600039806106c652806107125280610da052506117ed6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a6146103c85780638da5cb5b146103d05780638f32d59b146103d8578063f2fde38b146103f457610088565b80631ef033781461008d5780632711f37f146102345780633c772b6c146103575780634f0e0ef3146103a4575b600080fd5b610232600480360360608110156100a357600080fd5b810190602081018135600160201b8111156100bd57600080fd5b8201836020820111156100cf57600080fd5b803590602001918460208302840111600160201b831117156100f057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561013f57600080fd5b82018360208201111561015157600080fd5b803590602001918460208302840111600160201b8311171561017257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156101c157600080fd5b8201836020820111156101d357600080fd5b803590602001918460208302840111600160201b831117156101f457600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061041a945050505050565b005b6102326004803603604081101561024a57600080fd5b810190602081018135600160201b81111561026457600080fd5b82018360208201111561027657600080fd5b803590602001918460208302840111600160201b8311171561029757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102e657600080fd5b8201836020820111156102f857600080fd5b803590602001918460208302840111600160201b8311171561031957600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061052c945050505050565b61038b6004803603606081101561036d57600080fd5b508035906001600160a01b03602082013581169160400135166105e2565b6040805192835260208301919091528051918290030190f35b6103ac610d9e565b604080516001600160a01b039092168252519081900360200190f35b610232610dc2565b6103ac610e53565b6103e0610e62565b604080519115158252519081900360200190f35b6102326004803603602081101561040a57600080fd5b50356001600160a01b0316610e73565b610422610e62565b610461576040805162461bcd60e51b81526020600482018190526024820152600080516020611728833981519152604482015290519081900360640190fd5b81518351148015610473575080518351145b61047c57600080fd5b60005b83518110156105265781818151811061049457fe5b6020026020010151600160008684815181106104ac57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008584815181106104e257fe5b6020908102919091018101516001600160a01b0390811683529082019290925260400160002080546001600160a01b0319169290911691909117905560010161047f565b50505050565b610534610e62565b610573576040805162461bcd60e51b81526020600482018190526024820152600080516020611728833981519152604482015290519081900360640190fd5b805182511461058157600080fd5b60005b82518110156105dd5781818151811061059957fe5b6020026020010151600260008584815181106105b157fe5b6020908102919091018101516001600160a01b0316825281019190915260400160002055600101610584565b505050565b6000806000851161063a576040805162461bcd60e51b815260206004820181905260248201527f4f7261636c6541676772656761746f723a20416d6f756e74206973205a65726f604482015290519081900360640190fd5b6001600160a01b03841661067f5760405162461bcd60e51b815260040180806020018281038252602781526020018061169a6027913960400191505060405180910390fd5b6001600160a01b0383166106c45760405162461bcd60e51b81526004018080602001828103825260278152602001806117486027913960400191505060405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614156107105760008051602061170883398151915293505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141561075c5760008051602061170883398151915292505b60006001600160a01b0385166000805160206117088339815191521480159061079c57506001600160a01b03851660008051602061176f83398151915214155b1561084457846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107da57600080fd5b505afa9250505080156107ff57506040513d60208110156107fa57600080fd5b505160015b61083a5760405162461bcd60e51b815260040180806020018281038252602981526020018061178f6029913960400191505060405180910390fd5b60ff1690506108a5565b6001600160a01b038516600080516020611708833981519152146108a1575060008051602061176f83398151915260005260026020527f9e1b0d3a6188c3223b37ac7da3a60120d30bf27de95f233eff27b6beca24989d546108a5565b5060125b6001600160a01b0384166000908152600260205260408120546108c95760006108cb565b845b90506108d78686610ec6565b90965094506001600160a01b038516600080516020611708833981519152148061091757506001600160a01b03851660008051602061176f833981519152145b15610b0f576001600160a01b038681166000908152600160209081526040808320898516845290915290205416156109b2576000806109568888610f9c565b90925090506001600160a01b03831661097e57610979898363ffffffff6110c816565b61098e565b61098e838a83600086600161112a565b95506109a486600a86900a63ffffffff61120a16565b849550955050505050610d96565b6000806109bf888861124c565b90925090506001600160a01b0382161580156109e257506001600160a01b038116155b156109f8575060009450849350610d9692505050565b6000610a048984610f9c565b509050600080610a148a85610f9c565b90925090506001600160a01b038616610a2d5780610a47565b6001600160a01b0386166000908152600260205260409020545b9050610a7d82610a71610a6486600a86900a63ffffffff6110c816565b8f9063ffffffff6110c816565b9063ffffffff61120a16565b98506001600160a01b038a1660008051602061170883398151915214610ac257610ab189600a89900a63ffffffff61120a16565b879850985050505050505050610d96565b60008051602061176f83398151915260005260026020527f9e1b0d3a6188c3223b37ac7da3a60120d30bf27de95f233eff27b6beca24989d54610ab1908a90600a0a63ffffffff61120a16565b600080610b1c888861124c565b90925090506001600160a01b038216158015610b3f57506001600160a01b038116155b15610b55575060009450849350610d9692505050565b806001600160a01b0316826001600160a01b03161415610bdf57600080610b7c8a85610f9c565b915091506000610b8c8a85610f9c565b509050610baa81610a71610a6486600a87900a63ffffffff6110c816565b98506001600160a01b0385166000805160206117088339815191521415610ac257610ab189600a89900a63ffffffff61120a16565b6001600160a01b038216600080516020611708833981519152148015610c1b57506001600160a01b03811660008051602061176f833981519152145b15610c9b576000610c2c8984610f9c565b5090506000610c5760008051602061170883398151915260008051602061176f833981519152610f9c565b5090506000610c668a85610f9c565b509050610c8081610a71610a64868663ffffffff6110c816565b98505050506109a484600a0a8761120a90919063ffffffff16565b6001600160a01b03821660008051602061176f833981519152148015610cd757506001600160a01b038116600080516020611708833981519152145b15610d91576000806000610ceb8b86610f9c565b91509150600080610d1860008051602061176f833981519152600080516020611708833981519152610f9c565b9092509050610d58600a82900a610a7186610d4c610d3c868963ffffffff6114bb16565b8790600a0a63ffffffff6110c816565b9063ffffffff6110c816565b9450505050506000610d6a8984610f9c565b509050610d8181610a718d8563ffffffff6110c816565b9750949550610d96945050505050565b505050505b935093915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610dca610e62565b610e09576040805162461bcd60e51b81526020600482018190526024820152600080516020611728833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610e7b610e62565b610eba576040805162461bcd60e51b81526020600482018190526024820152600080516020611728833981519152604482015290519081900360640190fd5b610ec3816114fd565b50565b6001600160a01b038216600090815260026020526040812054819015801590610f0657506001600160a01b03831660009081526002602052604090205415155b15610f23575060008051602061176f833981519152905080610f95565b6001600160a01b03841660009081526002602052604090205415610f59575060008051602061176f833981519152905081610f95565b6001600160a01b03831660009081526002602052604090205415610f8f575082905060008051602061176f833981519152610f95565b50829050815b9250929050565b600080826001600160a01b0316846001600160a01b03161415610fc55750600190506000610f95565b6001600160a01b03808516600090815260016020908152604080832087851684528252918290205482516350d25bcd60e01b8152925193169283926350d25bcd926004808301939192829003018186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d602081101561104c57600080fd5b50516040805163313ce56760e01b815290519194506001600160a01b0383169163313ce56791600480820192602092909190829003018186803b15801561109257600080fd5b505afa1580156110a6573d6000803e3d6000fd5b505050506040513d60208110156110bc57600080fd5b50519150509250929050565b6000826110d757506000611124565b828202828482816110e457fe5b04146111215760405162461bcd60e51b81526004018080602001828103825260218152602001806116e76021913960400191505060405180910390fd5b90505b92915050565b6001600160a01b0386166000908152600260205260408120548190861061116e576001600160a01b0388166000908152600260205260409020548603600a0a61118e565b6001600160a01b038816600090815260026020526040902054869003600a0a5b6001600160a01b03891660009081526002602052604090205490915086106111df576111da81610a7185816111cd89600a8c900a63ffffffff6110c816565b8c9063ffffffff6110c816565b6111fe565b6111fe81610d4c85610a716111cd89600a8c900a63ffffffff6110c816565b98975050505050505050565b600061112183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061159d565b6001600160a01b03828116600090815260016020908152604080832060008051602061176f83398151915284529091528120549091829116158015906112c457506001600160a01b03838116600090815260016020908152604080832060008051602061176f83398151915284529091529020541615155b156112e1575060008051602061176f833981519152905080610f95565b6001600160a01b0384811660009081526001602090815260408083206000805160206117088339815191528452909152902054161580159061135557506001600160a01b03838116600090815260016020908152604080832060008051602061170883398151915284529091529020541615155b156113725750600080516020611708833981519152905080610f95565b6001600160a01b038481166000908152600160209081526040808320600080516020611708833981519152845290915290205416158015906113e657506001600160a01b03838116600090815260016020908152604080832060008051602061176f83398151915284529091529020541615155b156114115750600080516020611708833981519152905060008051602061176f833981519152610f95565b6001600160a01b03848116600090815260016020908152604080832060008051602061176f8339815191528452909152902054161580159061148557506001600160a01b03838116600090815260016020908152604080832060008051602061170883398151915284529091529020541615155b156114b0575060008051602061176f8339815191529050600080516020611708833981519152610f95565b506000905080610f95565b600061112183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061163f565b6001600160a01b0381166115425760405162461bcd60e51b81526004018080602001828103825260268152602001806116c16026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081836116295760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156115ee5781810151838201526020016115d6565b50505050905090810190601f16801561161b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161163557fe5b0495945050505050565b600081848411156116915760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156115ee5781810151838201526020016115d6565b50505090039056fe4f7261636c6541676772656761746f723a20746f6b656e4164647265737341206973205a65726f4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724f7261636c6541676772656761746f723a20746f6b656e4164647265737342206973205a65726f0000000000000000000000007354c81fbcb229187480c4f497f945c6a312d5c34f7261636c6541676772656761746f723a2045524332302e646563696d616c73282920726576657274a2646970667358221220b5d0c7a90398e75d68120492bbc844db16fe1d94c71498a6d8d249ad6d0aebfc64736f6c634300060a00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "getExpectedReturnAmount(uint256,address,address)": {
        "details": "Get expected return amount for tokenA / tokenB"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82,
        "contract": "contracts/gelato/OracleAggregator.sol:OracleAggregator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1713,
        "contract": "contracts/gelato/OracleAggregator.sol:OracleAggregator",
        "label": "_tokenPairAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 1717,
        "contract": "contracts/gelato/OracleAggregator.sol:OracleAggregator",
        "label": "_nrOfDecimalsUSD",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
