{"version":3,"sources":["../../contracts/src/abis.js","components/index.js","components/Logo/gelato_logo.svg","components/Logo/gelato_logo_word.svg","components/Logo/index.js","../../contracts/src/addresses.js","graphql/gelatoDCA.js","utils/helpers.js","utils/constants.js","services/stateReads.js","services/stateWrites.js","pages/SubmitTask.js","pages/TaskOverview.js","components/ViewCardWrapper.js","pages/User.js","utils/web3Modal.js","App.js","index.js"],"names":["GelatoDCA","require","module","exports","GelatoKrystalAbi","Header","styled","header","Body","body","ViewCard","div","CardWrapper","Page","img","Button","button","props","background","hidden","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","className","d","transform","points","_ref","svgRef","title","id","viewBox","ref","undefined","ForwardRef","forwardRef","GelatoLogo","style","width","marginRight","addresses","DAI","WETH","GELATO_KRYSTAL","GELATO_GAS_PRICE_ORACLE","GET_GELATO_DCA_TASK_CYCLES","gql","getMiniAddress","BigNumber","from","account","substring","getGasNowGasPrice","a","fetch","response","json","gasNowJson","data","fast","sleep","ms","Promise","resolve","setTimeout","getFormattedNumber","val","ethers","utils","parseUnits","gt","getFormattedToFixed2","formatUnits","parseFloat","toFixed","getTaskStatus","status","console","log","trackTx","hash","Notify","dappId","process","networkId","getTimeAndDate","estimatedExecTime","Date","toTimeString","toString","toLocaleDateString","abis","getUserAddress","provider","getSigner","signer","getAddress","getMiniUserAddress","getGelatoKrystal","user","gelatoKrystalContract","Contract","Error","getTokenAllowance","token","userAddr","tokenContract","allowance","userBalance","getTokenBalance","balanceOf","submitOrder","inToken","outToken","delay","amountPerTrade","numTrades","minSlippage","maxSlippage","platformWallet","platformFeeBps","gelatoKrystal","options","gasPrice","gasLimit","order","submit","submitTx","wait","approveToken","totalAmount","approve","approveTx","cancelCycle","cancel","cancelTx","SubmitTask","userAccount","userAddress","useQuery","variables","skip","toLowerCase","loading","useState","constants","Zero","pendingApproval","setPendingApproval","txLoading","setTxLoading","setTotalAmount","intervalSeconds","setIntervalSeconds","tradeNum","setTradeNum","needsApproval","setNeedsApproval","handleTotalAmountChange","event","newValue","value","handleIntervalSecondsChange","handleTradeNumChange","parseInt","checkIfApprovalRequired","currentApproval","totalAmountBn","gte","add","useEffect","newPendingApproval","cyclesWrappers","forEach","wrapper","cycle","nTradesLeft","getPendingApprovalAmount","cycleWrappers","newPendingApprovalBn","eq","margin","marginBottom","fontSize","maxWidth","type","onChange","defaultValue","onClick","disabled","Styles","TaskOverview","error","refetch","fetchMore","received","txFee","estimatedExecDate","actualExecDate","lastExecLink","submitLink","rowData","setRowData","columns","useMemo","accessor","useTable","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","createRowData","newRows","push","pushEmptyRow","fetchtedUserAddress","pastTrades","completedTrades","sort","b","submissionDate","trade","currentTrade","startDate","executionDate","execUrl","href","executionHash","submitUrl","submissionHash","amountReceived","formatEther","executorFee","borderColor","color","backgroundColor","marginTop","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","e","Number","ViewCardWrapper","User","inputs","setInputs","refresh","inputsUpdates","updateUserAddress","miniUserAddress","userDaiBalance","userUsdcBalance","INFURA_ID","REACT_APP_INFURA_ID","web3Modal","Web3Modal","network","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","infuraId","logoutOfWeb3Modal","clearCachedProvider","window","location","reload","WalletButton","loadWeb3Modal","App","setUserAccount","setUserAddress","useCallback","connect","newuserAccount","Web3Provider","cacheduserAccount","newUserAddress","textDecoration","fontWeight","to","path","exact","client","ApolloClient","uri","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.dc0eefd9.chunk.js","sourcesContent":["const GelatoDCA = require('./abis/GelatoDCA.json');\n\nmodule.exports = {\n  GelatoKrystalAbi: GelatoDCA,\n};\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  background-color: #c8dcec;\n  min-height: 70px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-end;\n  color: white;\n  .gelato-logo {\n    margin-left: 20px;\n    margin-right: auto;\n    text-decoration: 'none';\n    color: white;\n    cursor: pointer;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nexport const Body = styled.body`\n  align-items: center;\n  background-color: #fcfdff;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  justify-content: flex-start;\n  min-height: calc(100vh - 70px);\n  padding-top: 5vh;\n`;\n\nexport const ViewCard = styled.div`\n  align-items: center;\n  text-align: center;\n  background-color: #c8dcec;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  border-radius: 25px;\n  box-shadow: 2px 2px 4px #000000;\n  font-weight: bold;\n  height: 75%;\n  width: 20%;\n  color: #483d8b;\n  p {\n    margin: 0px 0px 8px;\n  }\n`;\n\nexport const CardWrapper = styled.div`\n  align-items: center;\n  background-color: white;\n  display: flex;\n  flex-direction: row;\n  font-size: 1.5vmin;\n  justify-content: space-around;\n  height: 30vh;\n  min-width: 70%;\n  margin-bottom: 24px;\n`;\n\nexport const Image = styled.img`\n  height: 40vmin;\n  margin-bottom: 16px;\n  pointer-events: none;\n`;\n\nexport const Page = styled.div`\n  color: #483d8b;\n  margin: 0px 20px;\n  padding: 12px 24px;\n`;\n\nexport const Button = styled.button`\n  background-color: ${(props) => props.background};\n  border: none;\n  border-radius: 8px;\n  color: #282c34;\n  cursor: pointer;\n  font-size: 16px;\n  text-align: center;\n  text-decoration: none;\n  margin: 0px 20px;\n  padding: 12px 24px;\n\n  ${(props) => props.hidden && 'hidden'} :focus {\n    border: none;\n    outline: none;\n  }\n`;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#f8c5cd;}.cls-2{fill:#f7ac45;}\"));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"title\", null, \"Gelato_Logo_ohne Schatten\");\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M278.12,204.21c-77,41.59-5.66,79.82-5.66,79.82L423,371.49l149.33-86.73s73.18-38.52-4.49-80.55c0,0,.39-151.49-144.89-151.49S278.12,204.21,278.12,204.21Z\",\n  transform: \"translate(-242.38 -52.72)\"\n});\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-2\",\n  points: \"180.63 342.15 19.05 245.61 180.63 474.45 342.2 245.67 180.63 342.15\"\n});\n\nvar SvgGelatoLogo = function SvgGelatoLogo(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Ebene_1\",\n    \"data-name\": \"Ebene 1\",\n    viewBox: \"0 0 361.2 474.45\",\n    ref: svgRef\n  }, props), _ref2, title === undefined ? _ref3 : title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref4, _ref5);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgGelatoLogo, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/gelato_logo.8b1ec51f.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#fff;}\"));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"title\", null, \"Font\");\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Typo\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M202.51,153.76v37c0,5.91-7,10.7-12.2,11.7v-.09a16.09,16.09,0,0,1-4.1.4c-4.1,0-14.3-2.9-14.3-7.21a3.18,3.18,0,0,1,3.1-3.1c1.9,0,4.6,4.1,11.2,4.1,3.3,0,9.1-1.1,10-5.8v-9.1a15,15,0,0,1-10.6,4.1c-9.8,0-16.8-8.7-16.8-18s7-17.9,16.8-17.9a16.29,16.29,0,0,1,10.6,4.1v-.2a3.29,3.29,0,0,1,3.2-3.2A3.14,3.14,0,0,1,202.51,153.76Zm-6.5,14c0-6-4.2-11.6-10.4-11.6s-10.5,5.6-10.5,11.6,4.4,11.7,10.5,11.7S196,173.76,196,167.76Z\",\n  transform: \"translate(-168.81 -124.76)\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M246.31,167.86a3.22,3.22,0,0,1-3.2,3.2h-23.6c1.2,4.8,5,8.5,10,8.5a10.47,10.47,0,0,0,9.1-4.6,3.4,3.4,0,0,1,2.6-1.5,3.14,3.14,0,0,1,3.2,3.1,3.36,3.36,0,0,1-.5,1.6c-2.9,5.2-8.7,7.7-14.4,7.7-9.8,0-16.8-8.7-16.8-18s7-17.9,16.8-17.9S246.31,158.66,246.31,167.86Zm-6.8-3.1c-1.2-4.6-5-8.5-10-8.5s-8.7,3.9-10,8.5Z\",\n  transform: \"translate(-168.81 -124.76)\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M262.81,127.86v54.3a3.11,3.11,0,0,1-3.1,3.1,3.2,3.2,0,0,1-3.2-3.1v-54.3a3.27,3.27,0,0,1,3.2-3.1A3.18,3.18,0,0,1,262.81,127.86Z\",\n  transform: \"translate(-168.81 -124.76)\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M305,153.66v28.2a3.15,3.15,0,1,1-6.3,0v-.4a17.37,17.37,0,0,1-11.1,4.4c-9.8,0-16.8-8.7-16.8-18s7-17.9,16.8-17.9a16.85,16.85,0,0,1,11.1,4.4v-.7a3.15,3.15,0,1,1,6.3,0Zm-7,14.2c0-6-4.2-11.6-10.4-11.6s-10.5,5.6-10.5,11.6,4.4,11.7,10.5,11.7S298,174,298,167.86Z\",\n  transform: \"translate(-168.81 -124.76)\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M333.11,150.56a3.27,3.27,0,0,1,3.1,3.2,3.12,3.12,0,0,1-3.1,3.1H328v25.4a3.15,3.15,0,0,1-6.3,0v-25.4h-4.8a3.14,3.14,0,0,1-3.2-3.1,3.29,3.29,0,0,1,3.2-3.2h4.8v-8.1a3.15,3.15,0,1,1,6.3,0v8.1Z\",\n  transform: \"translate(-168.81 -124.76)\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M375.11,167.76c0,9.4-7,18-16.8,18s-16.8-8.6-16.8-18c0-9.2,7-17.9,16.8-17.9S375.11,158.56,375.11,167.76Zm-6.4,0c0-5.9-4.2-11.5-10.4-11.5s-10.5,5.6-10.5,11.5c0,6.1,4.4,11.7,10.5,11.7S368.71,173.86,368.71,167.76Z\",\n  transform: \"translate(-168.81 -124.76)\"\n}));\n\nvar SvgGelatoLogoWord = function SvgGelatoLogoWord(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 206.3 78.01\",\n    ref: svgRef\n  }, props), _ref2, title === undefined ? _ref3 : title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref4);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgGelatoLogoWord, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/gelato_logo_word.55f86a67.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport { ReactComponent as Logo } from './gelato_logo.svg';\n// Logo Text\nimport { ReactComponent as GelatoLogoWord } from './gelato_logo_word.svg';\nconst GelatoLogo = () => (\n  <>\n    <div\n      style={{\n        width: '35px',\n        marginRight: '16px',\n      }}\n    >\n      {/* Logo is an actual React component */}\n      <Logo />\n    </div>\n    <div\n      style={{\n        width: '80px',\n      }}\n    >\n      <GelatoLogoWord></GelatoLogoWord>\n    </div>\n  </>\n);\n\nexport default GelatoLogo;\n","const addresses = {\n  DAI: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n  WETH: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n  GELATO_KRYSTAL: '0x96A6877Ac1A2E560dF6e50b5bc69B2048F36b059',\n  GELATO_GAS_PRICE_ORACLE: '0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C',\n};\n\nexport default addresses;\n","import { gql } from 'apollo-boost';\n\nconst GET_GELATO_DCA_TASK_CYCLES = gql`\n  query gelatoDCATasks($skip: Int, $userAddress: String!) {\n    cycleWrappers(\n      where: { user: $userAddress }\n      first: 100\n      skip: $skip\n      orderBy: id\n      orderDirection: desc\n    ) {\n      id\n      status\n      startDate\n      numTrades\n      currentTrade {\n        id\n        cycleId\n        status\n        nTradesLeft\n        submissionDate\n        submissionHash\n        executionDate\n        executionHash\n        executor {\n          id\n          addr\n        }\n        executorFee\n        feeToken\n      }\n      completedTrades (\n        orderBy: submissionHash\n        orderDirection: desc) \n      {\n        id\n        cycleId\n        status\n        nTradesLeft\n        submissionDate\n        submissionHash\n        executionDate\n        executionHash\n        executor {\n          id\n          addr\n        }\n        executorFee\n        feeToken\n        amountReceived\n      }\n      cycle {\n        user\n        inToken\n        outToken\n        amountPerTrade\n        nTradesLeft\n        minSlippage\n        maxSlippage\n        delay\n        lastExecutionTime\n        platformWallet\n        platformFeeBps\n      }\n    }\n  }\n`;\n\nexport default GET_GELATO_DCA_TASK_CYCLES;","import { addresses } from '@gelato-krystal/contracts';\nimport Notify from \"bnc-notify\";\nimport { ethers } from 'ethers';\nimport { TASK_HASH } from './constants';\n\n\nconst { MULTI_SEND } = addresses;\n\nexport const getMiniAddress = (account) => {\n  return `${account.substring(0, 6)}...${account.substring(38, 42)}`;\n};\n\nexport const getGasNowGasPrice = async () => {\n  let url = `https://www.gasnow.org/api/v3/gas/price?utm_source=:GELATINO`;\n  try {\n    const response = await fetch(url);\n    const gasNowJson = await response.json();\n    return gasNowJson.data.fast;\n  } catch (error) {}\n};\n\n// operation\n// address\n// value\n// data\nexport const encodeMultiSend = (transactions, signer) => {\n  const multisendAbi = ['function multiSend(bytes transactions) payable'];\n  const multiSend = new ethers.Contract(MULTI_SEND, multisendAbi, signer);\n  let multiSendData = [];\n  transactions.forEach((tx) => {\n    const hashedMultiSendData = ethers.utils.solidityPack(\n      ['uint8', 'address', 'uint256', 'uint256', 'bytes'],\n      [\n        tx.operation, // Operation\n        tx.address, //to\n        tx.value, // value\n        ethers.utils.hexDataLength(tx.data), // data length\n        tx.data, // data\n      ],\n    );\n    multiSendData.push(hashedMultiSendData);\n  });\n\n  const hexlifiedData = ethers.utils.hexlify(\n    ethers.utils.concat(multiSendData),\n  );\n\n  const encodedMultiSendData = multiSend.interface.encodeFunctionData(\n    'multiSend',\n    [hexlifiedData],\n  );\n\n  return encodedMultiSendData;\n};\n\nexport const getTaskHash = (task) => {\n  const conditionsWithoutData = [];\n  for (let condition of task.conditions) {\n    conditionsWithoutData.push(condition.inst);\n  }\n  const actionsWithoutData = [];\n  for (let action of task.actions) {\n    actionsWithoutData.push({\n      addr: action.addr,\n      operation: parseInt(action.operation),\n      dataFlow: parseInt(action.dataFlow),\n      value: parseInt(action.value) == 0 ? false : true,\n      termsOkCheck: action.termsOkCheck,\n    });\n  }\n  const encodedData = ethers.utils.defaultAbiCoder.encode(\n    [\n      'address[] conditionAddresses',\n      'tuple(address addr, uint8 operation, uint8 dataFlow, bool value, bool termsOkCheck)[] noDataActions',\n    ],\n    [conditionsWithoutData, actionsWithoutData],\n  );\n\n  const taskIdentifier = ethers.utils.keccak256(encodedData);\n\n  return taskIdentifier;\n};\n\n// Returns true if task correspons to certain Task Hashes\nexport const isKnownTask = (task) => {\n  return getTaskHash(task) === TASK_HASH;\n};\n\nexport const sleep = (ms) => {\n  return new Promise((resolve) => {\n    // console.log(`\\n\\tSleeping for ${ms / 1000} seconds\\n`);\n    setTimeout(resolve, ms);\n  });\n};\n\nexport const abiEncodeWithSelector = async (args) => {\n  let iface = new ethers.utils.Interface(args.abi);\n  return iface.encodeFunctionData(args.functionname, args.inputs);\n};\n\nexport const getFormattedNumber = async (val) => {\n  if (ethers.utils.parseUnits('1', 16).gt(val)) return 0;\n\n  return getFormattedToFixed2(ethers.utils.formatUnits(val, '18'));\n};\n\nexport const getFormattedToFixed2 = (val) => {\n  return parseFloat(val).toFixed(2);\n};\n\nexport const getABICoder = () => {\n  return new ethers.utils.AbiCoder();\n};\n\nexport const toPercentFormat = (percent) => {\n  return getFormattedToFixed2(percent) + '%';\n};\n\nexport const getDisplayablePercent = (val) => {\n  return val\n    .mul(ethers.BigNumber.from('100'))\n    .div(ethers.utils.parseUnits('1', 18));\n};\n\nexport const decodeWithoutSignature = (valueTypes, data) => {\n  return getABICoder().decode(valueTypes, '0x' + String(data).substring(10));\n};\n\nexport const getTaskStatus = (status) => {\n  console.log(status)\n  switch(status) {\n    case(\"execSuccess\"): \n      return \"executed\"\n    case(\"cancelled\"): \n      return \"cancelled\"\n    case(\"awaitingExec\"):\n      return \"pending\"\n    default:\n      return \"pending\"\n  }\n}\n\nexport const trackTx = (hash) => {\n  if(process.env.REACT_APP_BLOCK_NATIVE) {\n    const notify = Notify({\n      dappId: process.env.REACT_APP_BLOCK_NATIVE, // [String] The API key created by step one above\n      networkId: 1  // [Integer] The Ethereum network ID your Dapp uses.\n    });\n    // Track Tx progress\n    notify.hash(hash)\n\n  }\n\n  \n}\n\nexport const getPendingApprovalAmount = (cyclesWrappers) => {\n  let pendingApproval = 0\n  cyclesWrappers.forEach((wrapper) => {\n    const cycle = wrapper.cycle\n    if(wrapper.status === \"awaitingExec\")\n      pendingApproval = pendingApproval + (parseInt(cycle.amountPerTrade) * parseInt(cycle.nTradesLeft))\n  })\n  return pendingApproval\n}\n\nexport const getTimeAndDate = (estimatedExecTime) => {\n  return `${new Date(estimatedExecTime * 1000)\n    .toTimeString()\n    .toString().substring(0, 8)} ${new Date(estimatedExecTime * 1000)\n      .toLocaleDateString()\n      .toString()}`\n}\n","import { BigNumber } from 'ethers';\n\nexport const GAS_LIMIT_CETH_TO_AETH = BigNumber.from('1500000');\nexport const TASK_HASH =\n  '0x002c15248f32f06585d01ab4f7aefc307defaf5d66226f1416f8126a3c209c63';\nexport const PRICE_ORACLE_MAKER_PAYLOAD = '0x57de26a4';\nexport const ETH = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\n","import { ethers } from 'ethers';\nimport { getMiniAddress } from '../utils/helpers';\nimport { addresses, abis } from '@gelato-krystal/contracts';\n\nconst { GELATO_GAS_PRICE_ORACLE, GELATO_KRYSTAL } = addresses;\nconst { GelatoKrystalAbi } = abis;\n\nexport const getUserAddress = async (provider) => {\n  const signer = await provider.getSigner();\n  return await signer.getAddress();\n};\n\nexport const getMiniUserAddress = async (provider) => {\n  return getMiniAddress(await getUserAddress(provider));\n};\n\nexport const getGelatoKrystal = async (user) => {\n  const signer = await user.getSigner();\n  let gelatoKrystalContract;\n  try {\n    gelatoKrystalContract = new ethers.Contract(\n      GELATO_KRYSTAL,\n      GelatoKrystalAbi,\n      signer,\n    );\n  } catch (err) {\n    console.log(err);\n    throw Error('Cannot instantiate GelatoKrystal');\n  }\n  return gelatoKrystalContract;\n};\n\nexport const getGelatoGasPrice = async (user) => {\n  const signer = await user.getSigner();\n  const gelatoGasPriceOracle = new ethers.Contract(\n    GELATO_GAS_PRICE_ORACLE,\n    ['function latestAnswer() view returns (int256)'],\n    signer,\n  );\n\n  // latestAnswer is used by GelatoGasPriceOracle as well as the Chainlink Oracle\n  return await gelatoGasPriceOracle.latestAnswer();\n};\n\nexport const getTokenAllowance = async (user, token) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n\n  const tokenContract = new ethers.Contract(\n    token,\n    ['function allowance(address,address) view returns (uint256)'],\n    signer,\n  );\n  const userBalance = await tokenContract.allowance(userAddr, GELATO_KRYSTAL);\n  return userBalance;\n};\n\nexport const getTokenBalance = async (user, token) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n\n  const tokenContract = new ethers.Contract(\n    token,\n    ['function balanceOf(address) view returns (uint256)'],\n    signer,\n  );\n  const userBalance = await tokenContract.balanceOf(userAddr);\n  return userBalance;\n};\n\nexport const getTokenBalanceString = async (\n  userAccount,\n  token,\n  tokenSymbol,\n  decimals,\n) => {\n  const userBalance = await getTokenBalance(userAccount, token);\n  const userBalanceHumanReadable = ethers.utils.formatUnits(\n    userBalance,\n    decimals,\n  );\n  return `${parseFloat(userBalanceHumanReadable).toFixed(8)} ${tokenSymbol}`;\n};\n","import { addresses } from '@gelato-krystal/contracts';\nimport { ethers } from 'ethers';\nimport { getGasNowGasPrice, trackTx } from '../utils/helpers';\nimport { getGelatoKrystal } from './stateReads';\nconst { GELATO_KRYSTAL } = addresses;\n\nexport const submitOrder = async (\n  user,\n  inToken,\n  outToken,\n  delay,\n  amountPerTrade,\n  numTrades,\n  minSlippage = 1000, // dived by 10.000 onchain => 10%\n  maxSlippage = 5000, // dived by 10.000 onchain => 50%\n  platformWallet = \"0x9f0e45144739ae836553e66Ee625534C38a9F7F2\",\n  platformFeeBps = 25, // 0.25%\n) => {\n  const gelatoKrystal = await getGelatoKrystal(user);\n\n  const options = {\n    gasPrice: await getGasNowGasPrice(),\n    gasLimit: 100000,\n  };\n  const order = {\n    inToken: inToken,\n    outToken: outToken,\n    amountPerTrade: amountPerTrade,\n    numTrades: numTrades,\n    minSlippage: minSlippage,\n    maxSlippage: maxSlippage,\n    delay: delay,\n    platformWallet: platformWallet,\n    platformFeeBps: platformFeeBps,\n  };\n  try {\n    const submitTx = await gelatoKrystal.submit(\n      order,\n      false,\n      options,\n    );\n    trackTx(submitTx.hash)\n    await submitTx.wait();\n  } catch (err) {\n    console.log(err);\n    console.log('Submit Krystal DCA failed');\n  }\n};\n\nexport const approveToken = async (user, inToken, totalAmount) => {\n  const signer = await user.getSigner();\n  const token = new ethers.Contract(\n    inToken,\n    ['function approve(address _spender, uint256 _amount)'],\n    signer,\n  );\n\n  const options = {\n    gasPrice: await getGasNowGasPrice(),\n  };\n\n  try {\n    const approveTx = await token.approve(GELATO_KRYSTAL, totalAmount, options);\n    trackTx(approveTx.hash)\n    await approveTx.wait();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const cancelCycle = async (provider, order, id) => {\n  const gelatoKrystal = await getGelatoKrystal(provider);\n\n  const options = {\n    gasPrice: await getGasNowGasPrice(),\n    gasLimit: 100000,\n  };\n  try {\n    const cancelTx = await gelatoKrystal.cancel(\n      order,\n      id,\n      options,\n    );\n    trackTx(cancelTx.hash)\n    await cancelTx.wait();\n  } catch (err) {\n    console.log(err);\n    console.log('Cancel DCA failed');\n  }\n}\n","import { useQuery } from '@apollo/react-hooks';\nimport { addresses } from '@gelato-krystal/contracts';\nimport { BigNumber, ethers } from 'ethers';\nimport React, { useEffect, useState } from 'react';\nimport { Button, CardWrapper, ViewCard } from '../components';\nimport GET_GELATO_DCA_TASK_CYCLES from '../graphql/gelatoDCA';\nimport { getTokenAllowance } from '../services/stateReads';\nimport { approveToken, submitOrder } from '../services/stateWrites';\nimport { getPendingApprovalAmount } from '../utils/helpers';\nconst { DAI, WETH } = addresses;\n\n\nconst SubmitTask = ({ userAccount, userAddress }) => {\n  // get data from subgraph\n  const { loading, data,  } = useQuery(\n    GET_GELATO_DCA_TASK_CYCLES,\n    {\n      variables: {\n        skip: 0,\n        userAddress: userAddress.toLowerCase(),\n      },\n    },\n  );\n\n  // internal state\n  const [pendingApproval, setPendingApproval] = useState(ethers.constants.Zero);\n  const [txLoading, setTxLoading] = useState(false);\n  const [totalAmount, setTotalAmount] = useState(30);\n  const [intervalSeconds, setIntervalSeconds] = useState(120);\n  const [tradeNum, setTradeNum] = useState(3);\n  const [needsApproval, setNeedsApproval] = useState(true);\n\n  const handleTotalAmountChange = async (event) => {\n    const newValue = event.target.value;\n    if (newValue=== '') setTotalAmount(0);\n    else\n      setTotalAmount(newValue);\n  };\n\n  const handleIntervalSecondsChange = async (event) => {\n    const newValue = event.target.value;\n    setIntervalSeconds(newValue);\n  };\n\n  const handleTradeNumChange = async (event) => {\n    const newValue = event.target.value;\n    setTradeNum(newValue);\n  };\n\n  const submit = async () => {\n    if (totalAmount === 0) {\n      console.log('Insufficient total amount');\n      return;\n    }\n\n    if (intervalSeconds === 0) {\n      console.log('0 Interval seconds not allowed');\n      return;\n    }\n    if (parseInt(tradeNum) > 10) {\n      console.log('Max Trade Number is 10');\n      return;\n    }\n\n    await submitOrder(\n      userAccount,\n      DAI,\n      WETH,\n      intervalSeconds,\n      ethers.utils.parseUnits(totalAmount, '18').div(BigNumber.from(tradeNum)),\n      tradeNum,\n    );\n  };\n\n  const approve = async () => {\n    if (totalAmount === 0) {\n      console.log('Insufficient total amount');\n      return;\n    }\n\n    await approveToken(\n      userAccount,\n      DAI,\n      ethers.utils.parseUnits(totalAmount, '18'),\n    );\n  };\n\n  const checkIfApprovalRequired = async() => {\n    const currentApproval = await getTokenAllowance(userAccount, DAI)\n    const totalAmountBn = ethers.utils.parseUnits(totalAmount.toString(), '18')\n    \n    // If currentApproval are greater than pendingApprovals plus totalamountBn, then no need to approva again\n    console.log(`Current Approvals: ${currentApproval.toString()}`)\n    console.log(`Pending Approvals: ${pendingApproval.toString()}`)\n    console.log(`Total amount: ${totalAmountBn.toString()}`)\n    if(currentApproval.gte(totalAmountBn.add(pendingApproval))) {\n      setNeedsApproval(false)\n    } else {\n      setNeedsApproval(true)\n    }\n  }\n  \n  /* eslint-disable react-hooks/exhaustive-deps */ \n  useEffect(() => {\n    if (data) {\n      const newPendingApproval = getPendingApprovalAmount(data.cycleWrappers)\n      const newPendingApprovalBn = ethers.BigNumber.from(newPendingApproval.toString())\n      if(!newPendingApprovalBn.eq(pendingApproval)) setPendingApproval(newPendingApprovalBn)\n    }\n      \n  }, [loading, pendingApproval, totalAmount])\n  \n  useEffect(() => {\n    checkIfApprovalRequired()\n  }, [pendingApproval, totalAmount])\n\n  return (\n    <>\n      <CardWrapper>\n        <ViewCard>\n          <label style={{ margin: '10px' }}>\n            Total Amount of DAI to sell for WETH \n          </label>\n          <label style={{ marginBottom: '8px', fontSize: '10px' }}>\n          (min. 300 DAI, more is better)\n          </label>\n\n\n          <input\n            style={{ maxWidth: '80%' }}\n            type=\"number\"\n            value={totalAmount}\n            onChange={handleTotalAmountChange}\n            defaultValue={100}\n          />\n        </ViewCard>\n\n        <ViewCard>\n          <label style={{ margin: '10px' }}>\n            Interval between each trade (in seconds)\n          </label>\n\n          <input\n            style={{ maxWidth: '80%' }}\n            type=\"number\"\n            value={intervalSeconds}\n            onChange={handleIntervalSecondsChange}\n            defaultValue={240}\n          />\n        </ViewCard>\n\n        <ViewCard>\n          <label style={{ margin: '10px' }}>\n            Number of trades to split the total amount up\n          </label>\n\n          <input\n            style={{ maxWidth: '80%' }}\n            type=\"number\"\n            value={tradeNum}\n            onChange={handleTradeNumChange}\n            defaultValue={3}\n          />\n        </ViewCard>\n      </CardWrapper>\n      <CardWrapper>\n        <ViewCard>\n          <label style={{ margin: '10px' }}>\n            {`Approve ${parseFloat(totalAmount).toFixed(3)} DAI`}\n          </label>\n          {!txLoading && needsApproval && (\n            <>\n              <Button\n                onClick={async () => {\n                  setTxLoading(true);\n                  try {\n                    await approve();\n                    setNeedsApproval(false);\n                    setTxLoading(false);\n                  } catch {\n                    setTxLoading(false);\n                  }\n                }}\n              >\n                {`Approve`}\n              </Button>\n            </>\n          )}\n          { !needsApproval && (\n            `✅`\n          )}\n          {txLoading && <p>waiting...</p>}\n        </ViewCard>\n        <ViewCard>\n          <label style={{ margin: '10px' }}>\n            {`Execute ${tradeNum} trades, each worth ${parseFloat(\n              totalAmount / tradeNum,\n            ).toFixed(3)} DAI`}\n          </label>\n          {!txLoading && !needsApproval && (\n            <Button\n              disabled={needsApproval}\n              onClick={async () => {\n                setTxLoading(true);\n                try {\n                  await submit();\n                  setTxLoading(false);\n                } catch {\n                  setTxLoading(false);\n                }\n              }}\n            >\n              {`Submit Task`}\n            </Button>\n          )}\n          {txLoading && <p>waiting...</p>}\n        </ViewCard>\n      </CardWrapper>\n    </>\n  );\n};\n\nexport default SubmitTask;\n","// Graph QL Query\nimport { useQuery } from '@apollo/react-hooks';\nimport { utils } from 'ethers';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { usePagination, useSortBy, useTable } from 'react-table';\n// Styled components\nimport styled from 'styled-components';\nimport { Button, CardWrapper } from '../components';\nimport GET_GELATO_DCA_TASK_CYCLES from '../graphql/gelatoDCA';\nimport { cancelCycle } from '../services/stateWrites';\nimport { getTaskStatus, getTimeAndDate, sleep } from '../utils/helpers';\n\nconst pushEmptyRow = (newRows) => {\n  return newRows.push({\n    id: '',\n    status: '',\n    amountPerTrade: '',\n    received: '',\n    txFee: '',\n    estimatedExecDate: '',\n    actualExecDate: '',\n    lastExecLink:'',\n    submitLink: '',\n    cancel: ''\n  });\n}\n\nconst Styles = styled.div`\n  padding: 1rem;\n  font-size: 1rem;\n  color: black;\n\n  table {\n    border-spacing: 0;\n    border: 2px solid #4299e1;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      text-align: center;\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid #4299e1;\n      border-right: 1px solid #4299e1;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nconst TaskOverview = ({ userAddress, userAccount }) => {\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_GELATO_DCA_TASK_CYCLES,\n    {\n      variables: {\n        skip: 0,\n        userAddress: userAddress.toLowerCase(),\n      },\n    },\n  );\n\n  const [rowData, setRowData] = useState([\n    {\n      id: '',\n      user: '',\n      amountPerTrade: '',\n      received: '',\n      txFee: '',\n      status: '',\n      estimatedExecDate: '',\n      actualExecDate: '',\n      lastExecLink: '',\n      submitLink: '',\n    },\n  ]);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: '#',\n        accessor: 'id', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Trade Status',\n        accessor: 'status',\n      },\n      {\n        Header: 'Sell Amount',\n        accessor: 'amountPerTrade',\n      },\n      {\n        Header: 'Received',\n        accessor: 'received',\n      },\n      {\n        Header: 'Tx fee',\n        accessor: 'txFee',\n      },\n      {\n        Header: 'Estimated Exec Date',\n        accessor: 'estimatedExecDate',\n      },\n      {\n        Header: 'Actual Exec Date',\n        accessor: 'actualExecDate',\n      },\n      {\n        Header: 'Exec Link',\n        accessor: 'lastExecLink',\n      },\n      {\n        Header: 'Submit Link',\n        accessor: 'submitLink',\n      },\n      {\n        Header: 'Cancel Task',\n        accessor: 'cancel',\n      },\n    ],\n    [],\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize }\n  } = useTable({ columns, data: rowData }, useSortBy, usePagination);\n\n  const createRowData = (data) => {\n    const newRows = [];\n    // Filter all tasks by known Tash Hashes\n    let id = 0;\n    for (let wrapper of data.cycleWrappers) {\n      pushEmptyRow(newRows)\n      const fetchtedUserAddress = wrapper.cycle.user\n      if (\n        utils.getAddress(userAddress) !== utils.getAddress(fetchtedUserAddress)\n      ) {\n        continue;\n      }\n      for(let i = 0; i < wrapper.numTrades; i++) {\n        id = id + 1;\n        const pastTrades = wrapper.completedTrades\n        if(pastTrades) {\n          pastTrades.sort((a,b)  => {\n            return a.submissionDate - b.submissionDate\n          })\n        }\n        const trade = pastTrades && pastTrades[i] ? pastTrades[i] : i === 0 ? wrapper.currentTrade : undefined\n        const estimatedExecTime = parseInt(wrapper.startDate) + ((1 + i) * parseInt(wrapper.cycle.delay))\n        const estimatedExecDate = getTimeAndDate(estimatedExecTime)\n        const actualExecDate = trade && trade.executionDate ? getTimeAndDate(trade.executionDate) : ''\n        // let upcomingTrade;\n        // let execUrl;\n        // let submitUrl;\n        const execUrl = trade  && trade.executionDate ? (\n          <a target=\"_blank\" href={`https://etherscan.io/tx/${trade.executionHash}`}>\n            Link\n          </a>\n        ) : '';\n        const submitUrl = trade ? (<a target=\"_blank\" href={`https://etherscan.io/tx/${trade.submissionHash}` }>\n        Link\n        </a>\n         ): '';\n        const status = trade ? getTaskStatus(trade.status)  : wrapper.status === \"cancelled\" ? 'cancelled' : 'pending'\n        console.log(trade)\n        const received = trade && trade.amountReceived ? `${parseFloat(utils.formatEther(trade.amountReceived)).toFixed(4)} WETH` : ''\n        const txFee = trade && trade.executorFee ? `${parseFloat(utils.formatEther(trade.executorFee)).toFixed(4)} DAI` : ''\n\n        newRows.push({\n          id: id,\n          status: status,\n          amountPerTrade: `${parseFloat(utils.formatEther(wrapper.cycle.amountPerTrade)).toFixed(4)} DAI`,\n          received: received,\n          txFee: txFee,\n          estimatedExecDate: estimatedExecDate,\n          actualExecDate: actualExecDate,\n          lastExecLink: execUrl,\n          submitLink: submitUrl,\n          cancel:\n            trade && trade.status === 'awaitingExec' ? (\n              <>\n                <button\n                  style={{\n                    borderColor: 'white',\n                    color: 'white',\n                    backgroundColor: '#4299e1',\n                  }}\n                  onClick={async () => {\n                    try {\n                      await cancelCycle(\n                        userAccount,\n                        wrapper.cycle,\n                        wrapper.id\n                      );\n                    } catch (err) {\n                      console.log(err);\n                    }\n                  }}\n                >\n                  Cancel\n                </button>\n              </>\n            ) : (\n              ''\n            ),\n        });\n      }\n      \n    }\n    return newRows;\n  };\n\n  useEffect(() => {\n    if (data) {\n      const newRows = createRowData(data);\n      if (newRows.length > 0) setRowData(newRows);\n    }\n  }, [data]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error)\n    return <p>Error fetching Gelato Subgraph, please refresh the page :)</p>;\n  return (\n    <>\n      <CardWrapper style={{ maxWidth: '100%', marginTop: '8vh' }}>\n        <Styles>\n          <table {...getTableProps()}>\n            <thead>\n              {\n                // Loop over the header rows\n                headerGroups.map((headerGroup) => (\n                  // Apply the header row props\n                  <tr {...headerGroup.getHeaderGroupProps()}>\n                    {\n                      // Loop over the headers in each row\n                      headerGroup.headers.map((column) => (\n                        // Apply the header cell props\n                        <th\n                          {...column.getHeaderProps(\n                            column.getSortByToggleProps(),\n                          )}\n                        >\n                          {\n                            // Render the header\n                            column.render('Header')\n                          }\n                          <span>\n                            {column.isSorted\n                              ? column.isSortedDesc\n                                ? ' 🔽'\n                                : ' 🔼'\n                              : ''}\n                          </span>\n                        </th>\n                      ))\n                    }\n                  </tr>\n                ))\n              }\n            </thead>\n            {/* Apply the table body props */}\n            <tbody {...getTableBodyProps()}>\n              {\n                // Loop over the table rows\n                page.map((row) => {\n                  // Prepare the row for display\n                  prepareRow(row);\n                  return (\n                    // Apply the row props\n                    <tr {...row.getRowProps()}>\n                      {\n                        // Loop over the rows cells\n                        row.cells.map((cell) => {\n                          // Apply the cell props\n                          return (\n                            <td {...cell.getCellProps()}>\n                              {\n                                // Render the cell contents\n                                cell.render('Cell')\n                              }\n                            </td>\n                          );\n                        })\n                      }\n                    </tr>\n                  );\n                })\n              }\n            </tbody>\n          </table>\n          <div className=\"pagination\">\n            <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n              {'<<'}\n            </button>{' '}\n            <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n              {'<'}\n            </button>{' '}\n            <button onClick={() => nextPage()} disabled={!canNextPage}>\n              {'>'}\n            </button>{' '}\n            <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n              {'>>'}\n            </button>{' '}\n            <span>\n              Page{' '}\n              <strong>\n                {pageIndex + 1} of {pageOptions.length}\n              </strong>{' '}\n            </span>\n            <span>\n              | Go to page:{' '}\n              <input\n                type=\"number\"\n                defaultValue={pageIndex + 1}\n                onChange={e => {\n                  const page = e.target.value ? Number(e.target.value) - 1 : 0\n                  gotoPage(page)\n                }}\n                style={{ width: '100px' }}\n              />\n            </span>{' '}\n            <select\n              value={pageSize}\n              onChange={e => {\n                setPageSize(Number(e.target.value))\n              }}\n            >\n              {[10, 20, 30, 40, 50].map(pageSize => (\n                <option key={pageSize} value={pageSize}>\n                  Show {pageSize}\n                </option>\n              ))}\n            </select>\n          </div>\n        </Styles>\n        <Button\n          background=\"#4299e1\"\n          onClick={async () => {\n            refetch();\n            setRowData([\n              {\n                id: '',\n                user: '',\n                amountPerTrade: '',\n                received: '',\n                txFee: '',\n                status: '',\n                estimatedExecDate: '',\n                actualExecDate: '',\n                lastExecLink: '',\n                submitLink: '',\n                \n              },\n            ]);\n            await sleep(1000);\n            setRowData(createRowData(data));\n          }}\n        >\n          Refresh\n        </Button>\n      </CardWrapper>\n    </>\n  );\n};\n\nexport default TaskOverview;\n","import React from 'react';\nimport { ViewCard } from '../components';\n\nconst ViewCardWrapper = ({ title, state }) => {\n  return (\n    <ViewCard>\n      <p>{title}</p>\n      <p>{state}</p>\n    </ViewCard>\n  );\n};\n\nexport default ViewCardWrapper;\n","import React, { useState, useEffect } from 'react';\nimport { CardWrapper } from '../components';\nimport InputCard from '../components/InputCard';\nimport ViewCardWrapper from '../components/ViewCardWrapper';\nimport ViewCardButton from '../components/ViewCardButton';\nimport { getMiniUserAddress, getTokenBalance } from '../services/stateReads';\nimport { getFormattedNumber } from '../utils/helpers';\nimport { addresses } from '@gelato-krystal/contracts';\n\nconst { DAI, WETH } = addresses;\n\nconst User = ({ userAccount }) => {\n  const [inputs, setInputs] = useState({});\n  const [refresh, setRefresh] = useState(false);\n\n  const inputsUpdates = async () => {\n    const miniUserAddress = await updateUserAddress();\n    const userDaiBalance = await getFormattedNumber(\n      await getTokenBalance(userAccount, DAI),\n    );\n    const userUsdcBalance = await getFormattedNumber(\n      await getTokenBalance(userAccount, WETH),\n    );\n\n    setInputs({\n      ...inputs,\n      userAddress: miniUserAddress,\n      userDaiBalance: userDaiBalance,\n      userUsdcBalance: userUsdcBalance,\n    });\n  };\n\n  const updateUserAddress = async () => {\n    return await getMiniUserAddress(userAccount);\n  };\n\n  useEffect(() => {\n    inputsUpdates();\n  }, [refresh]);\n\n  return (\n    <>\n      <CardWrapper>\n        <ViewCardWrapper\n          title=\"User Address\"\n          state={inputs.userAddress}\n        ></ViewCardWrapper>\n      </CardWrapper>\n      <CardWrapper>\n        <ViewCardWrapper\n          title=\"DAI Balance\"\n          state={inputs.userDaiBalance}\n        ></ViewCardWrapper>\n        <ViewCardWrapper\n          title=\"WETH Balance\"\n          state={inputs.userUsdcBalance}\n        ></ViewCardWrapper>\n      </CardWrapper>\n    </>\n  );\n};\n\nexport default User;\n","import Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\n\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = process.env.REACT_APP_INFURA_ID;\n\n// Web3Modal also supports many other wallets.\n// You can see other options at https://github.com/Web3Modal/web3modal\nexport const web3Modal = new Web3Modal({\n  network: 'mainnet',\n  cacheProvider: true,\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider,\n      options: {\n        infuraId: INFURA_ID,\n      },\n    },\n  },\n});\n\nexport const logoutOfWeb3Modal = async function () {\n  await web3Modal.clearCachedProvider();\n  window.location.reload();\n};\n","/* eslint-disable */\nimport { Web3Provider } from '@ethersproject/providers';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n\n\n  Link,\n  Redirect, Route, Switch\n} from 'react-router-dom';\nimport { Body, Button, CardWrapper, Header, Page } from './components';\nimport GelatoLogo from './components/Logo';\nimport SubmitTask from './pages/SubmitTask';\nimport TaskOverview from './pages/TaskOverview';\nimport User from './pages/User';\nimport { logoutOfWeb3Modal, web3Modal } from './utils/web3Modal';\n\n\n\n\nfunction WalletButton({ userAccount, loadWeb3Modal }) {\n  return (\n    <Button\n      onClick={() => {\n        if (!userAccount) {\n          loadWeb3Modal();\n        } else {\n          logoutOfWeb3Modal();\n        }\n      }}\n    >\n      {!userAccount ? 'Connect Wallet' : 'Disconnect Wallet'}\n    </Button>\n  );\n}\n\nfunction App() {\n  const [userAccount, setUserAccount] = useState();\n  const [userAddress, setUserAddress] = useState();\n\n  /* Open wallet selection modal. */\n  const loadWeb3Modal = useCallback(async () => {\n    const newuserAccount = await web3Modal.connect();\n    //console.log((new ethers.providers.Web3Provider(newuserAccount)).getSigner());\n    setUserAccount(new Web3Provider(newuserAccount));\n  }, []);\n\n  /* If user has loaded a wallet before, load it automatically. */\n  useEffect(() => {\n    if (web3Modal.cacheduserAccount) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const updateUserAddress = async () => {\n    const signer = await userAccount.getSigner();\n    const newUserAddress = await signer.getAddress();\n    if (userAddress !== newUserAddress) setUserAddress(newUserAddress);\n  };\n\n  useEffect(() => {\n    if (userAccount) updateUserAddress();\n  });\n\n  return (\n    <div>\n      <Router>\n        <Header>\n          <div className=\"gelato-logo\">\n            <GelatoLogo></GelatoLogo>\n          </div>\n          {userAccount && userAddress && (\n            <>\n              <Page>\n                <Link\n                  style={{\n                    color: '#483D8B',\n                    textDecoration: 'none',\n                    fontWeight: 'bold',\n                  }}\n                  to=\"/\"\n                >\n                  User\n                </Link>\n              </Page>\n              <Page>\n                <Link\n                  style={{\n                    color: '#483D8B',\n                    textDecoration: 'none',\n                    fontWeight: 'bold',\n                  }}\n                  to=\"/submit-task\"\n                >\n                  Submit Task\n                </Link>\n              </Page>\n              <Page>\n                <Link\n                  style={{\n                    color: '#483D8B',\n                    textDecoration: 'none',\n                    fontWeight: 'bold',\n                  }}\n                  to=\"/task-overview\"\n                >\n                  Task Overview\n                </Link>\n              </Page>\n            </>\n          )}\n          <WalletButton\n            userAccount={userAccount}\n            loadWeb3Modal={loadWeb3Modal}\n          />\n        </Header>\n        <Body>\n          <Switch>\n            {!userAccount && (\n              <Route path=\"/\">\n                <CardWrapper>\n                  <h3 style={{ color: '#4299e1' }}>Please login</h3>\n                </CardWrapper>\n              </Route>\n            )}\n            {userAccount && (\n              <>\n                <Route path=\"/submit-task\">\n                  {userAccount && userAddress && (\n                    <SubmitTask userAccount={userAccount} userAddress={userAddress}></SubmitTask>\n                  )}\n                </Route>\n                <Route path=\"/task-overview\">\n                  {userAccount && userAddress && (\n                    <TaskOverview\n                      userAccount={userAccount}\n                      userAddress={userAddress}\n                    ></TaskOverview>\n                  )}\n                </Route>\n                <Route exact path=\"/\">\n                  <User userAccount={userAccount}></User>\n                </Route>\n\n                {/*Redirect all 404's to home*/}\n                <Redirect to=\"/\" />\n              </>\n            )}\n          </Switch>\n        </Body>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport './index.css';\nimport App from './App';\n\n// You should replace this url with your own and put it into a .env file\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  uri: `https://api.thegraph.com/subgraphs/name/gelatodigital/gelato-dca`\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}