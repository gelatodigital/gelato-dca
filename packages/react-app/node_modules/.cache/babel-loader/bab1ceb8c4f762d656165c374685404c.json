{"ast":null,"code":"/*\nstruct Provider {\n    address addr;  //  if msg.sender == provider => self-Provider\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\n}\n\nstruct Condition {\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\n    bytes data;  // can be bytes32(0) for self-conditional Actions\n}\n\nenum Operation { Call, Delegatecall }\n\nstruct Action {\n    address addr;\n    bytes data;\n    Operation operation;\n    uint256 value;\n    bool termsOkCheck;\n}\n\n\nstruct TaskReceipt {\n    uint256 id;\n    address userProxy;\n    Task task;\n}\n */\nfunction convertTaskReceiptObjToArray(taskReceiptObj) {\n  const tasks = _convertToArrayOfTaskArrays(taskReceiptObj.tasks);\n\n  const taskReceiptArray = [taskReceiptObj.id, taskReceiptObj.userProxy, _convertToProviderArray(taskReceiptObj.provider), taskReceiptObj.index, tasks, taskReceiptObj.expiryDate, taskReceiptObj.cycleId, taskReceiptObj.submissionsLeft];\n  return taskReceiptArray;\n}\n\nfunction _convertToProviderArray(providerObj) {\n  const providerArray = [providerObj.addr, providerObj.module];\n  return providerArray;\n}\n\nfunction _convertToArrayOfTaskArrays(arrayOfTaskObjs) {\n  const tasks = [];\n\n  for (const taskObj of arrayOfTaskObjs) {\n    const taskArray = [_convertToArrayOfConditionArrays(taskObj.conditions), _convertToArrayOfActionArrays(taskObj.actions), taskObj.selfProviderGasLimit, taskObj.selfProviderGasPriceCeil];\n    tasks.push(taskArray);\n  }\n\n  return tasks;\n}\n\nfunction _convertToArrayOfConditionArrays(arrayOfConditionObjs) {\n  const conditions = [];\n\n  for (const conditionObj of arrayOfConditionObjs) {\n    const conditionArray = [conditionObj.inst, conditionObj.data];\n    conditions.push(conditionArray);\n  }\n\n  return conditions;\n}\n\nfunction _convertToArrayOfActionArrays(arrayOfActionObjs) {\n  const actions = [];\n\n  for (const actionObj of arrayOfActionObjs) {\n    const actionArray = [actionObj.addr, actionObj.data, actionObj.operation, actionObj.dataFlow, actionObj.value, actionObj.termsOkCheck];\n    actions.push(actionArray);\n  }\n\n  return actions;\n}\n\nmodule.exports = convertTaskReceiptObjToArray;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/node_modules/@gelatonetwork/core/src/helpers/gelato/convertTaskReceiptObjToArray.js"],"names":["convertTaskReceiptObjToArray","taskReceiptObj","tasks","_convertToArrayOfTaskArrays","taskReceiptArray","id","userProxy","_convertToProviderArray","provider","index","expiryDate","cycleId","submissionsLeft","providerObj","providerArray","addr","module","arrayOfTaskObjs","taskObj","taskArray","_convertToArrayOfConditionArrays","conditions","_convertToArrayOfActionArrays","actions","selfProviderGasLimit","selfProviderGasPriceCeil","push","arrayOfConditionObjs","conditionObj","conditionArray","inst","data","arrayOfActionObjs","actionObj","actionArray","operation","dataFlow","value","termsOkCheck","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,4BAAT,CAAsCC,cAAtC,EAAsD;AACpD,QAAMC,KAAK,GAAGC,2BAA2B,CAACF,cAAc,CAACC,KAAhB,CAAzC;;AAEA,QAAME,gBAAgB,GAAG,CACvBH,cAAc,CAACI,EADQ,EAEvBJ,cAAc,CAACK,SAFQ,EAGvBC,uBAAuB,CAACN,cAAc,CAACO,QAAhB,CAHA,EAIvBP,cAAc,CAACQ,KAJQ,EAKvBP,KALuB,EAMvBD,cAAc,CAACS,UANQ,EAOvBT,cAAc,CAACU,OAPQ,EAQvBV,cAAc,CAACW,eARQ,CAAzB;AAWA,SAAOR,gBAAP;AACD;;AAED,SAASG,uBAAT,CAAiCM,WAAjC,EAA8C;AAC5C,QAAMC,aAAa,GAAG,CAACD,WAAW,CAACE,IAAb,EAAmBF,WAAW,CAACG,MAA/B,CAAtB;AACA,SAAOF,aAAP;AACD;;AAED,SAASX,2BAAT,CAAqCc,eAArC,EAAsD;AACpD,QAAMf,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMgB,OAAX,IAAsBD,eAAtB,EAAuC;AACrC,UAAME,SAAS,GAAG,CAChBC,gCAAgC,CAACF,OAAO,CAACG,UAAT,CADhB,EAEhBC,6BAA6B,CAACJ,OAAO,CAACK,OAAT,CAFb,EAGhBL,OAAO,CAACM,oBAHQ,EAIhBN,OAAO,CAACO,wBAJQ,CAAlB;AAMAvB,IAAAA,KAAK,CAACwB,IAAN,CAAWP,SAAX;AACD;;AACD,SAAOjB,KAAP;AACD;;AAED,SAASkB,gCAAT,CAA0CO,oBAA1C,EAAgE;AAC9D,QAAMN,UAAU,GAAG,EAAnB;;AACA,OAAK,MAAMO,YAAX,IAA2BD,oBAA3B,EAAiD;AAC/C,UAAME,cAAc,GAAG,CAACD,YAAY,CAACE,IAAd,EAAoBF,YAAY,CAACG,IAAjC,CAAvB;AACAV,IAAAA,UAAU,CAACK,IAAX,CAAgBG,cAAhB;AACD;;AACD,SAAOR,UAAP;AACD;;AAED,SAASC,6BAAT,CAAuCU,iBAAvC,EAA0D;AACxD,QAAMT,OAAO,GAAG,EAAhB;;AACA,OAAK,MAAMU,SAAX,IAAwBD,iBAAxB,EAA2C;AACzC,UAAME,WAAW,GAAG,CAClBD,SAAS,CAAClB,IADQ,EAElBkB,SAAS,CAACF,IAFQ,EAGlBE,SAAS,CAACE,SAHQ,EAIlBF,SAAS,CAACG,QAJQ,EAKlBH,SAAS,CAACI,KALQ,EAMlBJ,SAAS,CAACK,YANQ,CAApB;AAQAf,IAAAA,OAAO,CAACG,IAAR,CAAaQ,WAAb;AACD;;AACD,SAAOX,OAAP;AACD;;AAEDP,MAAM,CAACuB,OAAP,GAAiBvC,4BAAjB","sourcesContent":["/*\nstruct Provider {\n    address addr;  //  if msg.sender == provider => self-Provider\n    IGelatoProviderModule module;  //  can be IGelatoProviderModule(0) for self-Providers\n}\n\nstruct Condition {\n    IGelatoCondition inst;  // can be AddressZero for self-conditional Actions\n    bytes data;  // can be bytes32(0) for self-conditional Actions\n}\n\nenum Operation { Call, Delegatecall }\n\nstruct Action {\n    address addr;\n    bytes data;\n    Operation operation;\n    uint256 value;\n    bool termsOkCheck;\n}\n\n\nstruct TaskReceipt {\n    uint256 id;\n    address userProxy;\n    Task task;\n}\n */\n\nfunction convertTaskReceiptObjToArray(taskReceiptObj) {\n  const tasks = _convertToArrayOfTaskArrays(taskReceiptObj.tasks);\n\n  const taskReceiptArray = [\n    taskReceiptObj.id,\n    taskReceiptObj.userProxy,\n    _convertToProviderArray(taskReceiptObj.provider),\n    taskReceiptObj.index,\n    tasks,\n    taskReceiptObj.expiryDate,\n    taskReceiptObj.cycleId,\n    taskReceiptObj.submissionsLeft,\n  ];\n\n  return taskReceiptArray;\n}\n\nfunction _convertToProviderArray(providerObj) {\n  const providerArray = [providerObj.addr, providerObj.module];\n  return providerArray;\n}\n\nfunction _convertToArrayOfTaskArrays(arrayOfTaskObjs) {\n  const tasks = [];\n  for (const taskObj of arrayOfTaskObjs) {\n    const taskArray = [\n      _convertToArrayOfConditionArrays(taskObj.conditions),\n      _convertToArrayOfActionArrays(taskObj.actions),\n      taskObj.selfProviderGasLimit,\n      taskObj.selfProviderGasPriceCeil,\n    ];\n    tasks.push(taskArray);\n  }\n  return tasks;\n}\n\nfunction _convertToArrayOfConditionArrays(arrayOfConditionObjs) {\n  const conditions = [];\n  for (const conditionObj of arrayOfConditionObjs) {\n    const conditionArray = [conditionObj.inst, conditionObj.data];\n    conditions.push(conditionArray);\n  }\n  return conditions;\n}\n\nfunction _convertToArrayOfActionArrays(arrayOfActionObjs) {\n  const actions = [];\n  for (const actionObj of arrayOfActionObjs) {\n    const actionArray = [\n      actionObj.addr,\n      actionObj.data,\n      actionObj.operation,\n      actionObj.dataFlow,\n      actionObj.value,\n      actionObj.termsOkCheck,\n    ];\n    actions.push(actionArray);\n  }\n  return actions;\n}\n\nmodule.exports = convertTaskReceiptObjToArray;\n"]},"metadata":{},"sourceType":"script"}