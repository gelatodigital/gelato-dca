{"ast":null,"code":"var _jsxFileName = \"/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/User.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { CardWrapper } from \"../components\";\nimport InputCard from \"../components/InputCard\";\nimport ViewCardWrapper from \"../components/ViewCardWrapper\";\nimport ViewCardButton from \"../components/ViewCardButton\";\nimport { getMiniUserAddress, getTokenBalance } from \"../services/stateReads\";\nimport { getMiniAddress, getFormattedNumber } from \"../utils/helpers\";\nimport { userProxyCast } from \"../services/stateWrites\";\nimport { addresses } from \"@gelato-krystal/contracts\";\nconst {\n  DAI,\n  USDC\n} = addresses;\n\nconst User = ({\n  userAccount\n}) => {\n  const [inputs, setInputs] = useState({});\n  const [refresh, setRefresh] = useState(false);\n\n  const inputsUpdates = async () => {\n    const miniUserAddress = await updateUserAddress();\n    const userDaiBalance = await getFormattedNumber(await getTokenBalance(userAccount, DAI));\n    const userUsdcBalance = await getFormattedNumber(await getTokenBalance(userAccount, USDC));\n    setInputs({ ...inputs,\n      userAddress: miniUserAddress,\n      userDaiBalance: userDaiBalance,\n      userUsdcBalance: userUsdcBalance\n    });\n  };\n\n  const updateUserAddress = async () => {\n    return await getMiniUserAddress(userAccount);\n  }; // const openVaultA = async () => {\n  //   if (await userHaveETHAVault(userAccount, inputs.userProxy)) return;\n  //   await userProxyCast(\n  //     [CONNECT_MAKER_ADDR],\n  //     [await openMakerVault(\"ETH-A\")],\n  //     userAccount,\n  //     0,\n  //     500000\n  //   );\n  //   setInputs({ ...inputs, vaultAExist: true });\n  //   setRefresh(!refresh);\n  // };\n  // const openVaultB = async () => {\n  //   if (await userHaveETHBVault(userAccount, inputs.userProxy)) return;\n  //   await userProxyCast(\n  //     [CONNECT_MAKER_ADDR],\n  //     [await openMakerVault(\"ETH-B\")],\n  //     userAccount,\n  //     0,\n  //     500000\n  //   );\n  //   setInputs({ ...inputs, vaultBExist: true });\n  //   setRefresh(!refresh);\n  // };\n\n\n  useEffect(() => {\n    inputsUpdates();\n  }, [refresh]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ViewCardWrapper, {\n    title: \"User Address\",\n    state: inputs.userAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ViewCardWrapper, {\n    title: \"DAI Balance\",\n    state: inputs.userDaiBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ViewCardWrapper, {\n    title: \"USDC Balance\",\n    state: inputs.userUsdcBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default User;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/User.js"],"names":["React","useState","useEffect","CardWrapper","InputCard","ViewCardWrapper","ViewCardButton","getMiniUserAddress","getTokenBalance","getMiniAddress","getFormattedNumber","userProxyCast","addresses","DAI","USDC","User","userAccount","inputs","setInputs","refresh","setRefresh","inputsUpdates","miniUserAddress","updateUserAddress","userDaiBalance","userUsdcBalance","userAddress"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,wBAApD;AACA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,kBAAnD;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAEA,MAAM;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,IAAgBF,SAAtB;;AAEA,MAAMG,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AAChC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMoB,aAAa,GAAG,YAAY;AAChC,UAAMC,eAAe,GAAG,MAAMC,iBAAiB,EAA/C;AACA,UAAMC,cAAc,GAAG,MAAMd,kBAAkB,CAC7C,MAAMF,eAAe,CAACQ,WAAD,EAAcH,GAAd,CADwB,CAA/C;AAGA,UAAMY,eAAe,GAAG,MAAMf,kBAAkB,CAC9C,MAAMF,eAAe,CAACQ,WAAD,EAAcF,IAAd,CADyB,CAAhD;AAIAI,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAERS,MAAAA,WAAW,EAAEJ,eAFL;AAGRE,MAAAA,cAAc,EAAEA,cAHR;AAIRC,MAAAA,eAAe,EAAEA;AAJT,KAAD,CAAT;AAMD,GAfD;;AAiBA,QAAMF,iBAAiB,GAAG,YAAY;AACpC,WAAO,MAAMhB,kBAAkB,CAACS,WAAD,CAA/B;AACD,GAFD,CArBgC,CAyBhC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACF,OAAD,CAFM,CAAT;AAIA,sBACE,uDACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,KAAK,EAAEF,MAAM,CAACS,WAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAOE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AACE,IAAA,KAAK,EAAC,aADR;AAEE,IAAA,KAAK,EAAET,MAAM,CAACO,cAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE,oBAAC,eAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,KAAK,EAAEP,MAAM,CAACQ,eAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAPF,CADF;AAsDD,CA/GD;;AAiHA,eAAeV,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { CardWrapper } from \"../components\";\nimport InputCard from \"../components/InputCard\";\nimport ViewCardWrapper from \"../components/ViewCardWrapper\";\nimport ViewCardButton from \"../components/ViewCardButton\";\nimport { getMiniUserAddress, getTokenBalance } from \"../services/stateReads\";\nimport { getMiniAddress, getFormattedNumber } from \"../utils/helpers\";\nimport { userProxyCast } from \"../services/stateWrites\";\nimport { addresses } from \"@gelato-krystal/contracts\";\n\nconst { DAI, USDC } = addresses;\n\nconst User = ({ userAccount }) => {\n  const [inputs, setInputs] = useState({});\n  const [refresh, setRefresh] = useState(false);\n\n  const inputsUpdates = async () => {\n    const miniUserAddress = await updateUserAddress();\n    const userDaiBalance = await getFormattedNumber(\n      await getTokenBalance(userAccount, DAI)\n    );\n    const userUsdcBalance = await getFormattedNumber(\n      await getTokenBalance(userAccount, USDC)\n    );\n\n    setInputs({\n      ...inputs,\n      userAddress: miniUserAddress,\n      userDaiBalance: userDaiBalance,\n      userUsdcBalance: userUsdcBalance,\n    });\n  };\n\n  const updateUserAddress = async () => {\n    return await getMiniUserAddress(userAccount);\n  };\n\n  // const openVaultA = async () => {\n  //   if (await userHaveETHAVault(userAccount, inputs.userProxy)) return;\n\n  //   await userProxyCast(\n  //     [CONNECT_MAKER_ADDR],\n  //     [await openMakerVault(\"ETH-A\")],\n  //     userAccount,\n  //     0,\n  //     500000\n  //   );\n  //   setInputs({ ...inputs, vaultAExist: true });\n  //   setRefresh(!refresh);\n  // };\n\n  // const openVaultB = async () => {\n  //   if (await userHaveETHBVault(userAccount, inputs.userProxy)) return;\n\n  //   await userProxyCast(\n  //     [CONNECT_MAKER_ADDR],\n  //     [await openMakerVault(\"ETH-B\")],\n  //     userAccount,\n  //     0,\n  //     500000\n  //   );\n  //   setInputs({ ...inputs, vaultBExist: true });\n  //   setRefresh(!refresh);\n  // };\n\n  useEffect(() => {\n    inputsUpdates();\n  }, [refresh]);\n\n  return (\n    <>\n      <CardWrapper>\n        <ViewCardWrapper\n          title=\"User Address\"\n          state={inputs.userAddress}\n        ></ViewCardWrapper>\n      </CardWrapper>\n      <CardWrapper>\n        <ViewCardWrapper\n          title=\"DAI Balance\"\n          state={inputs.userDaiBalance}\n        ></ViewCardWrapper>\n        <ViewCardWrapper\n          title=\"USDC Balance\"\n          state={inputs.userUsdcBalance}\n        ></ViewCardWrapper>\n      </CardWrapper>\n      {/* <CardWrapper>\n        {!inputs.vaultAExist && (\n          <ViewCardButton\n            title=\"Create ETH-A Vault\"\n            action={openVaultA}\n          ></ViewCardButton>\n        )}\n        {inputs.vaultAExist && (\n          <InputCard\n            title=\"Deposit Col in ETH-A Vault\"\n            btnText=\"Deposit\"\n            setInputs={setInputs}\n            inputs={inputs}\n            execFunc={depositVaultA}\n          ></InputCard>\n        )}\n        {inputs.vaultAExist && (\n          <InputCard\n            title=\"Borrow DAI from ETH-A Vault\"\n            btnText=\"Borrow\"\n            setInputs={setInputs}\n            inputs={inputs}\n            execFunc={borrowVaultA}\n          ></InputCard>\n        )}\n      </CardWrapper>\n      {!inputs.vaultBExist && (\n        <CardWrapper>\n          <ViewCardButton\n            title=\"Create ETH-B Vault\"\n            action={openVaultB}\n          ></ViewCardButton>\n        </CardWrapper>\n      )} */}\n    </>\n  );\n};\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}