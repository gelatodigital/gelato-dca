{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { getGelatoKrystal } from \"./stateReads\";\nexport const submitOrder = async (user, inToken, outToken, delay, amountPerTrade, nTrades, minSlippage = 9001, maxSlippage = 9000, gasPriceCeil = 0) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n  const gelatoKrystal = await getGelatoKrystal(user);\n  const options = {\n    gasPrice: ethers.utils.parseUnits(\"50\", \"gwei\")\n  };\n  const submitTx = await gelatoKrystal({\n    inToken,\n    outToken,\n    amountPerTrade,\n    nTrades,\n    minSlippage,\n    maxSlippage,\n    delay,\n    gasPriceCeil,\n    options\n  });\n  await submitTx.wait();\n};","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/services/stateWrites.js"],"names":["ethers","getGelatoKrystal","submitOrder","user","inToken","outToken","delay","amountPerTrade","nTrades","minSlippage","maxSlippage","gasPriceCeil","signer","getSigner","userAddr","getAddress","gelatoKrystal","options","gasPrice","utils","parseUnits","submitTx","wait"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,OAAO,MAAMC,WAAW,GAAG,OACzBC,IADyB,EAEzBC,OAFyB,EAGzBC,QAHyB,EAIzBC,KAJyB,EAKzBC,cALyB,EAMzBC,OANyB,EAOzBC,WAAW,GAAG,IAPW,EAQzBC,WAAW,GAAG,IARW,EASzBC,YAAY,GAAG,CATU,KAUtB;AACH,QAAMC,MAAM,GAAG,MAAMT,IAAI,CAACU,SAAL,EAArB;AACA,QAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,UAAP,EAAvB;AACA,QAAMC,aAAa,GAAG,MAAMf,gBAAgB,CAACE,IAAD,CAA5C;AAEA,QAAMc,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAElB,MAAM,CAACmB,KAAP,CAAaC,UAAb,CAAwB,IAAxB,EAA8B,MAA9B;AADI,GAAhB;AAGA,QAAMC,QAAQ,GAAG,MAAML,aAAa,CAAC;AACnCZ,IAAAA,OADmC;AAEnCC,IAAAA,QAFmC;AAGnCE,IAAAA,cAHmC;AAInCC,IAAAA,OAJmC;AAKnCC,IAAAA,WALmC;AAMnCC,IAAAA,WANmC;AAOnCJ,IAAAA,KAPmC;AAQnCK,IAAAA,YARmC;AASnCM,IAAAA;AATmC,GAAD,CAApC;AAWA,QAAMI,QAAQ,CAACC,IAAT,EAAN;AACD,CA9BM","sourcesContent":["import { ethers } from \"ethers\";\nimport { getGelatoKrystal } from \"./stateReads\";\n\nexport const submitOrder = async (\n  user,\n  inToken,\n  outToken,\n  delay,\n  amountPerTrade,\n  nTrades,\n  minSlippage = 9001,\n  maxSlippage = 9000,\n  gasPriceCeil = 0\n) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n  const gelatoKrystal = await getGelatoKrystal(user);\n\n  const options = {\n    gasPrice: ethers.utils.parseUnits(\"50\", \"gwei\"),\n  };\n  const submitTx = await gelatoKrystal({\n    inToken,\n    outToken,\n    amountPerTrade,\n    nTrades,\n    minSlippage,\n    maxSlippage,\n    delay,\n    gasPriceCeil,\n    options,\n  });\n  await submitTx.wait();\n};\n"]},"metadata":{},"sourceType":"module"}