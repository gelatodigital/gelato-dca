{"ast":null,"code":"var _jsxFileName = \"/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/SubmitTask.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { ViewCard, CardWrapper, Button } from \"../components\";\nimport { submitOrder } from \"../services/stateWrites\";\nimport { addresses } from \"@gelato-krystal/contracts\";\nconst {\n  DAI,\n  WETH\n} = addresses;\n\nconst SubmitTask = ({\n  userAccount\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [inputs, setInputs] = useState({});\n  const [totalAmount, setTotalAmount] = useState(30);\n  const [intervalSeconds, setIntervalSeconds] = useState(120);\n  const [tradeNum, setTradeNum] = useState(3); // const inputsUpdates = async () => {\n  //   const userProxy = await getUserProxy(userAccount);\n  //   const vA = await getVault(userAccount, userProxy, \"ETH-A\");\n  //   const vAId = vA !== undefined ? vA.id : 0;\n  //   const vB = await getVault(userAccount, userProxy, \"ETH-B\");\n  //   const vBId = vB !== undefined ? vB.id : 0;\n  //   setInputs({\n  //     ...inputs,\n  //     vaultAId: vAId,\n  //     vaultBId: vBId,\n  //     defaultValueAmount: 30,\n  //     defaultValueInterval: 120,\n  //     defaultValueTradeNum: 3,\n  //   });\n  // };\n\n  const handleTotalAmountChange = async event => {\n    const newValue = event.target.value;\n    setTotalAmount(newValue);\n  };\n\n  const handleIntervalSecondsChange = async event => {\n    const newValue = event.target.value;\n    setIntervalSeconds(newValue);\n  };\n\n  const handleTradeNumChange = async event => {\n    const newValue = event.target.value;\n    setTradeNum(newValue);\n  };\n\n  const submit = async () => {\n    console.log(\"submit\");\n\n    if (totalAmount === 0) {\n      console.log(\"Insufficient total amount\");\n      return;\n    }\n\n    if (intervalSeconds === 0) {\n      console.log(\"0 Interval seconds not allowed\");\n      return;\n    }\n\n    if (parseInt(inputs.tradeNum) > 10) {\n      console.log(\"Max Trade Number is 10\");\n      return;\n    }\n\n    console.log(\"Submit\");\n    await submitOrder(userAccount, DAI, WETH, intervalSeconds, totalAmount / tradeNum, tradeNum);\n    console.log(\"Complete\");\n  }; // useEffect(() => {\n  //   inputsUpdates();\n  // });\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ViewCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      margin: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Total Amount of DAI to sell for WETH\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      maxWidth: \"80%\"\n    },\n    type: \"number\",\n    value: totalAmount,\n    onChange: handleTotalAmountChange,\n    defaultValue: inputs.defaultValueAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ViewCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      margin: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, \"Interval between each trade (in seconds)\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      maxWidth: \"80%\"\n    },\n    type: \"number\",\n    value: intervalSeconds,\n    onChange: handleIntervalSecondsChange,\n    defaultValue: inputs.defaultValueInterval,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ViewCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      margin: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, \"Number of trades to split the total amount up\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      maxWidth: \"80%\"\n    },\n    type: \"number\",\n    value: tradeNum,\n    onChange: handleTradeNumChange,\n    defaultValue: inputs.defaultValueTradeNum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ViewCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      margin: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, `Execute ${tradeNum} trades, each worth ${parseFloat(totalAmount / tradeNum).toFixed(3)} DAI`), !loading && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    onClick: async () => {\n      setLoading(true);\n\n      try {\n        await submit();\n        setLoading(false);\n      } catch {\n        setLoading(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, `Submit Task`)), loading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 23\n    }\n  }, \"waiting...\"))));\n};\n\nexport default SubmitTask;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/SubmitTask.js"],"names":["React","useState","useEffect","ethers","ViewCard","CardWrapper","Button","submitOrder","addresses","DAI","WETH","SubmitTask","userAccount","loading","setLoading","inputs","setInputs","totalAmount","setTotalAmount","intervalSeconds","setIntervalSeconds","tradeNum","setTradeNum","handleTotalAmountChange","event","newValue","target","value","handleIntervalSecondsChange","handleTradeNumChange","submit","console","log","parseInt","margin","maxWidth","defaultValueAmount","defaultValueInterval","defaultValueTradeNum","parseFloat","toFixed"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { ViewCard, CardWrapper, Button } from \"../components\";\nimport { submitOrder } from \"../services/stateWrites\";\nimport { addresses } from \"@gelato-krystal/contracts\";\nconst { DAI, WETH } = addresses;\n\nconst SubmitTask = ({ userAccount }) => {\n  const [loading, setLoading] = useState(false);\n  const [inputs, setInputs] = useState({});\n  const [totalAmount, setTotalAmount] = useState(30);\n  const [intervalSeconds, setIntervalSeconds] = useState(120);\n  const [tradeNum, setTradeNum] = useState(3);\n\n  // const inputsUpdates = async () => {\n  //   const userProxy = await getUserProxy(userAccount);\n  //   const vA = await getVault(userAccount, userProxy, \"ETH-A\");\n  //   const vAId = vA !== undefined ? vA.id : 0;\n  //   const vB = await getVault(userAccount, userProxy, \"ETH-B\");\n  //   const vBId = vB !== undefined ? vB.id : 0;\n\n  //   setInputs({\n  //     ...inputs,\n  //     vaultAId: vAId,\n  //     vaultBId: vBId,\n  //     defaultValueAmount: 30,\n  //     defaultValueInterval: 120,\n  //     defaultValueTradeNum: 3,\n  //   });\n  // };\n\n  const handleTotalAmountChange = async (event) => {\n    const newValue = event.target.value;\n    setTotalAmount(newValue);\n  };\n\n  const handleIntervalSecondsChange = async (event) => {\n    const newValue = event.target.value;\n    setIntervalSeconds(newValue);\n  };\n\n  const handleTradeNumChange = async (event) => {\n    const newValue = event.target.value;\n    setTradeNum(newValue);\n  };\n\n  const submit = async () => {\n    console.log(\"submit\");\n    if (totalAmount === 0) {\n      console.log(\"Insufficient total amount\");\n      return;\n    }\n\n    if (intervalSeconds === 0) {\n      console.log(\"0 Interval seconds not allowed\");\n      return;\n    }\n    if (parseInt(inputs.tradeNum) > 10) {\n      console.log(\"Max Trade Number is 10\");\n      return;\n    }\n\n    console.log(\"Submit\");\n\n    await submitOrder(\n      userAccount,\n      DAI,\n      WETH,\n      intervalSeconds,\n      totalAmount / tradeNum,\n      tradeNum\n    );\n    console.log(\"Complete\");\n  };\n\n  // useEffect(() => {\n  //   inputsUpdates();\n  // });\n\n  return (\n    <>\n      <CardWrapper>\n        <ViewCard>\n          <label style={{ margin: \"10px\" }}>\n            Total Amount of DAI to sell for WETH\n          </label>\n\n          <input\n            style={{ maxWidth: \"80%\" }}\n            type=\"number\"\n            value={totalAmount}\n            onChange={handleTotalAmountChange}\n            defaultValue={inputs.defaultValueAmount}\n          />\n        </ViewCard>\n\n        <ViewCard>\n          <label style={{ margin: \"10px\" }}>\n            Interval between each trade (in seconds)\n          </label>\n\n          <input\n            style={{ maxWidth: \"80%\" }}\n            type=\"number\"\n            value={intervalSeconds}\n            onChange={handleIntervalSecondsChange}\n            defaultValue={inputs.defaultValueInterval}\n          />\n        </ViewCard>\n\n        <ViewCard>\n          <label style={{ margin: \"10px\" }}>\n            Number of trades to split the total amount up\n          </label>\n\n          <input\n            style={{ maxWidth: \"80%\" }}\n            type=\"number\"\n            value={tradeNum}\n            onChange={handleTradeNumChange}\n            defaultValue={inputs.defaultValueTradeNum}\n          />\n        </ViewCard>\n\n        <ViewCard>\n          <label style={{ margin: \"10px\" }}>\n            {`Execute ${tradeNum} trades, each worth ${parseFloat(\n              totalAmount / tradeNum\n            ).toFixed(3)} DAI`}\n          </label>\n          {!loading && (\n            <>\n              <Button\n                onClick={async () => {\n                  setLoading(true);\n                  try {\n                    await submit();\n                    setLoading(false);\n                  } catch {\n                    setLoading(false);\n                  }\n                }}\n              >\n                {`Submit Task`}\n              </Button>\n            </>\n          )}\n          {loading && <p>waiting...</p>}\n        </ViewCard>\n      </CardWrapper>\n    </>\n  );\n};\n\nexport default SubmitTask;\n"]},"metadata":{},"sourceType":"module"}