{"ast":null,"code":"var _jsxFileName = \"/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/App.js\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport User from \"./pages/User\";\nimport SubmitTask from \"./pages/SubmitTask\";\nimport DeployProxy from \"./pages/DeployProxy\";\nimport TaskOverview from \"./pages/TaskOverview\";\nimport ethers from \"ethers\";\nimport GelatoLogo from \"./components/Logo\";\nimport { Body, Button, Header, HyperLink, CardWrapper } from \"./components\";\nimport { web3Modal, logoutOfWeb3Modal } from \"./utils/web3Modal\";\nimport GET_TRANSFERS from \"./graphql/subgraph\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport { getUserProxy } from \"./services/stateReads\";\n\nfunction WalletButton({\n  userAccount,\n  loadWeb3Modal\n}) {\n  return /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      if (!userAccount) {\n        loadWeb3Modal();\n      } else {\n        logoutOfWeb3Modal();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, !userAccount ? \"Connect Wallet\" : \"Disconnect Wallet\");\n}\n\nfunction App() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_TRANSFERS);\n  const [userAccount, setUserAccount] = useState();\n  const [hasProxy, setHasProxy] = useState();\n  const [proxyAddress, setProxyAddress] = useState();\n  /* Open wallet selection modal. */\n\n  const loadWeb3Modal = useCallback(async () => {\n    const newuserAccount = await web3Modal.connect(); //console.log((new ethers.providers.Web3Provider(newuserAccount)).getSigner());\n\n    setUserAccount(new Web3Provider(newuserAccount));\n  }, []);\n\n  const checkIfUserHasProxy = async userAccount => {\n    const proxyAddress = await getUserProxy(userAccount);\n    if (ethers.utils.getAddress(proxyAddress) === ethers.utils.getAddress(ethers.constants.AddressZero)) setHasProxy(false);else {\n      setHasProxy(true);\n      setProxyAddress(proxyAddress);\n    }\n  };\n  /* If user has loaded a wallet before, load it automatically. */\n\n\n  useEffect(() => {\n    if (web3Modal.cacheduserAccount) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]); // Check if user deployed Proxy\n\n  useEffect(() => {\n    if (userAccount) {\n      checkIfUserHasProxy(userAccount);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gelato-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(GelatoLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  })), userAccount && hasProxy && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HyperLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    style: {\n      color: \"#483D8B\",\n      textDecoration: \"none\",\n      \"font-weight\": \"bold\"\n    },\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"User\")), /*#__PURE__*/React.createElement(HyperLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    style: {\n      color: \"#483D8B\",\n      textDecoration: \"none\",\n      \"font-weight\": \"bold\"\n    },\n    to: \"/submit-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, \"Submit Task\")), /*#__PURE__*/React.createElement(HyperLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    style: {\n      color: \"#483D8B\",\n      textDecoration: \"none\",\n      \"font-weight\": \"bold\"\n    },\n    to: \"/task-overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, \"Task Overview\"))), /*#__PURE__*/React.createElement(WalletButton, {\n    userAccount: userAccount,\n    loadWeb3Modal: loadWeb3Modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, !userAccount && !hasProxy && /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: \"#4299e1\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }, \"Please login\"))), userAccount && !hasProxy && /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DeployProxy, {\n    setHasProxy: setHasProxy,\n    userAccount: userAccount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  })), userAccount && hasProxy && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Route, {\n    path: \"/submit-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SubmitTask, {\n    userAccount: userAccount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/task-overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, userAccount && hasProxy && proxyAddress && /*#__PURE__*/React.createElement(TaskOverview, {\n    userAccount: userAccount,\n    userProxyAddress: proxyAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(User, {\n    userAccount: userAccount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/App.js"],"names":["React","useCallback","useEffect","useState","Web3Provider","useQuery","User","SubmitTask","DeployProxy","TaskOverview","ethers","GelatoLogo","Body","Button","Header","HyperLink","CardWrapper","web3Modal","logoutOfWeb3Modal","GET_TRANSFERS","BrowserRouter","Router","Switch","Route","Link","Redirect","getUserProxy","WalletButton","userAccount","loadWeb3Modal","App","loading","error","data","setUserAccount","hasProxy","setHasProxy","proxyAddress","setProxyAddress","newuserAccount","connect","checkIfUserHasProxy","utils","getAddress","constants","AddressZero","cacheduserAccount","color","textDecoration"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport User from \"./pages/User\";\nimport SubmitTask from \"./pages/SubmitTask\";\nimport DeployProxy from \"./pages/DeployProxy\";\nimport TaskOverview from \"./pages/TaskOverview\";\nimport ethers from \"ethers\";\nimport GelatoLogo from \"./components/Logo\";\n\nimport { Body, Button, Header, HyperLink, CardWrapper } from \"./components\";\n\nimport { web3Modal, logoutOfWeb3Modal } from \"./utils/web3Modal\";\n\nimport GET_TRANSFERS from \"./graphql/subgraph\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nimport { getUserProxy } from \"./services/stateReads\";\n\nfunction WalletButton({ userAccount, loadWeb3Modal }) {\n  return (\n    <Button\n      onClick={() => {\n        if (!userAccount) {\n          loadWeb3Modal();\n        } else {\n          logoutOfWeb3Modal();\n        }\n      }}\n    >\n      {!userAccount ? \"Connect Wallet\" : \"Disconnect Wallet\"}\n    </Button>\n  );\n}\n\nfunction App() {\n  const { loading, error, data } = useQuery(GET_TRANSFERS);\n  const [userAccount, setUserAccount] = useState();\n  const [hasProxy, setHasProxy] = useState();\n  const [proxyAddress, setProxyAddress] = useState();\n\n  /* Open wallet selection modal. */\n  const loadWeb3Modal = useCallback(async () => {\n    const newuserAccount = await web3Modal.connect();\n    //console.log((new ethers.providers.Web3Provider(newuserAccount)).getSigner());\n    setUserAccount(new Web3Provider(newuserAccount));\n  }, []);\n\n  const checkIfUserHasProxy = async (userAccount) => {\n    const proxyAddress = await getUserProxy(userAccount);\n    if (\n      ethers.utils.getAddress(proxyAddress) ===\n      ethers.utils.getAddress(ethers.constants.AddressZero)\n    )\n      setHasProxy(false);\n    else {\n      setHasProxy(true);\n      setProxyAddress(proxyAddress);\n    }\n  };\n\n  /* If user has loaded a wallet before, load it automatically. */\n  useEffect(() => {\n    if (web3Modal.cacheduserAccount) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  // Check if user deployed Proxy\n  useEffect(() => {\n    if (userAccount) {\n      checkIfUserHasProxy(userAccount);\n    }\n  });\n\n  return (\n    <div>\n      <Router>\n        <Header>\n          <div className=\"gelato-logo\">\n            <GelatoLogo></GelatoLogo>\n          </div>\n          {userAccount && hasProxy && (\n            <>\n              <HyperLink>\n                <Link style={{ color: \"#483D8B\", textDecoration: \"none\", \"font-weight\": \"bold\" }} to=\"/\">\n                  User\n                </Link>\n              </HyperLink>\n              <HyperLink>\n                <Link\n                  style={{ color: \"#483D8B\", textDecoration: \"none\", \"font-weight\": \"bold\" }}\n                  to=\"/submit-task\"\n                >\n                  Submit Task\n                </Link>\n              </HyperLink>\n              <HyperLink>\n                <Link\n                  style={{ color: \"#483D8B\", textDecoration: \"none\", \"font-weight\": \"bold\" }}\n                  to=\"/task-overview\"\n                >\n                  Task Overview\n                </Link>\n              </HyperLink>\n            </>\n          )}\n          <WalletButton\n            userAccount={userAccount}\n            loadWeb3Modal={loadWeb3Modal}\n          />\n        </Header>\n        <Body>\n          <Switch>\n            {!userAccount && !hasProxy && (\n              <Route path=\"/\">\n                <CardWrapper>\n                  <h3 style={{ color: \"#4299e1\" }}>Please login</h3>\n                </CardWrapper>\n              </Route>\n            )}\n            {userAccount && !hasProxy && (\n              <Route path=\"/\">\n                <DeployProxy\n                  setHasProxy={setHasProxy}\n                  userAccount={userAccount}\n                ></DeployProxy>\n              </Route>\n            )}\n            {userAccount && hasProxy && (\n              <>\n                <Route path=\"/submit-task\">\n                  <SubmitTask userAccount={userAccount}></SubmitTask>\n                </Route>\n                <Route path=\"/task-overview\">\n                  {userAccount && hasProxy && proxyAddress && (\n                    <TaskOverview\n                      userAccount={userAccount}\n                      userProxyAddress={proxyAddress}\n                    ></TaskOverview>\n                  )}\n                </Route>\n                <Route exact path=\"/\">\n                  <User userAccount={userAccount}></User>\n                </Route>\n\n                {/*Redirect all 404's to home*/}\n                <Redirect to=\"/\" />\n              </>\n            )}\n          </Switch>\n        </Body>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}