{"ast":null,"code":"var _jsxFileName = \"/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/components/InputCard.js\";\nimport React, { useState } from \"react\";\nimport { ViewCard } from \"../components\";\nexport const InputCard = ({\n  title,\n  btnText,\n  setInputs,\n  defaultValue,\n  inputs,\n  execFunc\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [newValue, setNewValue] = useState();\n\n  const handleExec = async () => {\n    // Exec Transaction\n    setLoading(true);\n\n    try {\n      await execFunc(newValue);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ViewCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, `${title}`), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      maxWidth: \"80%\"\n    },\n    type: \"number\",\n    value: inputs[title],\n    onChange: e => setNewValue(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), !loading && /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      marginTop: \"8px\"\n    },\n    type: \"submit\",\n    onClick: () => handleExec(),\n    value: btnText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }), loading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 19\n    }\n  }, \"waiting...\"));\n};\nexport default InputCard;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/components/InputCard.js"],"names":["React","useState","ViewCard","InputCard","title","btnText","setInputs","defaultValue","inputs","execFunc","loading","setLoading","newValue","setNewValue","handleExec","err","console","log","maxWidth","e","target","value","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,eAAzB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAAC;AACxBC,EAAAA,KADwB;AAExBC,EAAAA,OAFwB;AAGxBC,EAAAA,SAHwB;AAIxBC,EAAAA,YAJwB;AAKxBC,EAAAA,MALwB;AAMxBC,EAAAA;AANwB,CAAD,KAOnB;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,EAAxC;;AAEA,QAAMa,UAAU,GAAG,YAAY;AAC7B;AACAH,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMF,QAAQ,CAACG,QAAD,CAAd;AACAD,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHD,CAGE,OAAOI,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAVD;;AAYA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,GAAEP,KAAM,EAAb,CADF,eAEE;AACE,IAAA,KAAK,EAAE;AAAEc,MAAAA,QAAQ,EAAE;AAAZ,KADT;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAEV,MAAM,CAACJ,KAAD,CAHf;AAIE,IAAA,QAAQ,EAAGe,CAAD,IAAON,WAAW,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAQG,CAACX,OAAD,iBACC;AACE,IAAA,KAAK,EAAE;AAAEY,MAAAA,SAAS,EAAE;AAAb,KADT;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,OAAO,EAAE,MAAMR,UAAU,EAH3B;AAIE,IAAA,KAAK,EAAET,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAgBGK,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBd,CADF;AAoBD,CA3CM;AA6CP,eAAeP,SAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { ViewCard } from \"../components\";\n\nexport const InputCard = ({\n  title,\n  btnText,\n  setInputs,\n  defaultValue,\n  inputs,\n  execFunc,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [newValue, setNewValue] = useState();\n\n  const handleExec = async () => {\n    // Exec Transaction\n    setLoading(true);\n    try {\n      await execFunc(newValue);\n      setLoading(false);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <ViewCard>\n      <p>{`${title}`}</p>\n      <input\n        style={{ maxWidth: \"80%\" }}\n        type=\"number\"\n        value={inputs[title]}\n        onChange={(e) => setNewValue(e.target.value)}\n      />\n      {!loading && (\n        <input\n          style={{ marginTop: \"8px\" }}\n          type=\"submit\"\n          onClick={() => handleExec()}\n          value={btnText}\n        />\n      )}\n      {loading && <p>waiting...</p>}\n    </ViewCard>\n  );\n};\n\nexport default InputCard;\n"]},"metadata":{},"sourceType":"module"}