{"ast":null,"code":"var _jsxFileName = \"/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/TaskOverview.js\";\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport { CardWrapper, Button } from \"../components\";\nimport { useTable, useSortBy } from \"react-table\"; // Styled components\n\nimport styled from \"styled-components\"; // Graph QL Query\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport GET_TASK_RECEIPT_WRAPPERS from \"../graphql/gelato\";\nimport { isKnownTask, sleep, decodeWithoutSignature, toPercentFormat, getDisplayablePercent } from \"../utils/helpers\";\nimport { getCancelTaskData } from \"../services/payloadGeneration\";\nimport { userProxyCast } from \"../services/stateWrites\";\nimport { addresses } from \"@project/contracts\";\nconst {\n  CONNECT_GELATO_ADDR\n} = addresses;\nconst Styles = styled.div`\n  padding: 1rem;\n  font-size: 1rem;\n  color: black;\n\n  table {\n    border-spacing: 0;\n    border: 2px solid #4299e1;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      text-align: center;\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid #4299e1;\n      border-right: 1px solid #4299e1;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nconst TaskOverview = ({\n  userAccount,\n  userProxyAddress\n}) => {\n  const {\n    loading,\n    error,\n    data,\n    refetch,\n    fetchMore\n  } = useQuery(GET_TASK_RECEIPT_WRAPPERS, {\n    variables: {\n      skip: 0,\n      proxyAddress: userProxyAddress.toLowerCase()\n    }\n  });\n  const [rowData, setRowData] = useState([{\n    id: \"\",\n    user: \"\",\n    status: \"\",\n    submitDate: \"\",\n    limit: \"\",\n    feeratio: \"\",\n    execDate: \"\",\n    execLink: \"\"\n  }]);\n  const columns = useMemo(() => [{\n    Header: \"#\",\n    accessor: \"id\" // accessor is the \"key\" in the data\n\n  }, {\n    Header: \"Task Status\",\n    accessor: \"status\"\n  }, {\n    Header: \"Submit Link\",\n    accessor: \"submitDate\"\n  }, {\n    Header: \"Col % triggering ref\",\n    accessor: \"limit\"\n  }, {\n    Header: \"Maximum Fees in Col %\",\n    accessor: \"feeratio\"\n  }, {\n    Header: \"Exec Date\",\n    accessor: \"execDate\"\n  }, {\n    Header: \"Exec Link\",\n    accessor: \"execLink\"\n  }, {\n    Header: \"Cancel Task\",\n    accessor: \"cancel\"\n  }], []);\n\n  const decodeAffordableRatio = data => {\n    return String(getDisplayablePercent(decodeWithoutSignature([\"uint256\", \"uint256\"], data)[1]));\n  };\n\n  const decodeVaultUnsafe = data => {\n    return String(getDisplayablePercent(decodeWithoutSignature([\"uint256\", \"address\", \"bytes\", \"uint256\"], data)[3]));\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data: rowData\n  }, useSortBy);\n\n  const createRowData = (userAccount, data) => {\n    const newRows = []; // Filter all tasks by known Tash Hashes\n\n    for (let wrapper of data.taskReceiptWrappers) {\n      if (!isKnownTask(wrapper.taskReceipt.tasks[wrapper.taskReceipt.index])) continue;\n      const execUrl = `https://etherscan.io/tx/${wrapper.executionHash}`;\n      const submitUrl = `https://etherscan.io/tx/${wrapper.submissionHash}`;\n      const feeRatio = toPercentFormat(decodeAffordableRatio(wrapper.taskReceipt.tasks[0].conditions[1].data));\n      newRows.push({\n        id: parseInt(wrapper.id),\n        status: wrapper.status,\n        submitDate: /*#__PURE__*/React.createElement(\"a\", {\n          target: \"_blank\",\n          href: submitUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 11\n          }\n        }, \"Link\"),\n        limit: toPercentFormat(decodeVaultUnsafe(wrapper.taskReceipt.tasks[0].conditions[0].data)),\n        feeratio: toPercentFormat(decodeAffordableRatio(wrapper.taskReceipt.tasks[0].conditions[1].data)),\n        execDate: wrapper.executionDate !== null ? new Date(wrapper.executionDate * 1000).toLocaleDateString().toString() : \"\",\n        execLink: wrapper.status !== \"awaitingExec\" ? /*#__PURE__*/React.createElement(\"a\", {\n          target: \"_blank\",\n          href: execUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }\n        }, \"Link\") : \"\",\n        cancel: wrapper.status === \"awaitingExec\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n          style: {\n            borderColor: \"white\",\n            color: \"white\",\n            backgroundColor: \"#4299e1\"\n          },\n          onClick: async () => {\n            const cancelTaskData = getCancelTaskData(wrapper.taskReceipt);\n\n            try {\n              await userProxyCast([CONNECT_GELATO_ADDR], [cancelTaskData], userAccount, 0, 300000);\n            } catch (err) {\n              console.log(err);\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }\n        }, \"Cancel\")) : \"\"\n      });\n    }\n\n    return newRows;\n  };\n\n  useEffect(() => {\n    if (data) {\n      const newRows = createRowData(userAccount, data);\n      if (newRows.length > 0) setRowData(newRows);\n    }\n  }, [data]);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 12\n    }\n  }, \"Error fetching Gelato Subgraph, please refresh the page :)\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardWrapper, {\n    style: {\n      maxWidth: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, // Loop over the header rows\n  headerGroups.map(headerGroup =>\n  /*#__PURE__*/\n  // Apply the header row props\n  React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }\n  }), // Loop over the headers in each row\n  headerGroup.headers.map(column =>\n  /*#__PURE__*/\n  // Apply the header cell props\n  React.createElement(\"th\", Object.assign({}, column.getHeaderProps(column.getSortByToggleProps()), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 21\n    }\n  }), // Render the header\n  column.render(\"Header\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 23\n    }\n  }, column.isSorted ? column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\" : \"\")))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }), // Loop over the table rows\n  rows.map(row => {\n    // Prepare the row for display\n    prepareRow(row);\n    return (\n      /*#__PURE__*/\n      // Apply the row props\n      React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 19\n        }\n      }), // Loop over the rows cells\n      row.cells.map(cell => {\n        // Apply the cell props\n        return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }\n        }), // Render the cell contents\n        cell.render(\"Cell\"));\n      }))\n    );\n  })))), /*#__PURE__*/React.createElement(Button, {\n    background: \"#4299e1\",\n    onClick: async () => {\n      refetch();\n      setRowData([{\n        id: \"\",\n        status: \"\",\n        submitDate: \"\",\n        limit: \"\",\n        feeratio: \"\",\n        execDate: \"\",\n        execLink: \"\",\n        cancel: \"\"\n      }]);\n      await sleep(1000);\n      setRowData(createRowData(userAccount, data));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }\n  }, \"Refresh\")));\n};\n\nexport default TaskOverview;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/TaskOverview.js"],"names":["React","useMemo","useState","useEffect","CardWrapper","Button","useTable","useSortBy","styled","useQuery","GET_TASK_RECEIPT_WRAPPERS","isKnownTask","sleep","decodeWithoutSignature","toPercentFormat","getDisplayablePercent","getCancelTaskData","userProxyCast","addresses","CONNECT_GELATO_ADDR","Styles","div","TaskOverview","userAccount","userProxyAddress","loading","error","data","refetch","fetchMore","variables","skip","proxyAddress","toLowerCase","rowData","setRowData","id","user","status","submitDate","limit","feeratio","execDate","execLink","columns","Header","accessor","decodeAffordableRatio","String","decodeVaultUnsafe","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","createRowData","newRows","wrapper","taskReceiptWrappers","taskReceipt","tasks","index","execUrl","executionHash","submitUrl","submissionHash","feeRatio","conditions","push","parseInt","executionDate","Date","toLocaleDateString","toString","cancel","borderColor","color","backgroundColor","cancelTaskData","err","console","log","length","maxWidth","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect } from \"react\";\nimport { CardWrapper, Button } from \"../components\";\nimport { useTable, useSortBy } from \"react-table\";\n// Styled components\nimport styled from \"styled-components\";\n// Graph QL Query\nimport { useQuery } from \"@apollo/react-hooks\";\nimport GET_TASK_RECEIPT_WRAPPERS from \"../graphql/gelato\";\nimport {\n  isKnownTask,\n  sleep,\n  decodeWithoutSignature,\n  toPercentFormat,\n  getDisplayablePercent\n} from \"../utils/helpers\";\nimport { getCancelTaskData } from \"../services/payloadGeneration\";\nimport { userProxyCast } from \"../services/stateWrites\";\nimport { addresses } from \"@project/contracts\";\n\nconst { CONNECT_GELATO_ADDR } = addresses;\n\nconst Styles = styled.div`\n  padding: 1rem;\n  font-size: 1rem;\n  color: black;\n\n  table {\n    border-spacing: 0;\n    border: 2px solid #4299e1;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      text-align: center;\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid #4299e1;\n      border-right: 1px solid #4299e1;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nconst TaskOverview = ({ userAccount, userProxyAddress }) => {\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_TASK_RECEIPT_WRAPPERS,\n    {\n      variables: {\n        skip: 0,\n        proxyAddress: userProxyAddress.toLowerCase(),\n      },\n    }\n  );\n\n  const [rowData, setRowData] = useState([\n    {\n      id: \"\",\n      user: \"\",\n      status: \"\",\n      submitDate: \"\",\n      limit: \"\",\n      feeratio: \"\",\n      execDate: \"\",\n      execLink: \"\",\n    },\n  ]);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"#\",\n        accessor: \"id\", // accessor is the \"key\" in the data\n      },\n\n      {\n        Header: \"Task Status\",\n        accessor: \"status\",\n      },\n      {\n        Header: \"Submit Link\",\n        accessor: \"submitDate\",\n      },\n      {\n        Header: \"Col % triggering ref\",\n        accessor: \"limit\",\n      },\n      {\n        Header: \"Maximum Fees in Col %\",\n        accessor: \"feeratio\",\n      },\n      {\n        Header: \"Exec Date\",\n        accessor: \"execDate\",\n      },\n      {\n        Header: \"Exec Link\",\n        accessor: \"execLink\",\n      },\n      {\n        Header: \"Cancel Task\",\n        accessor: \"cancel\",\n      },\n    ],\n    []\n  );\n\n  const decodeAffordableRatio = (data) => {\n    return String(\n      getDisplayablePercent(\n        decodeWithoutSignature([\"uint256\", \"uint256\"], data)[1]\n      )\n    );\n  };\n\n  const decodeVaultUnsafe = (data) => {\n    return String(\n      getDisplayablePercent(\n        decodeWithoutSignature([\"uint256\", \"address\", \"bytes\", \"uint256\"], data)[3]\n      )\n    );\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data: rowData }, useSortBy);\n\n  const createRowData = (userAccount, data) => {\n    const newRows = [];\n    // Filter all tasks by known Tash Hashes\n    for (let wrapper of data.taskReceiptWrappers) {\n      if (!isKnownTask(wrapper.taskReceipt.tasks[wrapper.taskReceipt.index]))\n        continue;\n\n      const execUrl = `https://etherscan.io/tx/${wrapper.executionHash}`;\n      const submitUrl = `https://etherscan.io/tx/${wrapper.submissionHash}`;\n      const feeRatio = toPercentFormat(\n        decodeAffordableRatio(wrapper.taskReceipt.tasks[0].conditions[1].data)\n      );\n      newRows.push({\n        id: parseInt(wrapper.id),\n        status: wrapper.status,\n        submitDate: (\n          <a target=\"_blank\" href={submitUrl}>\n            Link\n          </a>\n        ),\n        limit: toPercentFormat(\n          decodeVaultUnsafe(wrapper.taskReceipt.tasks[0].conditions[0].data)\n        ),\n        feeratio: toPercentFormat(\n          decodeAffordableRatio(wrapper.taskReceipt.tasks[0].conditions[1].data)\n        ),\n        execDate:\n          wrapper.executionDate !== null\n            ? new Date(wrapper.executionDate * 1000)\n                .toLocaleDateString()\n                .toString()\n            : \"\",\n        execLink:\n          wrapper.status !== \"awaitingExec\" ? (\n            <a target=\"_blank\" href={execUrl}>\n              Link\n            </a>\n          ) : (\n            \"\"\n          ),\n        cancel:\n          wrapper.status === \"awaitingExec\" ? (\n            <>\n              <button\n                style={{\n                  borderColor: \"white\",\n                  color: \"white\",\n                  backgroundColor: \"#4299e1\",\n                }}\n                onClick={async () => {\n                  const cancelTaskData = getCancelTaskData(wrapper.taskReceipt);\n                  try {\n                    await userProxyCast(\n                      [CONNECT_GELATO_ADDR],\n                      [cancelTaskData],\n                      userAccount,\n                      0,\n                      300000\n                    );\n                  } catch (err) {\n                    console.log(err);\n                  }\n                }}\n              >\n                Cancel\n              </button>\n            </>\n          ) : (\n            \"\"\n          ),\n      });\n    }\n    return newRows;\n  };\n\n  useEffect(() => {\n    if (data) {\n      const newRows = createRowData(userAccount, data);\n      if (newRows.length > 0) setRowData(newRows);\n    }\n  }, [data]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error)\n    return <p>Error fetching Gelato Subgraph, please refresh the page :)</p>;\n  return (\n    <>\n      <CardWrapper style={{ maxWidth: \"100%\" }}>\n        <Styles>\n          <table {...getTableProps()}>\n            <thead>\n              {// Loop over the header rows\n              headerGroups.map((headerGroup) => (\n                // Apply the header row props\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {// Loop over the headers in each row\n                  headerGroup.headers.map((column) => (\n                    // Apply the header cell props\n                    <th\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                    >\n                      {// Render the header\n                      column.render(\"Header\")}\n                      <span>\n                        {column.isSorted\n                          ? column.isSortedDesc\n                            ? \" ðŸ”½\"\n                            : \" ðŸ”¼\"\n                          : \"\"}\n                      </span>\n                    </th>\n                  ))}\n                </tr>\n              ))}\n            </thead>\n            {/* Apply the table body props */}\n            <tbody {...getTableBodyProps()}>\n              {// Loop over the table rows\n              rows.map((row) => {\n                // Prepare the row for display\n                prepareRow(row);\n                return (\n                  // Apply the row props\n                  <tr {...row.getRowProps()}>\n                    {// Loop over the rows cells\n                    row.cells.map((cell) => {\n                      // Apply the cell props\n                      return (\n                        <td {...cell.getCellProps()}>\n                          {// Render the cell contents\n                          cell.render(\"Cell\")}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </Styles>\n        <Button\n          background=\"#4299e1\"\n          onClick={async () => {\n            refetch();\n            setRowData([\n              {\n                id: \"\",\n                status: \"\",\n                submitDate: \"\",\n                limit: \"\",\n                feeratio: \"\",\n                execDate: \"\",\n                execLink: \"\",\n                cancel: \"\",\n              },\n            ]);\n            await sleep(1000);\n            setRowData(createRowData(userAccount, data));\n          }}\n        >\n          Refresh\n        </Button>\n      </CardWrapper>\n    </>\n  );\n};\n\nexport default TaskOverview;\n"]},"metadata":{},"sourceType":"module"}