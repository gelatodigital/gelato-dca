{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { getMiniAddress } from \"../utils/helpers\";\nimport { addresses, abis } from \"@gelato-krystal/contracts\";\nimport { GelatoCore } from \"@gelatonetwork/core\";\nconst {\n  INSTA_LIST_ADDR,\n  GELATO_CORE,\n  MAKER_RESOLVER_ADDR,\n  GELATO_KRYSTAL\n} = addresses;\nconst {\n  InstaList,\n  MakerResolver,\n  GelatoKrystalAbi\n} = abis;\nexport const getUserAddress = async provider => {\n  const signer = await provider.getSigner();\n  return await signer.getAddress();\n};\nexport const getMiniUserAddress = async provider => {\n  return getMiniAddress(await getUserAddress(provider));\n};\nexport const getGelatoKrystal = async user => {\n  const signer = await user.getSigner();\n  return new ethers.Contract(GELATO_KRYSTAL, GelatoKrystalAbi, signer);\n};\nexport const getGelatoGasPrice = async provider => {\n  const gelatoCoreContract = new ethers.Contract(GELATO_CORE, GelatoCore.abi, provider);\n  const oracleAbi = [\"function latestAnswer() view returns (int256)\"];\n  const gelatoGasPriceOracleAddress = await gelatoCoreContract.gelatoGasPriceOracle(); // Get gelatoGasPriceOracleAddress\n\n  const gelatoGasPriceOracle = new ethers.Contract(gelatoGasPriceOracleAddress, oracleAbi, provider); // lastAnswer is used by GelatoGasPriceOracle as well as the Chainlink Oracle\n\n  return await gelatoGasPriceOracle.latestAnswer();\n};\nexport const getTokenBalance = async (user, token) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n  const tokenContract = new ethers.Contract(token, [\"function balanceOf(address) view returns (uint256)\"], signer);\n  const userBalance = await tokenContract.balanceOf(userAddr);\n  return userBalance;\n};\nexport const getTokenBalanceString = async (userAccount, token, tokenSymbol, decimals) => {\n  const userBalance = await getTokenBalance(userAccount, token);\n  const userBalanceHumanReadable = ethers.utils.formatUnits(userBalance, decimals);\n  return `${parseFloat(userBalanceHumanReadable).toFixed(8)} ${tokenSymbol}`;\n};","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/services/stateReads.js"],"names":["ethers","getMiniAddress","addresses","abis","GelatoCore","INSTA_LIST_ADDR","GELATO_CORE","MAKER_RESOLVER_ADDR","GELATO_KRYSTAL","InstaList","MakerResolver","GelatoKrystalAbi","getUserAddress","provider","signer","getSigner","getAddress","getMiniUserAddress","getGelatoKrystal","user","Contract","getGelatoGasPrice","gelatoCoreContract","abi","oracleAbi","gelatoGasPriceOracleAddress","gelatoGasPriceOracle","latestAnswer","getTokenBalance","token","userAddr","tokenContract","userBalance","balanceOf","getTokenBalanceString","userAccount","tokenSymbol","decimals","userBalanceHumanReadable","utils","formatUnits","parseFloat","toFixed"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,2BAAhC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,MAAM;AACJC,EAAAA,eADI;AAEJC,EAAAA,WAFI;AAGJC,EAAAA,mBAHI;AAIJC,EAAAA;AAJI,IAKFN,SALJ;AAMA,MAAM;AAAEO,EAAAA,SAAF;AAAaC,EAAAA,aAAb;AAA4BC,EAAAA;AAA5B,IAAiDR,IAAvD;AAEA,OAAO,MAAMS,cAAc,GAAG,MAAOC,QAAP,IAAoB;AAChD,QAAMC,MAAM,GAAG,MAAMD,QAAQ,CAACE,SAAT,EAArB;AACA,SAAO,MAAMD,MAAM,CAACE,UAAP,EAAb;AACD,CAHM;AAKP,OAAO,MAAMC,kBAAkB,GAAG,MAAOJ,QAAP,IAAoB;AACpD,SAAOZ,cAAc,CAAC,MAAMW,cAAc,CAACC,QAAD,CAArB,CAArB;AACD,CAFM;AAIP,OAAO,MAAMK,gBAAgB,GAAG,MAAOC,IAAP,IAAgB;AAC9C,QAAML,MAAM,GAAG,MAAMK,IAAI,CAACJ,SAAL,EAArB;AACA,SAAO,IAAIf,MAAM,CAACoB,QAAX,CAAoBZ,cAApB,EAAoCG,gBAApC,EAAsDG,MAAtD,CAAP;AACD,CAHM;AAKP,OAAO,MAAMO,iBAAiB,GAAG,MAAOR,QAAP,IAAoB;AACnD,QAAMS,kBAAkB,GAAG,IAAItB,MAAM,CAACoB,QAAX,CACzBd,WADyB,EAEzBF,UAAU,CAACmB,GAFc,EAGzBV,QAHyB,CAA3B;AAMA,QAAMW,SAAS,GAAG,CAAC,+CAAD,CAAlB;AAEA,QAAMC,2BAA2B,GAAG,MAAMH,kBAAkB,CAACI,oBAAnB,EAA1C,CATmD,CAWnD;;AACA,QAAMA,oBAAoB,GAAG,IAAI1B,MAAM,CAACoB,QAAX,CAC3BK,2BAD2B,EAE3BD,SAF2B,EAG3BX,QAH2B,CAA7B,CAZmD,CAkBnD;;AACA,SAAO,MAAMa,oBAAoB,CAACC,YAArB,EAAb;AACD,CApBM;AAsBP,OAAO,MAAMC,eAAe,GAAG,OAAOT,IAAP,EAAaU,KAAb,KAAuB;AACpD,QAAMf,MAAM,GAAG,MAAMK,IAAI,CAACJ,SAAL,EAArB;AACA,QAAMe,QAAQ,GAAG,MAAMhB,MAAM,CAACE,UAAP,EAAvB;AAEA,QAAMe,aAAa,GAAG,IAAI/B,MAAM,CAACoB,QAAX,CACpBS,KADoB,EAEpB,CAAC,oDAAD,CAFoB,EAGpBf,MAHoB,CAAtB;AAKA,QAAMkB,WAAW,GAAG,MAAMD,aAAa,CAACE,SAAd,CAAwBH,QAAxB,CAA1B;AACA,SAAOE,WAAP;AACD,CAXM;AAaP,OAAO,MAAME,qBAAqB,GAAG,OACnCC,WADmC,EAEnCN,KAFmC,EAGnCO,WAHmC,EAInCC,QAJmC,KAKhC;AACH,QAAML,WAAW,GAAG,MAAMJ,eAAe,CAACO,WAAD,EAAcN,KAAd,CAAzC;AACA,QAAMS,wBAAwB,GAAGtC,MAAM,CAACuC,KAAP,CAAaC,WAAb,CAC/BR,WAD+B,EAE/BK,QAF+B,CAAjC;AAIA,SAAQ,GAAEI,UAAU,CAACH,wBAAD,CAAV,CAAqCI,OAArC,CAA6C,CAA7C,CAAgD,IAAGN,WAAY,EAAzE;AACD,CAZM","sourcesContent":["import { ethers } from \"ethers\";\nimport { getMiniAddress } from \"../utils/helpers\";\nimport { addresses, abis } from \"@gelato-krystal/contracts\";\nimport { GelatoCore } from \"@gelatonetwork/core\";\n\nconst {\n  INSTA_LIST_ADDR,\n  GELATO_CORE,\n  MAKER_RESOLVER_ADDR,\n  GELATO_KRYSTAL,\n} = addresses;\nconst { InstaList, MakerResolver, GelatoKrystalAbi } = abis;\n\nexport const getUserAddress = async (provider) => {\n  const signer = await provider.getSigner();\n  return await signer.getAddress();\n};\n\nexport const getMiniUserAddress = async (provider) => {\n  return getMiniAddress(await getUserAddress(provider));\n};\n\nexport const getGelatoKrystal = async (user) => {\n  const signer = await user.getSigner();\n  return new ethers.Contract(GELATO_KRYSTAL, GelatoKrystalAbi, signer);\n};\n\nexport const getGelatoGasPrice = async (provider) => {\n  const gelatoCoreContract = new ethers.Contract(\n    GELATO_CORE,\n    GelatoCore.abi,\n    provider\n  );\n\n  const oracleAbi = [\"function latestAnswer() view returns (int256)\"];\n\n  const gelatoGasPriceOracleAddress = await gelatoCoreContract.gelatoGasPriceOracle();\n\n  // Get gelatoGasPriceOracleAddress\n  const gelatoGasPriceOracle = new ethers.Contract(\n    gelatoGasPriceOracleAddress,\n    oracleAbi,\n    provider\n  );\n\n  // lastAnswer is used by GelatoGasPriceOracle as well as the Chainlink Oracle\n  return await gelatoGasPriceOracle.latestAnswer();\n};\n\nexport const getTokenBalance = async (user, token) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n\n  const tokenContract = new ethers.Contract(\n    token,\n    [\"function balanceOf(address) view returns (uint256)\"],\n    signer\n  );\n  const userBalance = await tokenContract.balanceOf(userAddr);\n  return userBalance;\n};\n\nexport const getTokenBalanceString = async (\n  userAccount,\n  token,\n  tokenSymbol,\n  decimals\n) => {\n  const userBalance = await getTokenBalance(userAccount, token);\n  const userBalanceHumanReadable = ethers.utils.formatUnits(\n    userBalance,\n    decimals\n  );\n  return `${parseFloat(userBalanceHumanReadable).toFixed(8)} ${tokenSymbol}`;\n};\n"]},"metadata":{},"sourceType":"module"}