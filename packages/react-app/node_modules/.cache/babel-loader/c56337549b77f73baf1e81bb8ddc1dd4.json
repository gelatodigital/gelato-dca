{"ast":null,"code":"var _jsxFileName = \"/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/SubmitTask.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { ViewCard, CardWrapper, Button } from \"../components\";\nimport { getVault, getUserProxy } from \"../services/stateReads\";\nimport { submitOrder } from \"../services/stateWrites\";\nimport { addresses } from \"@gelato-krystal/contracts\";\nimport { submitRefinanceMakerToMaker } from \"../services/payloadGeneration\";\nconst {\n  DAI,\n  USDC\n} = addresses;\n\nconst SubmitTask = ({\n  userAccount\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [inputs, setInputs] = useState({});\n  const [totalAmount, setTotalAmount] = useState();\n  const [intervalSeconds, setIntervalSeconds] = useState();\n  const [tradeNum, setTradeNum] = useState();\n\n  const inputsUpdates = async () => {\n    const userProxy = await getUserProxy(userAccount);\n    const vA = await getVault(userAccount, userProxy, \"ETH-A\");\n    const vAId = vA !== undefined ? vA.id : 0;\n    const vB = await getVault(userAccount, userProxy, \"ETH-B\");\n    const vBId = vB !== undefined ? vB.id : 0;\n    setInputs({ ...inputs,\n      vaultAId: vAId,\n      vaultBId: vBId,\n      defaultValueAmount: 30,\n      defaultValueInterval: 120,\n      defaultValueTradeNum: 3\n    });\n  };\n\n  const handleTotalAmountChange = async event => {\n    const newValue = event.target.value;\n    setTotalAmount(newValue);\n  };\n\n  const handleIntervalSecondsChange = async event => {\n    const newValue = event.target.value;\n    setIntervalSeconds(newValue);\n  };\n\n  const handleTradeNumChange = async event => {\n    const newValue = event.target.value;\n    setTradeNum(newValue);\n  };\n\n  const submit = async () => {\n    if (totalAmount === 0) return;\n    if (intervalSeconds === 0) return;\n    if (parseInt(inputs.vaultAId) === 0) return;\n    const data = await submitRefinanceMakerToMaker(userAccount, ethers.utils.parseUnits(String(parseFloat(totalAmount) / 100), 18), ethers.utils.parseUnits(String(parseFloat(intervalSeconds) / 100), 18), inputs.vaultAId, inputs.vaultBId);\n    await submitOrder(user, DAI, USDC, delay, amountPerTrade, nTrades, minSlippage = 9001, maxSlippage = 9000, gasPriceCeil = 0);\n  };\n\n  useEffect(() => {\n    inputsUpdates();\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ViewCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      margin: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Total Amount of DAI to sell for USDC\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      maxWidth: \"80%\"\n    },\n    type: \"number\",\n    value: totalAmount,\n    onChange: handleTotalAmountChange,\n    defaultValueAmount: inputs.defaultValueAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ViewCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      margin: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Interval between each trade (in seconds)\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      maxWidth: \"80%\"\n    },\n    type: \"number\",\n    value: intervalSeconds,\n    onChange: handleIntervalSecondsChange,\n    defaultValueAmount: inputs.defaultValueInterval,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ViewCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: {\n      margin: \"10px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Number of trades to split the total amount up\"), /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      maxWidth: \"80%\"\n    },\n    type: \"number\",\n    value: tradeNum,\n    onChange: handleTradeNumChange,\n    defaultValueAmount: inputs.defaultValueTradeNum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ViewCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, !loading && /*#__PURE__*/React.createElement(Button, {\n    onClick: async () => {\n      setLoading(true);\n\n      try {\n        await submit();\n        setLoading(false);\n      } catch {\n        setLoading(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, `Submit Task to execute ${tradeNum} trades, each worth ${totalAmount / tradeNum} DAI`), loading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 23\n    }\n  }, \"waiting...\"))));\n};\n\nexport default SubmitTask;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/SubmitTask.js"],"names":["React","useState","useEffect","ethers","ViewCard","CardWrapper","Button","getVault","getUserProxy","submitOrder","addresses","submitRefinanceMakerToMaker","DAI","USDC","SubmitTask","userAccount","loading","setLoading","inputs","setInputs","totalAmount","setTotalAmount","intervalSeconds","setIntervalSeconds","tradeNum","setTradeNum","inputsUpdates","userProxy","vA","vAId","undefined","id","vB","vBId","vaultAId","vaultBId","defaultValueAmount","defaultValueInterval","defaultValueTradeNum","handleTotalAmountChange","event","newValue","target","value","handleIntervalSecondsChange","handleTradeNumChange","submit","parseInt","data","utils","parseUnits","String","parseFloat","user","delay","amountPerTrade","nTrades","minSlippage","maxSlippage","gasPriceCeil","margin","maxWidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,QAA8C,eAA9C;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,wBAAvC;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,MAAM;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,IAAgBH,SAAtB;;AAEA,MAAMI,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,EAA9C;AACA,QAAM,CAACqB,eAAD,EAAkBC,kBAAlB,IAAwCtB,QAAQ,EAAtD;AACA,QAAM,CAACuB,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,EAAxC;;AAEA,QAAMyB,aAAa,GAAG,YAAY;AAChC,UAAMC,SAAS,GAAG,MAAMnB,YAAY,CAACO,WAAD,CAApC;AACA,UAAMa,EAAE,GAAG,MAAMrB,QAAQ,CAACQ,WAAD,EAAcY,SAAd,EAAyB,OAAzB,CAAzB;AACA,UAAME,IAAI,GAAGD,EAAE,KAAKE,SAAP,GAAmBF,EAAE,CAACG,EAAtB,GAA2B,CAAxC;AACA,UAAMC,EAAE,GAAG,MAAMzB,QAAQ,CAACQ,WAAD,EAAcY,SAAd,EAAyB,OAAzB,CAAzB;AACA,UAAMM,IAAI,GAAGD,EAAE,KAAKF,SAAP,GAAmBE,EAAE,CAACD,EAAtB,GAA2B,CAAxC;AAEAZ,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAERgB,MAAAA,QAAQ,EAAEL,IAFF;AAGRM,MAAAA,QAAQ,EAAEF,IAHF;AAIRG,MAAAA,kBAAkB,EAAE,EAJZ;AAKRC,MAAAA,oBAAoB,EAAE,GALd;AAMRC,MAAAA,oBAAoB,EAAE;AANd,KAAD,CAAT;AAQD,GAfD;;AAiBA,QAAMC,uBAAuB,GAAG,MAAOC,KAAP,IAAiB;AAC/C,UAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA9B;AACAtB,IAAAA,cAAc,CAACoB,QAAD,CAAd;AACD,GAHD;;AAKA,QAAMG,2BAA2B,GAAG,MAAOJ,KAAP,IAAiB;AACnD,UAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA9B;AACApB,IAAAA,kBAAkB,CAACkB,QAAD,CAAlB;AACD,GAHD;;AAKA,QAAMI,oBAAoB,GAAG,MAAOL,KAAP,IAAiB;AAC5C,UAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA9B;AACAlB,IAAAA,WAAW,CAACgB,QAAD,CAAX;AACD,GAHD;;AAKA,QAAMK,MAAM,GAAG,YAAY;AACzB,QAAI1B,WAAW,KAAK,CAApB,EAAuB;AACvB,QAAIE,eAAe,KAAK,CAAxB,EAA2B;AAC3B,QAAIyB,QAAQ,CAAC7B,MAAM,CAACgB,QAAR,CAAR,KAA8B,CAAlC,EAAqC;AAErC,UAAMc,IAAI,GAAG,MAAMrC,2BAA2B,CAC5CI,WAD4C,EAE5CZ,MAAM,CAAC8C,KAAP,CAAaC,UAAb,CAAwBC,MAAM,CAACC,UAAU,CAAChC,WAAD,CAAV,GAA0B,GAA3B,CAA9B,EAA+D,EAA/D,CAF4C,EAG5CjB,MAAM,CAAC8C,KAAP,CAAaC,UAAb,CAAwBC,MAAM,CAACC,UAAU,CAAC9B,eAAD,CAAV,GAA8B,GAA/B,CAA9B,EAAmE,EAAnE,CAH4C,EAI5CJ,MAAM,CAACgB,QAJqC,EAK5ChB,MAAM,CAACiB,QALqC,CAA9C;AAQA,UAAM1B,WAAW,CACf4C,IADe,EAEfzC,GAFe,EAGfC,IAHe,EAIfyC,KAJe,EAKfC,cALe,EAMfC,OANe,EAOdC,WAAW,GAAG,IAPA,EAQdC,WAAW,GAAG,IARA,EASdC,YAAY,GAAG,CATD,CAAjB;AAWD,GAxBD;;AA0BAzD,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,aAAa;AACd,GAFQ,CAAT;AAIA,sBACE,uDACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,KAAK,EAAE;AAAEkC,MAAAA,MAAM,EAAE;AAAV,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF,eAKE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KADT;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAEzC,WAHT;AAIE,IAAA,QAAQ,EAAEmB,uBAJZ;AAKE,IAAA,kBAAkB,EAAErB,MAAM,CAACkB,kBAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,eAeE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,KAAK,EAAE;AAAEwB,MAAAA,MAAM,EAAE;AAAV,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADF,eAKE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KADT;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAEvC,eAHT;AAIE,IAAA,QAAQ,EAAEsB,2BAJZ;AAKE,IAAA,kBAAkB,EAAE1B,MAAM,CAACmB,oBAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAfF,eA6BE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,KAAK,EAAE;AAAEuB,MAAAA,MAAM,EAAE;AAAV,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADF,eAKE;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KADT;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,KAAK,EAAErC,QAHT;AAIE,IAAA,QAAQ,EAAEqB,oBAJZ;AAKE,IAAA,kBAAkB,EAAE3B,MAAM,CAACoB,oBAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CA7BF,eA2CE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACtB,OAAD,iBACC,oBAAC,MAAD;AACE,IAAA,OAAO,EAAE,YAAY;AACnBC,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACF,cAAM6B,MAAM,EAAZ;AACA7B,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAHD,CAGE,MAAM;AACNA,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWI,0BAAyBO,QAAS,uBAClCJ,WAAW,GAAGI,QACf,MAbH,CAFJ,EAkBGR,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAlBd,CA3CF,CADF,CADF;AAoED,CAzID;;AA2IA,eAAeF,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { ViewCard, CardWrapper, Button } from \"../components\";\nimport { getVault, getUserProxy } from \"../services/stateReads\";\nimport { submitOrder } from \"../services/stateWrites\";\nimport { addresses } from \"@gelato-krystal/contracts\";\nimport { submitRefinanceMakerToMaker } from \"../services/payloadGeneration\";\nconst { DAI, USDC } = addresses;\n\nconst SubmitTask = ({ userAccount }) => {\n  const [loading, setLoading] = useState(false);\n  const [inputs, setInputs] = useState({});\n  const [totalAmount, setTotalAmount] = useState();\n  const [intervalSeconds, setIntervalSeconds] = useState();\n  const [tradeNum, setTradeNum] = useState();\n\n  const inputsUpdates = async () => {\n    const userProxy = await getUserProxy(userAccount);\n    const vA = await getVault(userAccount, userProxy, \"ETH-A\");\n    const vAId = vA !== undefined ? vA.id : 0;\n    const vB = await getVault(userAccount, userProxy, \"ETH-B\");\n    const vBId = vB !== undefined ? vB.id : 0;\n\n    setInputs({\n      ...inputs,\n      vaultAId: vAId,\n      vaultBId: vBId,\n      defaultValueAmount: 30,\n      defaultValueInterval: 120,\n      defaultValueTradeNum: 3,\n    });\n  };\n\n  const handleTotalAmountChange = async (event) => {\n    const newValue = event.target.value;\n    setTotalAmount(newValue);\n  };\n\n  const handleIntervalSecondsChange = async (event) => {\n    const newValue = event.target.value;\n    setIntervalSeconds(newValue);\n  };\n\n  const handleTradeNumChange = async (event) => {\n    const newValue = event.target.value;\n    setTradeNum(newValue);\n  };\n\n  const submit = async () => {\n    if (totalAmount === 0) return;\n    if (intervalSeconds === 0) return;\n    if (parseInt(inputs.vaultAId) === 0) return;\n\n    const data = await submitRefinanceMakerToMaker(\n      userAccount,\n      ethers.utils.parseUnits(String(parseFloat(totalAmount) / 100), 18),\n      ethers.utils.parseUnits(String(parseFloat(intervalSeconds) / 100), 18),\n      inputs.vaultAId,\n      inputs.vaultBId\n    );\n\n    await submitOrder(\n      user,\n      DAI,\n      USDC,\n      delay,\n      amountPerTrade,\n      nTrades,\n      (minSlippage = 9001),\n      (maxSlippage = 9000),\n      (gasPriceCeil = 0)\n    );\n  };\n\n  useEffect(() => {\n    inputsUpdates();\n  });\n\n  return (\n    <>\n      <CardWrapper>\n        <ViewCard>\n          <label style={{ margin: \"10px\" }}>\n            Total Amount of DAI to sell for USDC\n          </label>\n\n          <input\n            style={{ maxWidth: \"80%\" }}\n            type=\"number\"\n            value={totalAmount}\n            onChange={handleTotalAmountChange}\n            defaultValueAmount={inputs.defaultValueAmount}\n          />\n        </ViewCard>\n\n        <ViewCard>\n          <label style={{ margin: \"10px\" }}>\n            Interval between each trade (in seconds)\n          </label>\n\n          <input\n            style={{ maxWidth: \"80%\" }}\n            type=\"number\"\n            value={intervalSeconds}\n            onChange={handleIntervalSecondsChange}\n            defaultValueAmount={inputs.defaultValueInterval}\n          />\n        </ViewCard>\n\n        <ViewCard>\n          <label style={{ margin: \"10px\" }}>\n            Number of trades to split the total amount up\n          </label>\n\n          <input\n            style={{ maxWidth: \"80%\" }}\n            type=\"number\"\n            value={tradeNum}\n            onChange={handleTradeNumChange}\n            defaultValueAmount={inputs.defaultValueTradeNum}\n          />\n        </ViewCard>\n\n        <ViewCard>\n          {!loading && (\n            <Button\n              onClick={async () => {\n                setLoading(true);\n                try {\n                  await submit();\n                  setLoading(false);\n                } catch {\n                  setLoading(false);\n                }\n              }}\n            >\n              {`Submit Task to execute ${tradeNum} trades, each worth ${\n                totalAmount / tradeNum\n              } DAI`}\n            </Button>\n          )}\n          {loading && <p>waiting...</p>}\n        </ViewCard>\n      </CardWrapper>\n    </>\n  );\n};\n\nexport default SubmitTask;\n"]},"metadata":{},"sourceType":"module"}