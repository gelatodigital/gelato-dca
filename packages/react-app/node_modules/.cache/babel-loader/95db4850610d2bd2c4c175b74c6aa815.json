{"ast":null,"code":"var _jsxFileName = \"/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/TaskOverview.js\";\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport { CardWrapper, Button } from \"../components\";\nimport { useTable, useSortBy } from \"react-table\"; // Styled components\n\nimport styled from \"styled-components\"; // Graph QL Query\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport GET_TASK_RECEIPT_WRAPPERS from \"../graphql/gelato\";\nimport { sleep, decodeWithoutSignature, toPercentFormat, getDisplayablePercent } from \"../utils/helpers\";\nimport { getCanExecStatus } from \"../services/stateReads\";\nimport { utils } from \"ethers\";\nimport { addresses } from \"@gelato-krystal/contracts\";\nconst {\n  GELATO_KRYSTAL\n} = addresses;\nconst Styles = styled.div`\n  padding: 1rem;\n  font-size: 1rem;\n  color: black;\n\n  table {\n    border-spacing: 0;\n    border: 2px solid #4299e1;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      text-align: center;\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid #4299e1;\n      border-right: 1px solid #4299e1;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nconst TaskOverview = ({\n  userAddress,\n  userAccount\n}) => {\n  const {\n    loading,\n    error,\n    data,\n    refetch,\n    fetchMore\n  } = useQuery(GET_TASK_RECEIPT_WRAPPERS, {\n    variables: {\n      skip: 0,\n      proxyAddress: GELATO_KRYSTAL.toLowerCase()\n    }\n  });\n  console.log(data);\n  const [rowData, setRowData] = useState([{\n    id: \"\",\n    user: \"\",\n    status: \"\",\n    submitDate: \"\",\n    amount: \"\",\n    execDate: \"\",\n    execLink: \"\"\n  }]);\n  const columns = useMemo(() => [{\n    Header: \"#\",\n    accessor: \"id\" // accessor is the \"key\" in the data\n\n  }, {\n    Header: \"Task Status\",\n    accessor: \"status\"\n  }, {\n    Header: \"Submit Link\",\n    accessor: \"submitDate\"\n  }, {\n    Header: \"Amount to be sold\",\n    accessor: \"amount\"\n  }, {\n    Header: \"Exec Date\",\n    accessor: \"execDate\"\n  }, {\n    Header: \"Exec Link\",\n    accessor: \"execLink\"\n  }, {\n    Header: \"Cancel Task\",\n    accessor: \"cancel\"\n  }], []);\n\n  const decodeUserAddress = data => {\n    return String(decodeWithoutSignature([\"address\", \"address\", \"uint256\", \"address\", \"uint256\"], data)[3]);\n  };\n\n  const decodeAmountPerTrade = data => {\n    return String(decodeWithoutSignature([\"address\", \"address\", \"uint256\", \"address\", \"uint256\"], data)[2]);\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data: rowData\n  }, useSortBy);\n\n  const createRowData = data => {\n    const newRows = []; // Filter all tasks by known Tash Hashes\n\n    for (let wrapper of data.taskReceiptWrappers) {\n      const decodedUserAddress = decodeUserAddress(wrapper.taskReceipt.tasks[0].actions[0].data);\n      console.log(decodedUserAddress);\n      console.log(userAddress);\n\n      if (utils.getAddress(userAddress) !== utils.getAddress(decodedUserAddress)) {\n        continue;\n      } // Check CanExec\n\n\n      getCanExecStatus(wrapper.taskReceipt.tasks[0]);\n      const execUrl = `https://ropsten.etherscan.io/tx/${wrapper.executionHash}`;\n      const submitUrl = `https://ropsten.etherscan.io/tx/${wrapper.submissionHash}`;\n      newRows.push({\n        id: parseInt(wrapper.id),\n        status: wrapper.status,\n        submitDate: /*#__PURE__*/React.createElement(\"a\", {\n          target: \"_blank\",\n          href: submitUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 11\n          }\n        }, \"Link\"),\n        amount: decodeAmountPerTrade(wrapper.taskReceipt.tasks[0].actions[0].data),\n        execDate: wrapper.executionDate !== null ? new Date(wrapper.executionDate * 1000).toLocaleDateString().toString() : \"\",\n        execLink: wrapper.status !== \"awaitingExec\" ? /*#__PURE__*/React.createElement(\"a\", {\n          target: \"_blank\",\n          href: execUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }\n        }, \"Link\") : \"\",\n        cancel: wrapper.status === \"awaitingExec\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n          style: {\n            borderColor: \"white\",\n            color: \"white\",\n            backgroundColor: \"#4299e1\"\n          },\n          onClick: async () => {\n            console.log(\"Cancel Feature coming later\"); // const cancelTaskData = getCancelTaskData(wrapper.taskReceipt);\n            // try {\n            //   await userProxyCast(\n            //     [CONNECT_GELATO_ADDR],\n            //     [cancelTaskData],\n            //     userAccount,\n            //     0,\n            //     300000\n            //   );\n            // } catch (err) {\n            //   console.log(err);\n            // }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }\n        }, \"Cancel\")) : \"\"\n      });\n    }\n\n    return newRows;\n  };\n\n  useEffect(() => {\n    if (data) {\n      const newRows = createRowData(data);\n      if (newRows.length > 0) setRowData(newRows);\n    }\n  }, [data]);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 12\n    }\n  }, \"Error fetching Gelato Subgraph, please refresh the page :)\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardWrapper, {\n    style: {\n      maxWidth: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, // Loop over the header rows\n  headerGroups.map(headerGroup =>\n  /*#__PURE__*/\n  // Apply the header row props\n  React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 19\n    }\n  }), // Loop over the headers in each row\n  headerGroup.headers.map(column =>\n  /*#__PURE__*/\n  // Apply the header cell props\n  React.createElement(\"th\", Object.assign({}, column.getHeaderProps(column.getSortByToggleProps()), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 25\n    }\n  }), // Render the header\n  column.render(\"Header\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 27\n    }\n  }, column.isSorted ? column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\" : \"\")))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }), // Loop over the table rows\n  rows.map(row => {\n    // Prepare the row for display\n    prepareRow(row);\n    return (\n      /*#__PURE__*/\n      // Apply the row props\n      React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }\n      }), // Loop over the rows cells\n      row.cells.map(cell => {\n        // Apply the cell props\n        return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 29\n          }\n        }), // Render the cell contents\n        cell.render(\"Cell\"));\n      }))\n    );\n  })))), /*#__PURE__*/React.createElement(Button, {\n    background: \"#4299e1\",\n    onClick: async () => {\n      refetch();\n      setRowData([{\n        id: \"\",\n        status: \"\",\n        submitDate: \"\",\n        limit: \"\",\n        feeratio: \"\",\n        execDate: \"\",\n        execLink: \"\",\n        cancel: \"\"\n      }]);\n      await sleep(1000);\n      setRowData(createRowData(data));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, \"Refresh\")));\n};\n\nexport default TaskOverview;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/TaskOverview.js"],"names":["React","useMemo","useState","useEffect","CardWrapper","Button","useTable","useSortBy","styled","useQuery","GET_TASK_RECEIPT_WRAPPERS","sleep","decodeWithoutSignature","toPercentFormat","getDisplayablePercent","getCanExecStatus","utils","addresses","GELATO_KRYSTAL","Styles","div","TaskOverview","userAddress","userAccount","loading","error","data","refetch","fetchMore","variables","skip","proxyAddress","toLowerCase","console","log","rowData","setRowData","id","user","status","submitDate","amount","execDate","execLink","columns","Header","accessor","decodeUserAddress","String","decodeAmountPerTrade","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","createRowData","newRows","wrapper","taskReceiptWrappers","decodedUserAddress","taskReceipt","tasks","actions","getAddress","execUrl","executionHash","submitUrl","submissionHash","push","parseInt","executionDate","Date","toLocaleDateString","toString","cancel","borderColor","color","backgroundColor","length","maxWidth","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","limit","feeratio"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useEffect } from \"react\";\nimport { CardWrapper, Button } from \"../components\";\nimport { useTable, useSortBy } from \"react-table\";\n// Styled components\nimport styled from \"styled-components\";\n// Graph QL Query\nimport { useQuery } from \"@apollo/react-hooks\";\nimport GET_TASK_RECEIPT_WRAPPERS from \"../graphql/gelato\";\nimport {\n  sleep,\n  decodeWithoutSignature,\n  toPercentFormat,\n  getDisplayablePercent,\n} from \"../utils/helpers\";\nimport { getCanExecStatus } from \"../services/stateReads\";\nimport { utils } from \"ethers\";\nimport { addresses } from \"@gelato-krystal/contracts\";\nconst { GELATO_KRYSTAL } = addresses;\n\nconst Styles = styled.div`\n  padding: 1rem;\n  font-size: 1rem;\n  color: black;\n\n  table {\n    border-spacing: 0;\n    border: 2px solid #4299e1;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      text-align: center;\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid #4299e1;\n      border-right: 1px solid #4299e1;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nconst TaskOverview = ({ userAddress, userAccount }) => {\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_TASK_RECEIPT_WRAPPERS,\n    {\n      variables: {\n        skip: 0,\n        proxyAddress: GELATO_KRYSTAL.toLowerCase(),\n      },\n    }\n  );\n  console.log(data);\n\n  const [rowData, setRowData] = useState([\n    {\n      id: \"\",\n      user: \"\",\n      status: \"\",\n      submitDate: \"\",\n      amount: \"\",\n      execDate: \"\",\n      execLink: \"\",\n    },\n  ]);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"#\",\n        accessor: \"id\", // accessor is the \"key\" in the data\n      },\n\n      {\n        Header: \"Task Status\",\n        accessor: \"status\",\n      },\n      {\n        Header: \"Submit Link\",\n        accessor: \"submitDate\",\n      },\n      {\n        Header: \"Amount to be sold\",\n        accessor: \"amount\",\n      },\n      {\n        Header: \"Exec Date\",\n        accessor: \"execDate\",\n      },\n      {\n        Header: \"Exec Link\",\n        accessor: \"execLink\",\n      },\n      {\n        Header: \"Cancel Task\",\n        accessor: \"cancel\",\n      },\n    ],\n    []\n  );\n\n  const decodeUserAddress = (data) => {\n    return String(\n      decodeWithoutSignature(\n        [\"address\", \"address\", \"uint256\", \"address\", \"uint256\"],\n        data\n      )[3]\n    );\n  };\n\n  const decodeAmountPerTrade = (data) => {\n    return String(\n      decodeWithoutSignature(\n        [\"address\", \"address\", \"uint256\", \"address\", \"uint256\"],\n        data\n      )[2]\n    );\n  };\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data: rowData }, useSortBy);\n\n  const createRowData = (data) => {\n    const newRows = [];\n    // Filter all tasks by known Tash Hashes\n    for (let wrapper of data.taskReceiptWrappers) {\n      const decodedUserAddress = decodeUserAddress(\n        wrapper.taskReceipt.tasks[0].actions[0].data\n      );\n      console.log(decodedUserAddress);\n      console.log(userAddress);\n      if (\n        utils.getAddress(userAddress) !== utils.getAddress(decodedUserAddress)\n      ) {\n        continue;\n      }\n\n      // Check CanExec\n      getCanExecStatus(wrapper.taskReceipt.tasks[0]);\n\n      const execUrl = `https://ropsten.etherscan.io/tx/${wrapper.executionHash}`;\n      const submitUrl = `https://ropsten.etherscan.io/tx/${wrapper.submissionHash}`;\n      newRows.push({\n        id: parseInt(wrapper.id),\n        status: wrapper.status,\n        submitDate: (\n          <a target=\"_blank\" href={submitUrl}>\n            Link\n          </a>\n        ),\n        amount: decodeAmountPerTrade(\n          wrapper.taskReceipt.tasks[0].actions[0].data\n        ),\n        execDate:\n          wrapper.executionDate !== null\n            ? new Date(wrapper.executionDate * 1000)\n                .toLocaleDateString()\n                .toString()\n            : \"\",\n        execLink:\n          wrapper.status !== \"awaitingExec\" ? (\n            <a target=\"_blank\" href={execUrl}>\n              Link\n            </a>\n          ) : (\n            \"\"\n          ),\n        cancel:\n          wrapper.status === \"awaitingExec\" ? (\n            <>\n              <button\n                style={{\n                  borderColor: \"white\",\n                  color: \"white\",\n                  backgroundColor: \"#4299e1\",\n                }}\n                onClick={async () => {\n                  console.log(\"Cancel Feature coming later\");\n                  // const cancelTaskData = getCancelTaskData(wrapper.taskReceipt);\n                  // try {\n                  //   await userProxyCast(\n                  //     [CONNECT_GELATO_ADDR],\n                  //     [cancelTaskData],\n                  //     userAccount,\n                  //     0,\n                  //     300000\n                  //   );\n                  // } catch (err) {\n                  //   console.log(err);\n                  // }\n                }}\n              >\n                Cancel\n              </button>\n            </>\n          ) : (\n            \"\"\n          ),\n      });\n    }\n    return newRows;\n  };\n\n  useEffect(() => {\n    if (data) {\n      const newRows = createRowData(data);\n      if (newRows.length > 0) setRowData(newRows);\n    }\n  }, [data]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error)\n    return <p>Error fetching Gelato Subgraph, please refresh the page :)</p>;\n  return (\n    <>\n      <CardWrapper style={{ maxWidth: \"100%\" }}>\n        <Styles>\n          <table {...getTableProps()}>\n            <thead>\n              {\n                // Loop over the header rows\n                headerGroups.map((headerGroup) => (\n                  // Apply the header row props\n                  <tr {...headerGroup.getHeaderGroupProps()}>\n                    {\n                      // Loop over the headers in each row\n                      headerGroup.headers.map((column) => (\n                        // Apply the header cell props\n                        <th\n                          {...column.getHeaderProps(\n                            column.getSortByToggleProps()\n                          )}\n                        >\n                          {\n                            // Render the header\n                            column.render(\"Header\")\n                          }\n                          <span>\n                            {column.isSorted\n                              ? column.isSortedDesc\n                                ? \" ðŸ”½\"\n                                : \" ðŸ”¼\"\n                              : \"\"}\n                          </span>\n                        </th>\n                      ))\n                    }\n                  </tr>\n                ))\n              }\n            </thead>\n            {/* Apply the table body props */}\n            <tbody {...getTableBodyProps()}>\n              {\n                // Loop over the table rows\n                rows.map((row) => {\n                  // Prepare the row for display\n                  prepareRow(row);\n                  return (\n                    // Apply the row props\n                    <tr {...row.getRowProps()}>\n                      {\n                        // Loop over the rows cells\n                        row.cells.map((cell) => {\n                          // Apply the cell props\n                          return (\n                            <td {...cell.getCellProps()}>\n                              {\n                                // Render the cell contents\n                                cell.render(\"Cell\")\n                              }\n                            </td>\n                          );\n                        })\n                      }\n                    </tr>\n                  );\n                })\n              }\n            </tbody>\n          </table>\n        </Styles>\n        <Button\n          background=\"#4299e1\"\n          onClick={async () => {\n            refetch();\n            setRowData([\n              {\n                id: \"\",\n                status: \"\",\n                submitDate: \"\",\n                limit: \"\",\n                feeratio: \"\",\n                execDate: \"\",\n                execLink: \"\",\n                cancel: \"\",\n              },\n            ]);\n            await sleep(1000);\n            setRowData(createRowData(data));\n          }}\n        >\n          Refresh\n        </Button>\n      </CardWrapper>\n    </>\n  );\n};\n\nexport default TaskOverview;\n"]},"metadata":{},"sourceType":"module"}