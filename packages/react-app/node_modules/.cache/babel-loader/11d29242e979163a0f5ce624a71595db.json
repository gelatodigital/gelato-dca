{"ast":null,"code":"var _jsxFileName = \"/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/User.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CardWrapper } from \"../components\";\nimport InputCard from \"../components/InputCard\";\nimport ViewCardWrapper from \"../components/ViewCardWrapper\";\nimport ViewCardButton from \"../components/ViewCardButton\";\nimport { getMiniUserAddress, getUserProxy, userHaveETHAVault, userHaveETHBVault, getVault, gelatoIsAuth, getTokenBalance, getETHAVaultDebt, getETHAVaultCols } from \"../services/stateReads\";\nimport { getMiniAddress, getFormattedNumber } from \"../utils/helpers\";\nimport { userProxyCast } from \"../services/stateWrites\";\nimport { addresses } from \"@project/contracts\";\nimport { openMakerVault, depositMakerVault, borrowMakerVault, authorizeGelato } from \"../services/payloadGeneration\";\nconst {\n  CONNECT_MAKER_ADDR,\n  CONNECT_AUTH,\n  DAI,\n  USDC\n} = addresses;\n\nconst User = ({\n  userAccount\n}) => {\n  const [inputs, setInputs] = useState({});\n  const [refresh, setRefresh] = useState(false);\n\n  const inputsUpdates = async () => {\n    const miniUserAddress = await updateUserAddress();\n    const userDaiBalance = await getFormattedNumber(await getTokenBalance(userAccount, DAI));\n    const userUsdcBalance = await getFormattedNumber(await getTokenBalance(userAccount, USDC));\n    setInputs({ ...inputs,\n      userAddress: miniUserAddress,\n      userDaiBalance: userDaiBalance\n    });\n  };\n\n  const updateDsProxyAddress = async () => {\n    return getMiniAddress(await getUserProxy(userAccount));\n  };\n\n  const updateUserAddress = async () => {\n    return await getMiniUserAddress(userAccount);\n  };\n\n  const openVaultA = async () => {\n    if (await userHaveETHAVault(userAccount, inputs.userProxy)) return;\n    await userProxyCast([CONNECT_MAKER_ADDR], [await openMakerVault(\"ETH-A\")], userAccount, 0, 500000);\n    setInputs({ ...inputs,\n      vaultAExist: true\n    });\n    setRefresh(!refresh);\n  };\n\n  const openVaultB = async () => {\n    if (await userHaveETHBVault(userAccount, inputs.userProxy)) return;\n    await userProxyCast([CONNECT_MAKER_ADDR], [await openMakerVault(\"ETH-B\")], userAccount, 0, 500000);\n    setInputs({ ...inputs,\n      vaultBExist: true\n    });\n    setRefresh(!refresh);\n  };\n\n  const depositVaultA = async newValue => {\n    const deposit = newValue;\n    const vault = await getVault(userAccount, inputs.userProxy, \"ETH-A\");\n    const vaultId = vault !== undefined ? vault.id : 0;\n    const valueOfDeposit = ethers.utils.parseEther(String(deposit));\n    const data = await depositMakerVault(valueOfDeposit, vaultId);\n    await userProxyCast([CONNECT_MAKER_ADDR], [data], userAccount, valueOfDeposit, 500000);\n    setRefresh(!refresh);\n  };\n\n  const borrowVaultA = async newValue => {\n    const borrow = newValue;\n    const vault = await getVault(userAccount, inputs.userProxy, \"ETH-A\");\n    const vaultId = vault !== undefined ? vault.id : 0;\n    const data = await borrowMakerVault(ethers.utils.parseEther(borrow), vaultId);\n    await userProxyCast([CONNECT_MAKER_ADDR], [data], userAccount, 0, 500000);\n    setRefresh(!refresh);\n  };\n\n  const setGelatoAsAuthority = async () => {\n    await userProxyCast([CONNECT_AUTH], [await authorizeGelato()], userAccount, 0, 500000);\n    setInputs({ ...inputs,\n      gelatoHasRight: true\n    });\n    setRefresh(!refresh);\n  };\n\n  useEffect(() => {\n    inputsUpdates();\n  }, [refresh]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ViewCardWrapper, {\n    title: \"User Address\",\n    state: inputs.userAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ViewCardWrapper, {\n    title: \"DAI Balance\",\n    state: inputs.dsProxyBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ViewCardWrapper, {\n    title: \"USDC Balance\",\n    state: inputs.dsProxyBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, !inputs.vaultAExist && /*#__PURE__*/React.createElement(ViewCardButton, {\n    title: \"Create ETH-A Vault\",\n    action: openVaultA,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }), inputs.vaultAExist && /*#__PURE__*/React.createElement(InputCard, {\n    title: \"Deposit Col in ETH-A Vault\",\n    btnText: \"Deposit\",\n    setInputs: setInputs,\n    inputs: inputs,\n    execFunc: depositVaultA,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }), inputs.vaultAExist && /*#__PURE__*/React.createElement(InputCard, {\n    title: \"Borrow DAI from ETH-A Vault\",\n    btnText: \"Borrow\",\n    setInputs: setInputs,\n    inputs: inputs,\n    execFunc: borrowVaultA,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  })), !inputs.vaultBExist && /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ViewCardButton, {\n    title: \"Create ETH-B Vault\",\n    action: openVaultB,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default User;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/pages/User.js"],"names":["React","useState","useEffect","ethers","CardWrapper","InputCard","ViewCardWrapper","ViewCardButton","getMiniUserAddress","getUserProxy","userHaveETHAVault","userHaveETHBVault","getVault","gelatoIsAuth","getTokenBalance","getETHAVaultDebt","getETHAVaultCols","getMiniAddress","getFormattedNumber","userProxyCast","addresses","openMakerVault","depositMakerVault","borrowMakerVault","authorizeGelato","CONNECT_MAKER_ADDR","CONNECT_AUTH","DAI","USDC","User","userAccount","inputs","setInputs","refresh","setRefresh","inputsUpdates","miniUserAddress","updateUserAddress","userDaiBalance","userUsdcBalance","userAddress","updateDsProxyAddress","openVaultA","userProxy","vaultAExist","openVaultB","vaultBExist","depositVaultA","newValue","deposit","vault","vaultId","undefined","id","valueOfDeposit","utils","parseEther","String","data","borrowVaultA","borrow","setGelatoAsAuthority","gelatoHasRight","dsProxyBalance"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CardWrapper } from \"../components\";\nimport InputCard from \"../components/InputCard\";\nimport ViewCardWrapper from \"../components/ViewCardWrapper\";\nimport ViewCardButton from \"../components/ViewCardButton\";\nimport {\n  getMiniUserAddress,\n  getUserProxy,\n  userHaveETHAVault,\n  userHaveETHBVault,\n  getVault,\n  gelatoIsAuth,\n  getTokenBalance,\n  getETHAVaultDebt,\n  getETHAVaultCols,\n} from \"../services/stateReads\";\nimport { getMiniAddress, getFormattedNumber } from \"../utils/helpers\";\nimport { userProxyCast } from \"../services/stateWrites\";\nimport { addresses } from \"@project/contracts\";\nimport {\n  openMakerVault,\n  depositMakerVault,\n  borrowMakerVault,\n  authorizeGelato,\n} from \"../services/payloadGeneration\";\nconst { CONNECT_MAKER_ADDR, CONNECT_AUTH, DAI, USDC } = addresses;\n\nconst User = ({ userAccount }) => {\n  const [inputs, setInputs] = useState({});\n  const [refresh, setRefresh] = useState(false);\n\n  const inputsUpdates = async () => {\n    const miniUserAddress = await updateUserAddress();\n    const userDaiBalance = await getFormattedNumber(\n      await getTokenBalance(userAccount, DAI)\n    );\n    const userUsdcBalance = await getFormattedNumber(\n      await getTokenBalance(userAccount, USDC)\n    );\n\n    setInputs({\n      ...inputs,\n      userAddress: miniUserAddress,\n      userDaiBalance: userDaiBalance,\n    });\n  };\n\n  const updateDsProxyAddress = async () => {\n    return getMiniAddress(await getUserProxy(userAccount));\n  };\n\n  const updateUserAddress = async () => {\n    return await getMiniUserAddress(userAccount);\n  };\n\n  const openVaultA = async () => {\n    if (await userHaveETHAVault(userAccount, inputs.userProxy)) return;\n\n    await userProxyCast(\n      [CONNECT_MAKER_ADDR],\n      [await openMakerVault(\"ETH-A\")],\n      userAccount,\n      0,\n      500000\n    );\n    setInputs({ ...inputs, vaultAExist: true });\n    setRefresh(!refresh);\n  };\n\n  const openVaultB = async () => {\n    if (await userHaveETHBVault(userAccount, inputs.userProxy)) return;\n\n    await userProxyCast(\n      [CONNECT_MAKER_ADDR],\n      [await openMakerVault(\"ETH-B\")],\n      userAccount,\n      0,\n      500000\n    );\n    setInputs({ ...inputs, vaultBExist: true });\n    setRefresh(!refresh);\n  };\n\n  const depositVaultA = async (newValue) => {\n    const deposit = newValue;\n\n    const vault = await getVault(userAccount, inputs.userProxy, \"ETH-A\");\n    const vaultId = vault !== undefined ? vault.id : 0;\n    const valueOfDeposit = ethers.utils.parseEther(String(deposit));\n    const data = await depositMakerVault(valueOfDeposit, vaultId);\n\n    await userProxyCast(\n      [CONNECT_MAKER_ADDR],\n      [data],\n      userAccount,\n      valueOfDeposit,\n      500000\n    );\n    setRefresh(!refresh);\n  };\n\n  const borrowVaultA = async (newValue) => {\n    const borrow = newValue;\n\n    const vault = await getVault(userAccount, inputs.userProxy, \"ETH-A\");\n    const vaultId = vault !== undefined ? vault.id : 0;\n    const data = await borrowMakerVault(\n      ethers.utils.parseEther(borrow),\n      vaultId\n    );\n\n    await userProxyCast([CONNECT_MAKER_ADDR], [data], userAccount, 0, 500000);\n    setRefresh(!refresh);\n  };\n\n  const setGelatoAsAuthority = async () => {\n    await userProxyCast(\n      [CONNECT_AUTH],\n      [await authorizeGelato()],\n      userAccount,\n      0,\n      500000\n    );\n\n    setInputs({ ...inputs, gelatoHasRight: true });\n    setRefresh(!refresh);\n  };\n\n  useEffect(() => {\n    inputsUpdates();\n  }, [refresh]);\n\n  return (\n    <>\n      <CardWrapper>\n        <ViewCardWrapper\n          title=\"User Address\"\n          state={inputs.userAddress}\n        ></ViewCardWrapper>\n      </CardWrapper>\n      <CardWrapper>\n        <ViewCardWrapper\n          title=\"DAI Balance\"\n          state={inputs.dsProxyBalance}\n        ></ViewCardWrapper>\n        <ViewCardWrapper\n          title=\"USDC Balance\"\n          state={inputs.dsProxyBalance}\n        ></ViewCardWrapper>\n      </CardWrapper>\n      <CardWrapper>\n        {!inputs.vaultAExist && (\n          <ViewCardButton\n            title=\"Create ETH-A Vault\"\n            action={openVaultA}\n          ></ViewCardButton>\n        )}\n        {inputs.vaultAExist && (\n          <InputCard\n            title=\"Deposit Col in ETH-A Vault\"\n            btnText=\"Deposit\"\n            setInputs={setInputs}\n            inputs={inputs}\n            execFunc={depositVaultA}\n          ></InputCard>\n        )}\n        {inputs.vaultAExist && (\n          <InputCard\n            title=\"Borrow DAI from ETH-A Vault\"\n            btnText=\"Borrow\"\n            setInputs={setInputs}\n            inputs={inputs}\n            execFunc={borrowVaultA}\n          ></InputCard>\n        )}\n      </CardWrapper>\n      {!inputs.vaultBExist && (\n        <CardWrapper>\n          <ViewCardButton\n            title=\"Create ETH-B Vault\"\n            action={openVaultB}\n          ></ViewCardButton>\n        </CardWrapper>\n      )}\n    </>\n  );\n};\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}