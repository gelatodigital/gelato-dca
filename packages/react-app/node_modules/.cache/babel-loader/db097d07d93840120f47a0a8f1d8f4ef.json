{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { getMiniAddress } from \"../utils/helpers\";\nimport { addresses, abis } from \"@gelato-krystal/contracts\";\nimport { GelatoCore } from \"@gelatonetwork/core\";\nconst {\n  GELATO_CORE,\n  GELATO_KRYSTAL\n} = addresses;\nconst {\n  GelatoKrystalAbi\n} = abis;\nexport const getUserAddress = async provider => {\n  const signer = await provider.getSigner();\n  return await signer.getAddress();\n};\nexport const getMiniUserAddress = async provider => {\n  return getMiniAddress(await getUserAddress(provider));\n};\nexport const getGelatoKrystal = async user => {\n  const signer = await user.getSigner();\n  return new ethers.Contract(GELATO_KRYSTAL, GelatoKrystalAbi, signer);\n};\nexport const getGelatoGasPrice = async user => {\n  const signer = await user.getSigner();\n  const gelatoCoreContract = new ethers.Contract(GELATO_CORE, GelatoCore.abi, signer);\n  const oracleAbi = [\"function latestAnswer() view returns (int256)\"];\n  const gelatoGasPriceOracleAddress = await gelatoCoreContract.gelatoGasPriceOracle(); // Get gelatoGasPriceOracleAddress\n\n  const gelatoGasPriceOracle = new ethers.Contract(gelatoGasPriceOracleAddress, oracleAbi, signer); // lastAnswer is used by GelatoGasPriceOracle as well as the Chainlink Oracle\n\n  return await gelatoGasPriceOracle.latestAnswer();\n};\nexport const getTokenBalance = async (user, token) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n  const tokenContract = new ethers.Contract(token, [\"function balanceOf(address) view returns (uint256)\"], signer);\n  const userBalance = await tokenContract.balanceOf(userAddr);\n  return userBalance;\n};\nexport const getTokenBalanceString = async (userAccount, token, tokenSymbol, decimals) => {\n  const userBalance = await getTokenBalance(userAccount, token);\n  const userBalanceHumanReadable = ethers.utils.formatUnits(userBalance, decimals);\n  return `${parseFloat(userBalanceHumanReadable).toFixed(8)} ${tokenSymbol}`;\n};\nexport const getCanExecStatus = async (user, taskReceipt) => {\n  const signer = await user.getSigner();\n  const gelatoCore = new ethers.Contract(GELATO_CORE, GelatoCore.abi, signer);\n  const canExecStatus = await gelatoCore.canExec(taskReceipt, 5000000, ethers.utils.parseUnits(\"40\", \"gwei\"));\n  console.log(taskReceipt.id.toString());\n  console.log(canExecStatus);\n};","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/services/stateReads.js"],"names":["ethers","getMiniAddress","addresses","abis","GelatoCore","GELATO_CORE","GELATO_KRYSTAL","GelatoKrystalAbi","getUserAddress","provider","signer","getSigner","getAddress","getMiniUserAddress","getGelatoKrystal","user","Contract","getGelatoGasPrice","gelatoCoreContract","abi","oracleAbi","gelatoGasPriceOracleAddress","gelatoGasPriceOracle","latestAnswer","getTokenBalance","token","userAddr","tokenContract","userBalance","balanceOf","getTokenBalanceString","userAccount","tokenSymbol","decimals","userBalanceHumanReadable","utils","formatUnits","parseFloat","toFixed","getCanExecStatus","taskReceipt","gelatoCore","canExecStatus","canExec","parseUnits","console","log","id","toString"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\nimport { getMiniAddress } from \"../utils/helpers\";\nimport { addresses, abis } from \"@gelato-krystal/contracts\";\nimport { GelatoCore } from \"@gelatonetwork/core\";\n\nconst { GELATO_CORE, GELATO_KRYSTAL } = addresses;\nconst { GelatoKrystalAbi } = abis;\n\nexport const getUserAddress = async (provider) => {\n  const signer = await provider.getSigner();\n  return await signer.getAddress();\n};\n\nexport const getMiniUserAddress = async (provider) => {\n  return getMiniAddress(await getUserAddress(provider));\n};\n\nexport const getGelatoKrystal = async (user) => {\n  const signer = await user.getSigner();\n  return new ethers.Contract(GELATO_KRYSTAL, GelatoKrystalAbi, signer);\n};\n\nexport const getGelatoGasPrice = async (user) => {\n  const signer = await user.getSigner();\n  const gelatoCoreContract = new ethers.Contract(\n    GELATO_CORE,\n    GelatoCore.abi,\n    signer\n  );\n\n  const oracleAbi = [\"function latestAnswer() view returns (int256)\"];\n\n  const gelatoGasPriceOracleAddress = await gelatoCoreContract.gelatoGasPriceOracle();\n\n  // Get gelatoGasPriceOracleAddress\n  const gelatoGasPriceOracle = new ethers.Contract(\n    gelatoGasPriceOracleAddress,\n    oracleAbi,\n    signer\n  );\n\n  // lastAnswer is used by GelatoGasPriceOracle as well as the Chainlink Oracle\n  return await gelatoGasPriceOracle.latestAnswer();\n};\n\nexport const getTokenBalance = async (user, token) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n\n  const tokenContract = new ethers.Contract(\n    token,\n    [\"function balanceOf(address) view returns (uint256)\"],\n    signer\n  );\n  const userBalance = await tokenContract.balanceOf(userAddr);\n  return userBalance;\n};\n\nexport const getTokenBalanceString = async (\n  userAccount,\n  token,\n  tokenSymbol,\n  decimals\n) => {\n  const userBalance = await getTokenBalance(userAccount, token);\n  const userBalanceHumanReadable = ethers.utils.formatUnits(\n    userBalance,\n    decimals\n  );\n  return `${parseFloat(userBalanceHumanReadable).toFixed(8)} ${tokenSymbol}`;\n};\n\nexport const getCanExecStatus = async (user, taskReceipt) => {\n  const signer = await user.getSigner();\n\n  const gelatoCore = new ethers.Contract(GELATO_CORE, GelatoCore.abi, signer);\n  const canExecStatus = await gelatoCore.canExec(\n    taskReceipt,\n    5000000,\n    ethers.utils.parseUnits(\"40\", \"gwei\")\n  );\n  console.log(taskReceipt.id.toString());\n  console.log(canExecStatus);\n};\n"]},"metadata":{},"sourceType":"module"}