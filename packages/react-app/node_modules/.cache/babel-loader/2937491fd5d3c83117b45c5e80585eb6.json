{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { getGelatoKrystal } from \"./stateReads\";\nexport const submitOrder = async (user, inToken, outToken, delay, amountPerTrade, nTrades, minSlippage = 9001, maxSlippage = 9000, gasPriceCeil = 0) => {\n  console.log(\"1\");\n  const gelatoKrystal = await getGelatoKrystal(user);\n  console.log(\"2\");\n  const options = {\n    gasPrice: ethers.utils.parseUnits(\"50\", \"gwei\")\n  };\n  console.log(\"3\");\n\n  try {\n    const submitTx = await gelatoKrystal.submitDCAKyber({\n      _inToken: inToken,\n      _outToken: outToken,\n      _amountPerTrade: amountPerTrade,\n      _nTrades: nTrades,\n      _minSlippage: minSlippage,\n      _maxSlippage: maxSlippage,\n      _delay: delay,\n      _gasPriceCeil: gasPriceCeil\n    }, options);\n    console.log(\"4\");\n    await submitTx.wait();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const approveToken = async (user, inToken, totalAmount) => {\n  const signer = await user.getSigner();\n  const token = new ethers.Contract(inToken, [\"function approve(address _spender, uint256 _amount)\"], signer);\n  const options = {\n    gasPrice: ethers.utils.parseUnits(\"50\", \"gwei\")\n  };\n\n  try {\n    const approve = await token.approve(GELATO_KRYSTAL, totalAmount, options);\n    await approve.wait();\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/services/stateWrites.js"],"names":["ethers","getGelatoKrystal","submitOrder","user","inToken","outToken","delay","amountPerTrade","nTrades","minSlippage","maxSlippage","gasPriceCeil","console","log","gelatoKrystal","options","gasPrice","utils","parseUnits","submitTx","submitDCAKyber","_inToken","_outToken","_amountPerTrade","_nTrades","_minSlippage","_maxSlippage","_delay","_gasPriceCeil","wait","err","approveToken","totalAmount","signer","getSigner","token","Contract","approve","GELATO_KRYSTAL"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,OAAO,MAAMC,WAAW,GAAG,OACzBC,IADyB,EAEzBC,OAFyB,EAGzBC,QAHyB,EAIzBC,KAJyB,EAKzBC,cALyB,EAMzBC,OANyB,EAOzBC,WAAW,GAAG,IAPW,EAQzBC,WAAW,GAAG,IARW,EASzBC,YAAY,GAAG,CATU,KAUtB;AACHC,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,QAAMC,aAAa,GAAG,MAAMb,gBAAgB,CAACE,IAAD,CAA5C;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAEA,QAAME,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAEhB,MAAM,CAACiB,KAAP,CAAaC,UAAb,CAAwB,IAAxB,EAA8B,MAA9B;AADI,GAAhB;AAGAN,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AAEA,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAML,aAAa,CAACM,cAAd,CACrB;AACEC,MAAAA,QAAQ,EAAEjB,OADZ;AAEEkB,MAAAA,SAAS,EAAEjB,QAFb;AAGEkB,MAAAA,eAAe,EAAEhB,cAHnB;AAIEiB,MAAAA,QAAQ,EAAEhB,OAJZ;AAKEiB,MAAAA,YAAY,EAAEhB,WALhB;AAMEiB,MAAAA,YAAY,EAAEhB,WANhB;AAOEiB,MAAAA,MAAM,EAAErB,KAPV;AAQEsB,MAAAA,aAAa,EAAEjB;AARjB,KADqB,EAWrBI,OAXqB,CAAvB;AAaAH,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,UAAMM,QAAQ,CAACU,IAAT,EAAN;AACD,GAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZlB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ;AACD;AACF,CAvCM;AAyCP,OAAO,MAAMC,YAAY,GAAG,OAAO5B,IAAP,EAAaC,OAAb,EAAsB4B,WAAtB,KAAsC;AAChE,QAAMC,MAAM,GAAG,MAAM9B,IAAI,CAAC+B,SAAL,EAArB;AACA,QAAMC,KAAK,GAAG,IAAInC,MAAM,CAACoC,QAAX,CACZhC,OADY,EAEZ,CAAC,qDAAD,CAFY,EAGZ6B,MAHY,CAAd;AAMA,QAAMlB,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAEhB,MAAM,CAACiB,KAAP,CAAaC,UAAb,CAAwB,IAAxB,EAA8B,MAA9B;AADI,GAAhB;;AAIA,MAAI;AACF,UAAMmB,OAAO,GAAG,MAAMF,KAAK,CAACE,OAAN,CAAcC,cAAd,EAA8BN,WAA9B,EAA2CjB,OAA3C,CAAtB;AACA,UAAMsB,OAAO,CAACR,IAAR,EAAN;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZlB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ;AACD;AACF,CAlBM","sourcesContent":["import { ethers } from \"ethers\";\nimport { getGelatoKrystal } from \"./stateReads\";\n\nexport const submitOrder = async (\n  user,\n  inToken,\n  outToken,\n  delay,\n  amountPerTrade,\n  nTrades,\n  minSlippage = 9001,\n  maxSlippage = 9000,\n  gasPriceCeil = 0\n) => {\n  console.log(\"1\");\n  const gelatoKrystal = await getGelatoKrystal(user);\n  console.log(\"2\");\n\n  const options = {\n    gasPrice: ethers.utils.parseUnits(\"50\", \"gwei\"),\n  };\n  console.log(\"3\");\n\n  try {\n    const submitTx = await gelatoKrystal.submitDCAKyber(\n      {\n        _inToken: inToken,\n        _outToken: outToken,\n        _amountPerTrade: amountPerTrade,\n        _nTrades: nTrades,\n        _minSlippage: minSlippage,\n        _maxSlippage: maxSlippage,\n        _delay: delay,\n        _gasPriceCeil: gasPriceCeil,\n      },\n      options\n    );\n    console.log(\"4\");\n    await submitTx.wait();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const approveToken = async (user, inToken, totalAmount) => {\n  const signer = await user.getSigner();\n  const token = new ethers.Contract(\n    inToken,\n    [\"function approve(address _spender, uint256 _amount)\"],\n    signer\n  );\n\n  const options = {\n    gasPrice: ethers.utils.parseUnits(\"50\", \"gwei\"),\n  };\n\n  try {\n    const approve = await token.approve(GELATO_KRYSTAL, totalAmount, options);\n    await approve.wait();\n  } catch (err) {\n    console.log(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}