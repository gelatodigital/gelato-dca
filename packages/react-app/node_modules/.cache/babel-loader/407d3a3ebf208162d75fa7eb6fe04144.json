{"ast":null,"code":"var _jsxFileName = \"/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/App.js\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport User from \"./pages/User\";\nimport SubmitTask from \"./pages/SubmitTask\";\nimport TaskOverview from \"./pages/TaskOverview\";\nimport { ethers } from \"ethers\";\nimport GelatoLogo from \"./components/Logo\";\nimport { Body, Button, Header, HyperLink, CardWrapper } from \"./components\";\nimport { web3Modal, logoutOfWeb3Modal } from \"./utils/web3Modal\";\nimport GET_TRANSFERS from \"./graphql/subgraph\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\n\nfunction WalletButton({\n  userAccount,\n  loadWeb3Modal\n}) {\n  return /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      if (!userAccount) {\n        loadWeb3Modal();\n      } else {\n        logoutOfWeb3Modal();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, !userAccount ? \"Connect Wallet\" : \"Disconnect Wallet\");\n}\n\nfunction App() {\n  const [userAccount, setUserAccount] = useState();\n  const [userAddress, setUserAddress] = useState();\n  /* Open wallet selection modal. */\n\n  const loadWeb3Modal = useCallback(async () => {\n    const newuserAccount = await web3Modal.connect(); //console.log((new ethers.providers.Web3Provider(newuserAccount)).getSigner());\n\n    setUserAccount(new Web3Provider(newuserAccount));\n  }, []);\n  /* If user has loaded a wallet before, load it automatically. */\n\n  useEffect(() => {\n    if (web3Modal.cacheduserAccount) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const updateUserAddress = async () => {\n    const signer = await userAccount.getSigner();\n    const newUserAddress = await signer.getAddress();\n    if (userAddress !== newUserAddress) setUserAddress(newUserAddress);\n  };\n\n  useEffect(() => {\n    if (userAccount) updateUserAddress();\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gelato-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(GelatoLogo, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  })), userAccount && userAddress && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(HyperLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    style: {\n      color: \"#483D8B\",\n      textDecoration: \"none\",\n      \"font-weight\": \"bold\"\n    },\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, \"User\")), /*#__PURE__*/React.createElement(HyperLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    style: {\n      color: \"#483D8B\",\n      textDecoration: \"none\",\n      \"font-weight\": \"bold\"\n    },\n    to: \"/submit-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Submit Task\")), /*#__PURE__*/React.createElement(HyperLink, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    style: {\n      color: \"#483D8B\",\n      textDecoration: \"none\",\n      \"font-weight\": \"bold\"\n    },\n    to: \"/task-overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Task Overview\"))), /*#__PURE__*/React.createElement(WalletButton, {\n    userAccount: userAccount,\n    loadWeb3Modal: loadWeb3Modal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, !userAccount && /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: \"#4299e1\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }, \"Please login\"))), userAccount && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Route, {\n    path: \"/submit-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SubmitTask, {\n    userAccount: userAccount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/task-overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, userAccount && userAddress && /*#__PURE__*/React.createElement(TaskOverview, {\n    userAccount: userAccount,\n    userAddress: userAddress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(User, {\n    userAccount: userAccount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/App.js"],"names":["React","useCallback","useEffect","useState","Web3Provider","useQuery","User","SubmitTask","TaskOverview","ethers","GelatoLogo","Body","Button","Header","HyperLink","CardWrapper","web3Modal","logoutOfWeb3Modal","GET_TRANSFERS","BrowserRouter","Router","Switch","Route","Link","Redirect","WalletButton","userAccount","loadWeb3Modal","App","setUserAccount","userAddress","setUserAddress","newuserAccount","connect","cacheduserAccount","updateUserAddress","signer","getSigner","newUserAddress","getAddress","color","textDecoration"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport User from \"./pages/User\";\nimport SubmitTask from \"./pages/SubmitTask\";\nimport TaskOverview from \"./pages/TaskOverview\";\nimport { ethers } from \"ethers\";\nimport GelatoLogo from \"./components/Logo\";\n\nimport { Body, Button, Header, HyperLink, CardWrapper } from \"./components\";\n\nimport { web3Modal, logoutOfWeb3Modal } from \"./utils/web3Modal\";\n\nimport GET_TRANSFERS from \"./graphql/subgraph\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from \"react-router-dom\";\n\nfunction WalletButton({ userAccount, loadWeb3Modal }) {\n  return (\n    <Button\n      onClick={() => {\n        if (!userAccount) {\n          loadWeb3Modal();\n        } else {\n          logoutOfWeb3Modal();\n        }\n      }}\n    >\n      {!userAccount ? \"Connect Wallet\" : \"Disconnect Wallet\"}\n    </Button>\n  );\n}\n\nfunction App() {\n  const [userAccount, setUserAccount] = useState();\n  const [userAddress, setUserAddress] = useState();\n\n  /* Open wallet selection modal. */\n  const loadWeb3Modal = useCallback(async () => {\n    const newuserAccount = await web3Modal.connect();\n    //console.log((new ethers.providers.Web3Provider(newuserAccount)).getSigner());\n    setUserAccount(new Web3Provider(newuserAccount));\n  }, []);\n\n  /* If user has loaded a wallet before, load it automatically. */\n  useEffect(() => {\n    if (web3Modal.cacheduserAccount) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const updateUserAddress = async () => {\n    const signer = await userAccount.getSigner();\n    const newUserAddress = await signer.getAddress();\n    if (userAddress !== newUserAddress) setUserAddress(newUserAddress);\n  };\n\n  useEffect(() => {\n    if (userAccount) updateUserAddress();\n  });\n\n  return (\n    <div>\n      <Router>\n        <Header>\n          <div className=\"gelato-logo\">\n            <GelatoLogo></GelatoLogo>\n          </div>\n          {userAccount && userAddress && (\n            <>\n              <HyperLink>\n                <Link\n                  style={{\n                    color: \"#483D8B\",\n                    textDecoration: \"none\",\n                    \"font-weight\": \"bold\",\n                  }}\n                  to=\"/\"\n                >\n                  User\n                </Link>\n              </HyperLink>\n              <HyperLink>\n                <Link\n                  style={{\n                    color: \"#483D8B\",\n                    textDecoration: \"none\",\n                    \"font-weight\": \"bold\",\n                  }}\n                  to=\"/submit-task\"\n                >\n                  Submit Task\n                </Link>\n              </HyperLink>\n              <HyperLink>\n                <Link\n                  style={{\n                    color: \"#483D8B\",\n                    textDecoration: \"none\",\n                    \"font-weight\": \"bold\",\n                  }}\n                  to=\"/task-overview\"\n                >\n                  Task Overview\n                </Link>\n              </HyperLink>\n            </>\n          )}\n          <WalletButton\n            userAccount={userAccount}\n            loadWeb3Modal={loadWeb3Modal}\n          />\n        </Header>\n        <Body>\n          <Switch>\n            {!userAccount && (\n              <Route path=\"/\">\n                <CardWrapper>\n                  <h3 style={{ color: \"#4299e1\" }}>Please login</h3>\n                </CardWrapper>\n              </Route>\n            )}\n            {userAccount && (\n              <>\n                <Route path=\"/submit-task\">\n                  <SubmitTask userAccount={userAccount}></SubmitTask>\n                </Route>\n                <Route path=\"/task-overview\">\n                  {userAccount && userAddress && (\n                    <TaskOverview\n                      userAccount={userAccount}\n                      userAddress={userAddress}\n                    ></TaskOverview>\n                  )}\n                </Route>\n                <Route exact path=\"/\">\n                  <User userAccount={userAccount}></User>\n                </Route>\n\n                {/*Redirect all 404's to home*/}\n                <Redirect to=\"/\" />\n              </>\n            )}\n          </Switch>\n        </Body>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}