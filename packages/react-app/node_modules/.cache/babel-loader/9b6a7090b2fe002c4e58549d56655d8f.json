{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { getGelatoKrystal } from \"./stateReads\";\nexport const submitOrder = async (user, inToken, outToken, delay, amountPerTrade, nTrades, minSlippage = 9001, maxSlippage = 9000, gasPriceCeil = 0) => {\n  console.log(\"1\");\n  const gelatoKrystal = await getGelatoKrystal(user);\n  console.log(\"2\");\n  const options = {\n    gasPrice: ethers.utils.parseUnits(\"50\", \"gwei\")\n  };\n  console.log(\"3\");\n\n  try {\n    const submitTx = await gelatoKrystal.submitDCAKyber({\n      inToken: inToken,\n      outToken: outToken,\n      amountPerTrade: amountPerTrade,\n      nTrades: nTrades,\n      minSlippage: minSlippage,\n      maxSlippage: maxSlippage,\n      delay: delay,\n      gasPriceCeil: gasPriceCeil\n    }, options);\n    console.log(\"4\");\n    await submitTx.wait();\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/services/stateWrites.js"],"names":["ethers","getGelatoKrystal","submitOrder","user","inToken","outToken","delay","amountPerTrade","nTrades","minSlippage","maxSlippage","gasPriceCeil","console","log","gelatoKrystal","options","gasPrice","utils","parseUnits","submitTx","submitDCAKyber","wait","err"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,OAAO,MAAMC,WAAW,GAAG,OACzBC,IADyB,EAEzBC,OAFyB,EAGzBC,QAHyB,EAIzBC,KAJyB,EAKzBC,cALyB,EAMzBC,OANyB,EAOzBC,WAAW,GAAG,IAPW,EAQzBC,WAAW,GAAG,IARW,EASzBC,YAAY,GAAG,CATU,KAUtB;AACHC,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,QAAMC,aAAa,GAAG,MAAMb,gBAAgB,CAACE,IAAD,CAA5C;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAEA,QAAME,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAEhB,MAAM,CAACiB,KAAP,CAAaC,UAAb,CAAwB,IAAxB,EAA8B,MAA9B;AADI,GAAhB;AAGAN,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAML,aAAa,CAACM,cAAd,CACrB;AACEhB,MAAAA,OAAO,EAAEA,OADX;AAEEC,MAAAA,QAAQ,EAAEA,QAFZ;AAGEE,MAAAA,cAAc,EAAEA,cAHlB;AAIEC,MAAAA,OAAO,EAAEA,OAJX;AAKEC,MAAAA,WAAW,EAAEA,WALf;AAMEC,MAAAA,WAAW,EAAEA,WANf;AAOEJ,MAAAA,KAAK,EAAEA,KAPT;AAQEK,MAAAA,YAAY,EAAEA;AARhB,KADqB,EAWrBI,OAXqB,CAAvB;AAaAH,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,UAAMM,QAAQ,CAACE,IAAT,EAAN;AACD,GAhBD,CAgBE,OAAOC,GAAP,EAAY;AACZV,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACD;AACF,CAtCM","sourcesContent":["import { ethers } from \"ethers\";\nimport { getGelatoKrystal } from \"./stateReads\";\n\nexport const submitOrder = async (\n  user,\n  inToken,\n  outToken,\n  delay,\n  amountPerTrade,\n  nTrades,\n  minSlippage = 9001,\n  maxSlippage = 9000,\n  gasPriceCeil = 0\n) => {\n  console.log(\"1\");\n  const gelatoKrystal = await getGelatoKrystal(user);\n  console.log(\"2\");\n\n  const options = {\n    gasPrice: ethers.utils.parseUnits(\"50\", \"gwei\"),\n  };\n  console.log(\"3\");\n  try {\n    const submitTx = await gelatoKrystal.submitDCAKyber(\n      {\n        inToken: inToken,\n        outToken: outToken,\n        amountPerTrade: amountPerTrade,\n        nTrades: nTrades,\n        minSlippage: minSlippage,\n        maxSlippage: maxSlippage,\n        delay: delay,\n        gasPriceCeil: gasPriceCeil,\n      },\n      options\n    );\n    console.log(\"4\");\n    await submitTx.wait();\n  } catch (err) {\n    console.log(err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}