{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { addresses } from \"@project/contracts\";\nimport { getGasNowGasPrice } from \"../utils/helpers\";\nimport { getUserProxyContract } from \"./stateReads\";\nconst {\n  INSTA_INDEX_ADDR\n} = addresses;\nexport const deployProxyAction = async user => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n  const instaIndexContract = new ethers.Contract(INSTA_INDEX_ADDR, [\"function build(address _owner, uint accountVersion, address _origin) returns (address _account)\"], signer);\n  const gasPrice = await getGasNowGasPrice();\n  const tx = await instaIndexContract.build(userAddr, 1, userAddr, {\n    gasPrice: gasPrice\n  });\n  await tx.wait();\n};\nexport const userProxyCast = async (targets, datas, user, val = 0, gasLimit = 5000000) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n  const userProxy = await getUserProxyContract(user);\n  const options = {\n    gasLimit: gasLimit,\n    value: val\n  };\n  const castTx = await userProxy.cast(targets, datas, userAddr, options);\n  await castTx.wait();\n};","map":{"version":3,"sources":["/Users/Hilmar/code/integrations/krystal/gelato-krystal/packages/react-app/src/services/stateWrites.js"],"names":["ethers","addresses","getGasNowGasPrice","getUserProxyContract","INSTA_INDEX_ADDR","deployProxyAction","user","signer","getSigner","userAddr","getAddress","instaIndexContract","Contract","gasPrice","tx","build","wait","userProxyCast","targets","datas","val","gasLimit","userProxy","options","value","castTx","cast"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,oBAAT,QAAqC,cAArC;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAuBH,SAA7B;AAEA,OAAO,MAAMI,iBAAiB,GAAG,MAAOC,IAAP,IAAgB;AAC/C,QAAMC,MAAM,GAAG,MAAMD,IAAI,CAACE,SAAL,EAArB;AACA,QAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,UAAP,EAAvB;AACA,QAAMC,kBAAkB,GAAG,IAAIX,MAAM,CAACY,QAAX,CACzBR,gBADyB,EAEzB,CACE,iGADF,CAFyB,EAKzBG,MALyB,CAA3B;AAOA,QAAMM,QAAQ,GAAG,MAAMX,iBAAiB,EAAxC;AACA,QAAMY,EAAE,GAAG,MAAMH,kBAAkB,CAACI,KAAnB,CAAyBN,QAAzB,EAAmC,CAAnC,EAAsCA,QAAtC,EAAgD;AAC/DI,IAAAA,QAAQ,EAAEA;AADqD,GAAhD,CAAjB;AAGA,QAAMC,EAAE,CAACE,IAAH,EAAN;AACD,CAfM;AAiBP,OAAO,MAAMC,aAAa,GAAG,OAC3BC,OAD2B,EAE3BC,KAF2B,EAG3Bb,IAH2B,EAI3Bc,GAAG,GAAG,CAJqB,EAK3BC,QAAQ,GAAG,OALgB,KAMxB;AACH,QAAMd,MAAM,GAAG,MAAMD,IAAI,CAACE,SAAL,EAArB;AACA,QAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,UAAP,EAAvB;AACA,QAAMY,SAAS,GAAG,MAAMnB,oBAAoB,CAACG,IAAD,CAA5C;AACA,QAAMiB,OAAO,GAAG;AACdF,IAAAA,QAAQ,EAAEA,QADI;AAEdG,IAAAA,KAAK,EAAEJ;AAFO,GAAhB;AAIA,QAAMK,MAAM,GAAG,MAAMH,SAAS,CAACI,IAAV,CAAeR,OAAf,EAAwBC,KAAxB,EAA+BV,QAA/B,EAAyCc,OAAzC,CAArB;AACA,QAAME,MAAM,CAACT,IAAP,EAAN;AACD,CAhBM","sourcesContent":["import { ethers } from \"ethers\";\nimport { addresses } from \"@project/contracts\";\nimport { getGasNowGasPrice } from \"../utils/helpers\";\nimport { getUserProxyContract } from \"./stateReads\";\n\nconst { INSTA_INDEX_ADDR } = addresses;\n\nexport const deployProxyAction = async (user) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n  const instaIndexContract = new ethers.Contract(\n    INSTA_INDEX_ADDR,\n    [\n      \"function build(address _owner, uint accountVersion, address _origin) returns (address _account)\",\n    ],\n    signer\n  );\n  const gasPrice = await getGasNowGasPrice();\n  const tx = await instaIndexContract.build(userAddr, 1, userAddr, {\n    gasPrice: gasPrice,\n  });\n  await tx.wait();\n};\n\nexport const userProxyCast = async (\n  targets,\n  datas,\n  user,\n  val = 0,\n  gasLimit = 5000000\n) => {\n  const signer = await user.getSigner();\n  const userAddr = await signer.getAddress();\n  const userProxy = await getUserProxyContract(user);\n  const options = {\n    gasLimit: gasLimit,\n    value: val,\n  };\n  const castTx = await userProxy.cast(targets, datas, userAddr, options);\n  await castTx.wait();\n};\n"]},"metadata":{},"sourceType":"module"}